// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id                    Int                   @id @default(autoincrement())
  nome                  String
  nomeConjuge           String? // Novo campo
  profissao             String? // Novo campo
  cpfCnpj               String                @unique
  dataNascimento        DateTime?
  endereco              Endereco?
  contatos              Contato?
  documentos            Documento[]
  dataCadastro          DateTime              @default(now())
  contratos             Contrato[]
  boletos               Boleto[]
  interacoes            Interacao[]
  comunicacoes          Comunicacao[]
  clientesInadimplentes ClienteInadimplente[]

  @@index([cpfCnpj])
  @@map("clientes")
}

model Endereco {
  id          Int     @id @default(autoincrement())
  clienteId   Int     @unique
  cep         String
  logradouro  String
  numero      String
  complemento String?
  bairro      String
  cidade      String
  estado      String
  cliente     Cliente @relation(fields: [clienteId], references: [id], onDelete: Cascade)

  @@index([clienteId])
  @@index([cep])
  @@map("enderecos")
}

model Contato {
  id        Int      @id @default(autoincrement())
  clienteId Int      @unique
  telefones String[]
  emails    String[]
  cliente   Cliente  @relation(fields: [clienteId], references: [id], onDelete: Cascade)

  @@index([clienteId])
  @@map("contatos")
}

model Documento {
  id         Int      @id @default(autoincrement())
  clienteId  Int
  tipo       String
  nome       String
  arquivo    String
  dataUpload DateTime @default(now())
  s3Key      String?
  cliente    Cliente  @relation(fields: [clienteId], references: [id], onDelete: Cascade)

  @@index([clienteId])
  @@map("documentos")
}

model Loteamento {
  id                  Int       @id @default(autoincrement())
  nome                String
  descricao           String?
  localizacao         String?
  area                Float?
  proprietarioId      Int?
  lotes               Lote[]
  proprietario        User?     @relation("ProprietarioLoteamentos", fields: [proprietarioId], references: [id])

  @@index([proprietarioId])
  @@map("loteamentos")
}

model Lote {
  id         Int        @id @default(autoincrement())
  numero     String
  quadra     String
  loteamento String
  area       Float
  valorBase  Decimal    @db.Decimal(10, 2)
  status     String     @default("disponivel")
  chave      String? // Novo campo
  contratos  Contrato[]
  loteamentoId        Int?
  
  loteamentoRef       Loteamento? @relation(fields: [loteamentoId], references: [id])

  @@index([status])
  @@index([quadra, numero])
  @@index([chave]) // Novo índice
  @@index([loteamentoId])
  @@map("lotes")
}

model Contrato {
  id                    Int       @id @default(autoincrement())
  clienteId             Int
  loteId                Int
  chave                 String? // Novo campo
  numeroContrato        String? // Novo campo
  dataEmissao           DateTime? // Novo campo
  dataPrimeiraPrestacao DateTime? // Novo campo
  valorPrestacao        Decimal?  @db.Decimal(10, 2) // Novo campo
  dataInicio            DateTime
  dataFim               DateTime
  valorTotal            Decimal   @db.Decimal(10, 2)
  valorEntrada          Decimal   @db.Decimal(10, 2)
  numeroParcelas        Int
  dataVencimento        Int
  clausulas             String    @db.Text
  status                String    @default("ativo")
  dataCriacao           DateTime  @default(now())
  parcelasPagas         Int       @default(0)
  ultimoReajuste        Json?
  
  // Campos para o fluxo de aprovação
  estado                String    @default("pre_contrato") // pre_contrato, em_aprovacao, aprovado, oficializado
  aprovadoVendedor      Boolean   @default(false)
  aprovadoDiretor       Boolean   @default(false)
  aprovadoProprietario  Boolean   @default(false)
  contratoOficialUrl    String?   // URL do contrato oficial digitalizado
  dataOficializacao     DateTime?
  vendedorId            Int?      // ID do vendedor que criou o contrato
  proprietarioId        Int?      // ID do proprietário do loteamento

  cliente   Cliente    @relation(fields: [clienteId], references: [id])
  lote      Lote       @relation(fields: [loteId], references: [id])
  vendedor  User?      @relation("VendedorContratos", fields: [vendedorId], references: [id])
  proprietario User?   @relation("ProprietarioContratos", fields: [proprietarioId], references: [id])
  
  boletos   Boleto[]
  reajustes Reajuste[]
  aditivos  Aditivo[]
  distratos Distrato[]
  quitacoes Quitacao[]
  parcelas  Parcela[]

  @@index([clienteId])
  @@index([loteId])
  @@index([status])
  @@index([chave])
  @@index([numeroContrato])
  @@index([estado])
  @@index([vendedorId])
  @@index([proprietarioId])
  @@map("contratos")
}

model Boleto {
  id               Int       @id @default(autoincrement())
  clienteId        Int
  clienteNome      String
  contratoId       Int
  valor            Decimal   @db.Decimal(10, 2)
  dataVencimento   DateTime
  numeroParcela    Int
  descricao        String
  nossoNumero      String    @unique
  linhaDigitavel   String
  codigoBarras     String
  pdfUrl           String
  dataGeracao      DateTime  @default(now())
  status           String    @default("gerado")
  dataPagamento    DateTime?
  valorPago        Decimal?  @db.Decimal(10, 2)
  formaPagamento   String?
  dataCancelamento DateTime?
  comprovante      String?
  parcelaId        Int?      @unique // Novo campo

  cliente  Cliente  @relation(fields: [clienteId], references: [id])
  contrato Contrato @relation(fields: [contratoId], references: [id])
  parcela  Parcela? @relation(fields: [parcelaId], references: [id])

  @@index([clienteId])
  @@index([contratoId])
  @@index([status])
  @@index([dataVencimento])
  @@index([nossoNumero])
  @@map("boletos")
}

model Reajuste {
  id                  Int       @id @default(autoincrement())
  contratoId          Int
  parcelaReferencia   Int
  valorOriginal       Decimal   @db.Decimal(10, 2)
  valorReajustado     Decimal   @db.Decimal(10, 2)
  indiceAplicado      Decimal   @db.Decimal(6, 2)
  indiceBase          String
  percentualAdicional Decimal   @db.Decimal(6, 2)
  reajusteTotal       Decimal   @db.Decimal(6, 2)
  dataReferencia      DateTime
  dataAplicacao       DateTime?
  status              String    @default("pendente")
  aplicado            Boolean   @default(false)

  contrato Contrato @relation(fields: [contratoId], references: [id])

  @@index([contratoId])
  @@index([status])
  @@index([dataReferencia])
  @@map("reajustes")
}

model ParametrosReajuste {
  id                   Int     @id @default(autoincrement())
  indiceBase           String
  percentualAdicional  Decimal @db.Decimal(6, 2)
  intervaloParcelas    Int
  alertaAntecipadoDias Int

  @@map("parametros_reajuste")
}

model IndicesEconomicos {
  id   Int      @id @default(autoincrement())
  IGPM Decimal  @db.Decimal(6, 2)
  IPCA Decimal  @db.Decimal(6, 2)
  INPC Decimal  @db.Decimal(6, 2)
  data DateTime @default(now())

  @@index([data])
  @@map("indices_economicos")
}

model ClienteInadimplente {
  id             Int       @id @default(autoincrement())
  clienteId      Int
  contratoId     Int
  valorEmAberto  Decimal   @db.Decimal(10, 2)
  diasAtraso     Int
  ultimaCobranca DateTime?
  status         String

  cliente  Cliente               @relation(fields: [clienteId], references: [id])
  parcelas ParcelaInadimplente[]

  @@index([clienteId])
  @@index([status])
  @@index([diasAtraso])
  @@map("clientes_inadimplentes")
}

model ParcelaInadimplente {
  id                     Int      @id @default(autoincrement())
  clienteInadimplente_id Int
  numero                 Int
  dataVencimento         DateTime
  valor                  Decimal  @db.Decimal(10, 2)
  valorAtualizado        Decimal  @db.Decimal(10, 2)
  status                 String

  clienteInadimplente ClienteInadimplente @relation(fields: [clienteInadimplente_id], references: [id], onDelete: Cascade)

  @@index([clienteInadimplente_id])
  @@index([status])
  @@map("parcelas_inadimplentes")
}

model Interacao {
  id         String   @id @default(uuid())
  clienteId  Int
  tipo       String
  data       DateTime
  observacao String   @db.Text
  usuario    String
  parcelaId  String?

  cliente Cliente @relation(fields: [clienteId], references: [id])

  @@index([clienteId])
  @@index([data])
  @@map("interacoes")
}

model Comunicacao {
  id          String   @id @default(uuid())
  clienteId   Int
  tipo        String
  data        DateTime
  mensagem    String   @db.Text
  status      String
  parcelaInfo Json?
  anexos      Json?

  cliente Cliente @relation(fields: [clienteId], references: [id])

  @@index([clienteId])
  @@index([data])
  @@index([tipo])
  @@map("comunicacoes")
}

model ModeloMensagem {
  id       String @id @default(uuid())
  nome     String
  tipo     String
  conteudo String @db.Text

  @@index([tipo])
  @@map("modelos_mensagem")
}

model ConfiguracaoGatilhos {
  id                      Int      @id @default(autoincrement())
  executarAutomaticamente Boolean  @default(true)
  horarioExecucao         String
  diasExecucao            String[]
  repetirCobrancas        Boolean  @default(true)
  intervaloRepeticao      Int      @default(7)
  limitarRepeticoes       Boolean  @default(true)
  limiteRepeticoes        Int      @default(3)
  gerarLog                Boolean  @default(true)
  gatilhos                Json

  @@map("configuracao_gatilhos")
}

model Aditivo {
  id             Int       @id @default(autoincrement())
  contratoId     Int
  tipo           String
  dataAssinatura DateTime
  motivoAditivo  String    @db.Text
  novoValor      Decimal?  @db.Decimal(10, 2)
  novaDataFim    DateTime?
  documentoUrl   String?
  status         String    @default("ativo")

  contrato Contrato @relation(fields: [contratoId], references: [id])

  @@index([contratoId])
  @@map("aditivos")
}

model Distrato {
  id             Int      @id @default(autoincrement())
  contratoId     Int
  dataDistrato   DateTime
  motivoDistrato String   @db.Text
  valorDevolucao Decimal? @db.Decimal(10, 2)
  documentoUrl   String?

  contrato Contrato @relation(fields: [contratoId], references: [id])

  @@index([contratoId])
  @@map("distratos")
}

model Quitacao {
  id            Int      @id @default(autoincrement())
  contratoId    Int
  dataQuitacao  DateTime
  valorQuitacao Decimal  @db.Decimal(10, 2)
  documentoUrl  String?

  contrato Contrato @relation(fields: [contratoId], references: [id])

  @@index([contratoId])
  @@map("quitacoes")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  name        String
  role        String    @default("operator")
  permissions Json? // Armazenar permissões como JSON
  status      Boolean   @default(true)
  lastLogin   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  perfil      String    @default("vendedor") // loteadora, vendedor, dono_terreno
  
  // Relações para os diferentes papéis
  contratosComoVendedor     Contrato[] @relation("VendedorContratos")
  contratosComoProprietario Contrato[] @relation("ProprietarioContratos")
  loteamentosComoProprietario Loteamento[] @relation("ProprietarioLoteamentos")

  @@map("users")
}

model Parcela {
  id             Int       @id @default(autoincrement())
  contratoId     Int
  numero         Int
  valor          Decimal   @db.Decimal(10, 2)
  dataVencimento DateTime
  status         String    @default("futura")
  dataPagamento  DateTime?
  valorPago      Decimal?  @db.Decimal(10, 2)
  formaPagamento String?
  observacoes    String?   @db.Text
  dataCriacao    DateTime  @default(now())
  boletoId       Int?      

  contrato Contrato @relation(fields: [contratoId], references: [id], onDelete: Cascade)
  boleto   Boleto?

  @@index([contratoId])
  @@index([status])
  @@index([dataVencimento])
  @@map("parcelas")
}