
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ClienteScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  nomeConjuge: 'nomeConjuge',
  profissao: 'profissao',
  cpfCnpj: 'cpfCnpj',
  dataNascimento: 'dataNascimento',
  dataCadastro: 'dataCadastro'
};

exports.Prisma.EnderecoScalarFieldEnum = {
  id: 'id',
  clienteId: 'clienteId',
  cep: 'cep',
  logradouro: 'logradouro',
  numero: 'numero',
  complemento: 'complemento',
  bairro: 'bairro',
  cidade: 'cidade',
  estado: 'estado'
};

exports.Prisma.ContatoScalarFieldEnum = {
  id: 'id',
  clienteId: 'clienteId',
  telefones: 'telefones',
  emails: 'emails'
};

exports.Prisma.DocumentoScalarFieldEnum = {
  id: 'id',
  clienteId: 'clienteId',
  tipo: 'tipo',
  nome: 'nome',
  arquivo: 'arquivo',
  dataUpload: 'dataUpload',
  s3Key: 's3Key'
};

exports.Prisma.LoteScalarFieldEnum = {
  id: 'id',
  numero: 'numero',
  quadra: 'quadra',
  loteamento: 'loteamento',
  area: 'area',
  valorBase: 'valorBase',
  status: 'status',
  chave: 'chave'
};

exports.Prisma.ContratoScalarFieldEnum = {
  id: 'id',
  clienteId: 'clienteId',
  loteId: 'loteId',
  chave: 'chave',
  numeroContrato: 'numeroContrato',
  dataEmissao: 'dataEmissao',
  dataPrimeiraPrestacao: 'dataPrimeiraPrestacao',
  valorPrestacao: 'valorPrestacao',
  dataInicio: 'dataInicio',
  dataFim: 'dataFim',
  valorTotal: 'valorTotal',
  valorEntrada: 'valorEntrada',
  numeroParcelas: 'numeroParcelas',
  dataVencimento: 'dataVencimento',
  clausulas: 'clausulas',
  status: 'status',
  dataCriacao: 'dataCriacao',
  parcelasPagas: 'parcelasPagas',
  ultimoReajuste: 'ultimoReajuste'
};

exports.Prisma.BoletoScalarFieldEnum = {
  id: 'id',
  clienteId: 'clienteId',
  clienteNome: 'clienteNome',
  contratoId: 'contratoId',
  valor: 'valor',
  dataVencimento: 'dataVencimento',
  numeroParcela: 'numeroParcela',
  descricao: 'descricao',
  nossoNumero: 'nossoNumero',
  linhaDigitavel: 'linhaDigitavel',
  codigoBarras: 'codigoBarras',
  pdfUrl: 'pdfUrl',
  dataGeracao: 'dataGeracao',
  status: 'status',
  dataPagamento: 'dataPagamento',
  valorPago: 'valorPago',
  formaPagamento: 'formaPagamento',
  dataCancelamento: 'dataCancelamento',
  comprovante: 'comprovante',
  parcelaId: 'parcelaId'
};

exports.Prisma.ReajusteScalarFieldEnum = {
  id: 'id',
  contratoId: 'contratoId',
  parcelaReferencia: 'parcelaReferencia',
  valorOriginal: 'valorOriginal',
  valorReajustado: 'valorReajustado',
  indiceAplicado: 'indiceAplicado',
  indiceBase: 'indiceBase',
  percentualAdicional: 'percentualAdicional',
  reajusteTotal: 'reajusteTotal',
  dataReferencia: 'dataReferencia',
  dataAplicacao: 'dataAplicacao',
  status: 'status',
  aplicado: 'aplicado'
};

exports.Prisma.ParametrosReajusteScalarFieldEnum = {
  id: 'id',
  indiceBase: 'indiceBase',
  percentualAdicional: 'percentualAdicional',
  intervaloParcelas: 'intervaloParcelas',
  alertaAntecipadoDias: 'alertaAntecipadoDias'
};

exports.Prisma.IndicesEconomicosScalarFieldEnum = {
  id: 'id',
  IGPM: 'IGPM',
  IPCA: 'IPCA',
  INPC: 'INPC',
  data: 'data'
};

exports.Prisma.ClienteInadimplenteScalarFieldEnum = {
  id: 'id',
  clienteId: 'clienteId',
  contratoId: 'contratoId',
  valorEmAberto: 'valorEmAberto',
  diasAtraso: 'diasAtraso',
  ultimaCobranca: 'ultimaCobranca',
  status: 'status'
};

exports.Prisma.ParcelaInadimplenteScalarFieldEnum = {
  id: 'id',
  clienteInadimplente_id: 'clienteInadimplente_id',
  numero: 'numero',
  dataVencimento: 'dataVencimento',
  valor: 'valor',
  valorAtualizado: 'valorAtualizado',
  status: 'status'
};

exports.Prisma.InteracaoScalarFieldEnum = {
  id: 'id',
  clienteId: 'clienteId',
  tipo: 'tipo',
  data: 'data',
  observacao: 'observacao',
  usuario: 'usuario',
  parcelaId: 'parcelaId'
};

exports.Prisma.ComunicacaoScalarFieldEnum = {
  id: 'id',
  clienteId: 'clienteId',
  tipo: 'tipo',
  data: 'data',
  mensagem: 'mensagem',
  status: 'status',
  parcelaInfo: 'parcelaInfo',
  anexos: 'anexos'
};

exports.Prisma.ModeloMensagemScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  tipo: 'tipo',
  conteudo: 'conteudo'
};

exports.Prisma.ConfiguracaoGatilhosScalarFieldEnum = {
  id: 'id',
  executarAutomaticamente: 'executarAutomaticamente',
  horarioExecucao: 'horarioExecucao',
  diasExecucao: 'diasExecucao',
  repetirCobrancas: 'repetirCobrancas',
  intervaloRepeticao: 'intervaloRepeticao',
  limitarRepeticoes: 'limitarRepeticoes',
  limiteRepeticoes: 'limiteRepeticoes',
  gerarLog: 'gerarLog',
  gatilhos: 'gatilhos'
};

exports.Prisma.AditivoScalarFieldEnum = {
  id: 'id',
  contratoId: 'contratoId',
  tipo: 'tipo',
  dataAssinatura: 'dataAssinatura',
  motivoAditivo: 'motivoAditivo',
  novoValor: 'novoValor',
  novaDataFim: 'novaDataFim',
  documentoUrl: 'documentoUrl',
  status: 'status'
};

exports.Prisma.DistratoScalarFieldEnum = {
  id: 'id',
  contratoId: 'contratoId',
  dataDistrato: 'dataDistrato',
  motivoDistrato: 'motivoDistrato',
  valorDevolucao: 'valorDevolucao',
  documentoUrl: 'documentoUrl'
};

exports.Prisma.QuitacaoScalarFieldEnum = {
  id: 'id',
  contratoId: 'contratoId',
  dataQuitacao: 'dataQuitacao',
  valorQuitacao: 'valorQuitacao',
  documentoUrl: 'documentoUrl'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  role: 'role',
  permissions: 'permissions',
  status: 'status',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ParcelaScalarFieldEnum = {
  id: 'id',
  contratoId: 'contratoId',
  numero: 'numero',
  valor: 'valor',
  dataVencimento: 'dataVencimento',
  status: 'status',
  dataPagamento: 'dataPagamento',
  valorPago: 'valorPago',
  formaPagamento: 'formaPagamento',
  observacoes: 'observacoes',
  dataCriacao: 'dataCriacao',
  boletoId: 'boletoId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  Cliente: 'Cliente',
  Endereco: 'Endereco',
  Contato: 'Contato',
  Documento: 'Documento',
  Lote: 'Lote',
  Contrato: 'Contrato',
  Boleto: 'Boleto',
  Reajuste: 'Reajuste',
  ParametrosReajuste: 'ParametrosReajuste',
  IndicesEconomicos: 'IndicesEconomicos',
  ClienteInadimplente: 'ClienteInadimplente',
  ParcelaInadimplente: 'ParcelaInadimplente',
  Interacao: 'Interacao',
  Comunicacao: 'Comunicacao',
  ModeloMensagem: 'ModeloMensagem',
  ConfiguracaoGatilhos: 'ConfiguracaoGatilhos',
  Aditivo: 'Aditivo',
  Distrato: 'Distrato',
  Quitacao: 'Quitacao',
  User: 'User',
  Parcela: 'Parcela'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
