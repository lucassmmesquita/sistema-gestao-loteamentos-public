
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type ClientePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Cliente"
  objects: {
    endereco: EnderecoPayload<ExtArgs> | null
    contatos: ContatoPayload<ExtArgs> | null
    documentos: DocumentoPayload<ExtArgs>[]
    contratos: ContratoPayload<ExtArgs>[]
    boletos: BoletoPayload<ExtArgs>[]
    interacoes: InteracaoPayload<ExtArgs>[]
    comunicacoes: ComunicacaoPayload<ExtArgs>[]
    clientesInadimplentes: ClienteInadimplentePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    nome: string
    nomeConjuge: string | null
    profissao: string | null
    cpfCnpj: string
    dataNascimento: Date | null
    dataCadastro: Date
  }, ExtArgs["result"]["cliente"]>
  composites: {}
}

/**
 * Model Cliente
 * 
 */
export type Cliente = runtime.Types.DefaultSelection<ClientePayload>
export type EnderecoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Endereco"
  objects: {
    cliente: ClientePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    clienteId: number
    cep: string
    logradouro: string
    numero: string
    complemento: string | null
    bairro: string
    cidade: string
    estado: string
  }, ExtArgs["result"]["endereco"]>
  composites: {}
}

/**
 * Model Endereco
 * 
 */
export type Endereco = runtime.Types.DefaultSelection<EnderecoPayload>
export type ContatoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Contato"
  objects: {
    cliente: ClientePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    clienteId: number
    telefones: string[]
    emails: string[]
  }, ExtArgs["result"]["contato"]>
  composites: {}
}

/**
 * Model Contato
 * 
 */
export type Contato = runtime.Types.DefaultSelection<ContatoPayload>
export type DocumentoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Documento"
  objects: {
    cliente: ClientePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    clienteId: number
    tipo: string
    nome: string
    arquivo: string
    dataUpload: Date
    s3Key: string | null
  }, ExtArgs["result"]["documento"]>
  composites: {}
}

/**
 * Model Documento
 * 
 */
export type Documento = runtime.Types.DefaultSelection<DocumentoPayload>
export type LotePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Lote"
  objects: {
    contratos: ContratoPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    numero: string
    quadra: string
    loteamento: string
    area: number
    valorBase: Prisma.Decimal
    status: string
    chave: string | null
  }, ExtArgs["result"]["lote"]>
  composites: {}
}

/**
 * Model Lote
 * 
 */
export type Lote = runtime.Types.DefaultSelection<LotePayload>
export type ContratoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Contrato"
  objects: {
    cliente: ClientePayload<ExtArgs>
    lote: LotePayload<ExtArgs>
    boletos: BoletoPayload<ExtArgs>[]
    reajustes: ReajustePayload<ExtArgs>[]
    aditivos: AditivoPayload<ExtArgs>[]
    distratos: DistratoPayload<ExtArgs>[]
    quitacoes: QuitacaoPayload<ExtArgs>[]
    parcelas: ParcelaPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    clienteId: number
    loteId: number
    chave: string | null
    numeroContrato: string | null
    dataEmissao: Date | null
    dataPrimeiraPrestacao: Date | null
    valorPrestacao: Prisma.Decimal | null
    dataInicio: Date
    dataFim: Date
    valorTotal: Prisma.Decimal
    valorEntrada: Prisma.Decimal
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status: string
    dataCriacao: Date
    parcelasPagas: number
    ultimoReajuste: Prisma.JsonValue | null
  }, ExtArgs["result"]["contrato"]>
  composites: {}
}

/**
 * Model Contrato
 * 
 */
export type Contrato = runtime.Types.DefaultSelection<ContratoPayload>
export type BoletoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Boleto"
  objects: {
    cliente: ClientePayload<ExtArgs>
    contrato: ContratoPayload<ExtArgs>
    parcela: ParcelaPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: number
    clienteId: number
    clienteNome: string
    contratoId: number
    valor: Prisma.Decimal
    dataVencimento: Date
    numeroParcela: number
    descricao: string
    nossoNumero: string
    linhaDigitavel: string
    codigoBarras: string
    pdfUrl: string
    dataGeracao: Date
    status: string
    dataPagamento: Date | null
    valorPago: Prisma.Decimal | null
    formaPagamento: string | null
    dataCancelamento: Date | null
    comprovante: string | null
    parcelaId: number | null
  }, ExtArgs["result"]["boleto"]>
  composites: {}
}

/**
 * Model Boleto
 * 
 */
export type Boleto = runtime.Types.DefaultSelection<BoletoPayload>
export type ReajustePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Reajuste"
  objects: {
    contrato: ContratoPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    contratoId: number
    parcelaReferencia: number
    valorOriginal: Prisma.Decimal
    valorReajustado: Prisma.Decimal
    indiceAplicado: Prisma.Decimal
    indiceBase: string
    percentualAdicional: Prisma.Decimal
    reajusteTotal: Prisma.Decimal
    dataReferencia: Date
    dataAplicacao: Date | null
    status: string
    aplicado: boolean
  }, ExtArgs["result"]["reajuste"]>
  composites: {}
}

/**
 * Model Reajuste
 * 
 */
export type Reajuste = runtime.Types.DefaultSelection<ReajustePayload>
export type ParametrosReajustePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ParametrosReajuste"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    indiceBase: string
    percentualAdicional: Prisma.Decimal
    intervaloParcelas: number
    alertaAntecipadoDias: number
  }, ExtArgs["result"]["parametrosReajuste"]>
  composites: {}
}

/**
 * Model ParametrosReajuste
 * 
 */
export type ParametrosReajuste = runtime.Types.DefaultSelection<ParametrosReajustePayload>
export type IndicesEconomicosPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "IndicesEconomicos"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    IGPM: Prisma.Decimal
    IPCA: Prisma.Decimal
    INPC: Prisma.Decimal
    data: Date
  }, ExtArgs["result"]["indicesEconomicos"]>
  composites: {}
}

/**
 * Model IndicesEconomicos
 * 
 */
export type IndicesEconomicos = runtime.Types.DefaultSelection<IndicesEconomicosPayload>
export type ClienteInadimplentePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ClienteInadimplente"
  objects: {
    cliente: ClientePayload<ExtArgs>
    parcelas: ParcelaInadimplentePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    clienteId: number
    contratoId: number
    valorEmAberto: Prisma.Decimal
    diasAtraso: number
    ultimaCobranca: Date | null
    status: string
  }, ExtArgs["result"]["clienteInadimplente"]>
  composites: {}
}

/**
 * Model ClienteInadimplente
 * 
 */
export type ClienteInadimplente = runtime.Types.DefaultSelection<ClienteInadimplentePayload>
export type ParcelaInadimplentePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ParcelaInadimplente"
  objects: {
    clienteInadimplente: ClienteInadimplentePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    clienteInadimplente_id: number
    numero: number
    dataVencimento: Date
    valor: Prisma.Decimal
    valorAtualizado: Prisma.Decimal
    status: string
  }, ExtArgs["result"]["parcelaInadimplente"]>
  composites: {}
}

/**
 * Model ParcelaInadimplente
 * 
 */
export type ParcelaInadimplente = runtime.Types.DefaultSelection<ParcelaInadimplentePayload>
export type InteracaoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Interacao"
  objects: {
    cliente: ClientePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    clienteId: number
    tipo: string
    data: Date
    observacao: string
    usuario: string
    parcelaId: string | null
  }, ExtArgs["result"]["interacao"]>
  composites: {}
}

/**
 * Model Interacao
 * 
 */
export type Interacao = runtime.Types.DefaultSelection<InteracaoPayload>
export type ComunicacaoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Comunicacao"
  objects: {
    cliente: ClientePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    clienteId: number
    tipo: string
    data: Date
    mensagem: string
    status: string
    parcelaInfo: Prisma.JsonValue | null
    anexos: Prisma.JsonValue | null
  }, ExtArgs["result"]["comunicacao"]>
  composites: {}
}

/**
 * Model Comunicacao
 * 
 */
export type Comunicacao = runtime.Types.DefaultSelection<ComunicacaoPayload>
export type ModeloMensagemPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ModeloMensagem"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: string
    nome: string
    tipo: string
    conteudo: string
  }, ExtArgs["result"]["modeloMensagem"]>
  composites: {}
}

/**
 * Model ModeloMensagem
 * 
 */
export type ModeloMensagem = runtime.Types.DefaultSelection<ModeloMensagemPayload>
export type ConfiguracaoGatilhosPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ConfiguracaoGatilhos"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    executarAutomaticamente: boolean
    horarioExecucao: string
    diasExecucao: string[]
    repetirCobrancas: boolean
    intervaloRepeticao: number
    limitarRepeticoes: boolean
    limiteRepeticoes: number
    gerarLog: boolean
    gatilhos: Prisma.JsonValue
  }, ExtArgs["result"]["configuracaoGatilhos"]>
  composites: {}
}

/**
 * Model ConfiguracaoGatilhos
 * 
 */
export type ConfiguracaoGatilhos = runtime.Types.DefaultSelection<ConfiguracaoGatilhosPayload>
export type AditivoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Aditivo"
  objects: {
    contrato: ContratoPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    contratoId: number
    tipo: string
    dataAssinatura: Date
    motivoAditivo: string
    novoValor: Prisma.Decimal | null
    novaDataFim: Date | null
    documentoUrl: string | null
    status: string
  }, ExtArgs["result"]["aditivo"]>
  composites: {}
}

/**
 * Model Aditivo
 * 
 */
export type Aditivo = runtime.Types.DefaultSelection<AditivoPayload>
export type DistratoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Distrato"
  objects: {
    contrato: ContratoPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    contratoId: number
    dataDistrato: Date
    motivoDistrato: string
    valorDevolucao: Prisma.Decimal | null
    documentoUrl: string | null
  }, ExtArgs["result"]["distrato"]>
  composites: {}
}

/**
 * Model Distrato
 * 
 */
export type Distrato = runtime.Types.DefaultSelection<DistratoPayload>
export type QuitacaoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Quitacao"
  objects: {
    contrato: ContratoPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    contratoId: number
    dataQuitacao: Date
    valorQuitacao: Prisma.Decimal
    documentoUrl: string | null
  }, ExtArgs["result"]["quitacao"]>
  composites: {}
}

/**
 * Model Quitacao
 * 
 */
export type Quitacao = runtime.Types.DefaultSelection<QuitacaoPayload>
export type UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "User"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    email: string
    password: string
    name: string
    role: string
    permissions: Prisma.JsonValue | null
    status: boolean
    lastLogin: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["user"]>
  composites: {}
}

/**
 * Model User
 * 
 */
export type User = runtime.Types.DefaultSelection<UserPayload>
export type ParcelaPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Parcela"
  objects: {
    contrato: ContratoPayload<ExtArgs>
    boleto: BoletoPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: number
    contratoId: number
    numero: number
    valor: Prisma.Decimal
    dataVencimento: Date
    status: string
    dataPagamento: Date | null
    valorPago: Prisma.Decimal | null
    formaPagamento: string | null
    observacoes: string | null
    dataCriacao: Date
    boletoId: number | null
  }, ExtArgs["result"]["parcela"]>
  composites: {}
}

/**
 * Model Parcela
 * 
 */
export type Parcela = runtime.Types.DefaultSelection<ParcelaPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Clientes
 * const clientes = await prisma.cliente.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Clientes
   * const clientes = await prisma.cliente.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.cliente`: Exposes CRUD operations for the **Cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.ClienteDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.endereco`: Exposes CRUD operations for the **Endereco** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Enderecos
    * const enderecos = await prisma.endereco.findMany()
    * ```
    */
  get endereco(): Prisma.EnderecoDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.contato`: Exposes CRUD operations for the **Contato** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contatoes
    * const contatoes = await prisma.contato.findMany()
    * ```
    */
  get contato(): Prisma.ContatoDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.documento`: Exposes CRUD operations for the **Documento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documentos
    * const documentos = await prisma.documento.findMany()
    * ```
    */
  get documento(): Prisma.DocumentoDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.lote`: Exposes CRUD operations for the **Lote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lotes
    * const lotes = await prisma.lote.findMany()
    * ```
    */
  get lote(): Prisma.LoteDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.contrato`: Exposes CRUD operations for the **Contrato** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contratoes
    * const contratoes = await prisma.contrato.findMany()
    * ```
    */
  get contrato(): Prisma.ContratoDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.boleto`: Exposes CRUD operations for the **Boleto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Boletos
    * const boletos = await prisma.boleto.findMany()
    * ```
    */
  get boleto(): Prisma.BoletoDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.reajuste`: Exposes CRUD operations for the **Reajuste** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reajustes
    * const reajustes = await prisma.reajuste.findMany()
    * ```
    */
  get reajuste(): Prisma.ReajusteDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.parametrosReajuste`: Exposes CRUD operations for the **ParametrosReajuste** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ParametrosReajustes
    * const parametrosReajustes = await prisma.parametrosReajuste.findMany()
    * ```
    */
  get parametrosReajuste(): Prisma.ParametrosReajusteDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.indicesEconomicos`: Exposes CRUD operations for the **IndicesEconomicos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IndicesEconomicos
    * const indicesEconomicos = await prisma.indicesEconomicos.findMany()
    * ```
    */
  get indicesEconomicos(): Prisma.IndicesEconomicosDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.clienteInadimplente`: Exposes CRUD operations for the **ClienteInadimplente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClienteInadimplentes
    * const clienteInadimplentes = await prisma.clienteInadimplente.findMany()
    * ```
    */
  get clienteInadimplente(): Prisma.ClienteInadimplenteDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.parcelaInadimplente`: Exposes CRUD operations for the **ParcelaInadimplente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ParcelaInadimplentes
    * const parcelaInadimplentes = await prisma.parcelaInadimplente.findMany()
    * ```
    */
  get parcelaInadimplente(): Prisma.ParcelaInadimplenteDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.interacao`: Exposes CRUD operations for the **Interacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Interacaos
    * const interacaos = await prisma.interacao.findMany()
    * ```
    */
  get interacao(): Prisma.InteracaoDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.comunicacao`: Exposes CRUD operations for the **Comunicacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comunicacaos
    * const comunicacaos = await prisma.comunicacao.findMany()
    * ```
    */
  get comunicacao(): Prisma.ComunicacaoDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.modeloMensagem`: Exposes CRUD operations for the **ModeloMensagem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ModeloMensagems
    * const modeloMensagems = await prisma.modeloMensagem.findMany()
    * ```
    */
  get modeloMensagem(): Prisma.ModeloMensagemDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.configuracaoGatilhos`: Exposes CRUD operations for the **ConfiguracaoGatilhos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConfiguracaoGatilhos
    * const configuracaoGatilhos = await prisma.configuracaoGatilhos.findMany()
    * ```
    */
  get configuracaoGatilhos(): Prisma.ConfiguracaoGatilhosDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.aditivo`: Exposes CRUD operations for the **Aditivo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Aditivos
    * const aditivos = await prisma.aditivo.findMany()
    * ```
    */
  get aditivo(): Prisma.AditivoDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.distrato`: Exposes CRUD operations for the **Distrato** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Distratoes
    * const distratoes = await prisma.distrato.findMany()
    * ```
    */
  get distrato(): Prisma.DistratoDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.quitacao`: Exposes CRUD operations for the **Quitacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Quitacaos
    * const quitacaos = await prisma.quitacao.findMany()
    * ```
    */
  get quitacao(): Prisma.QuitacaoDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.parcela`: Exposes CRUD operations for the **Parcela** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Parcelas
    * const parcelas = await prisma.parcela.findMany()
    * ```
    */
  get parcela(): Prisma.ParcelaDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Cliente: 'Cliente',
    Endereco: 'Endereco',
    Contato: 'Contato',
    Documento: 'Documento',
    Lote: 'Lote',
    Contrato: 'Contrato',
    Boleto: 'Boleto',
    Reajuste: 'Reajuste',
    ParametrosReajuste: 'ParametrosReajuste',
    IndicesEconomicos: 'IndicesEconomicos',
    ClienteInadimplente: 'ClienteInadimplente',
    ParcelaInadimplente: 'ParcelaInadimplente',
    Interacao: 'Interacao',
    Comunicacao: 'Comunicacao',
    ModeloMensagem: 'ModeloMensagem',
    ConfiguracaoGatilhos: 'ConfiguracaoGatilhos',
    Aditivo: 'Aditivo',
    Distrato: 'Distrato',
    Quitacao: 'Quitacao',
    User: 'User',
    Parcela: 'Parcela'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'cliente' | 'endereco' | 'contato' | 'documento' | 'lote' | 'contrato' | 'boleto' | 'reajuste' | 'parametrosReajuste' | 'indicesEconomicos' | 'clienteInadimplente' | 'parcelaInadimplente' | 'interacao' | 'comunicacao' | 'modeloMensagem' | 'configuracaoGatilhos' | 'aditivo' | 'distrato' | 'quitacao' | 'user' | 'parcela'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Cliente: {
        payload: ClientePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ClienteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientePayload>
          }
          findFirst: {
            args: Prisma.ClienteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientePayload>
          }
          findMany: {
            args: Prisma.ClienteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientePayload>[]
          }
          create: {
            args: Prisma.ClienteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientePayload>
          }
          createMany: {
            args: Prisma.ClienteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ClienteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientePayload>
          }
          update: {
            args: Prisma.ClienteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientePayload>
          }
          deleteMany: {
            args: Prisma.ClienteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ClienteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientePayload>
          }
          aggregate: {
            args: Prisma.ClienteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCliente>
          }
          groupBy: {
            args: Prisma.ClienteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteCountArgs<ExtArgs>,
            result: $Utils.Optional<ClienteCountAggregateOutputType> | number
          }
        }
      }
      Endereco: {
        payload: EnderecoPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.EnderecoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EnderecoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EnderecoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EnderecoPayload>
          }
          findFirst: {
            args: Prisma.EnderecoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EnderecoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EnderecoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EnderecoPayload>
          }
          findMany: {
            args: Prisma.EnderecoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EnderecoPayload>[]
          }
          create: {
            args: Prisma.EnderecoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EnderecoPayload>
          }
          createMany: {
            args: Prisma.EnderecoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EnderecoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EnderecoPayload>
          }
          update: {
            args: Prisma.EnderecoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EnderecoPayload>
          }
          deleteMany: {
            args: Prisma.EnderecoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EnderecoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EnderecoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<EnderecoPayload>
          }
          aggregate: {
            args: Prisma.EnderecoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEndereco>
          }
          groupBy: {
            args: Prisma.EnderecoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EnderecoGroupByOutputType>[]
          }
          count: {
            args: Prisma.EnderecoCountArgs<ExtArgs>,
            result: $Utils.Optional<EnderecoCountAggregateOutputType> | number
          }
        }
      }
      Contato: {
        payload: ContatoPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ContatoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContatoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContatoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContatoPayload>
          }
          findFirst: {
            args: Prisma.ContatoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContatoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContatoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContatoPayload>
          }
          findMany: {
            args: Prisma.ContatoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContatoPayload>[]
          }
          create: {
            args: Prisma.ContatoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContatoPayload>
          }
          createMany: {
            args: Prisma.ContatoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ContatoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContatoPayload>
          }
          update: {
            args: Prisma.ContatoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContatoPayload>
          }
          deleteMany: {
            args: Prisma.ContatoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ContatoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ContatoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContatoPayload>
          }
          aggregate: {
            args: Prisma.ContatoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateContato>
          }
          groupBy: {
            args: Prisma.ContatoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ContatoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContatoCountArgs<ExtArgs>,
            result: $Utils.Optional<ContatoCountAggregateOutputType> | number
          }
        }
      }
      Documento: {
        payload: DocumentoPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.DocumentoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DocumentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DocumentoPayload>
          }
          findFirst: {
            args: Prisma.DocumentoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DocumentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DocumentoPayload>
          }
          findMany: {
            args: Prisma.DocumentoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DocumentoPayload>[]
          }
          create: {
            args: Prisma.DocumentoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DocumentoPayload>
          }
          createMany: {
            args: Prisma.DocumentoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DocumentoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DocumentoPayload>
          }
          update: {
            args: Prisma.DocumentoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DocumentoPayload>
          }
          deleteMany: {
            args: Prisma.DocumentoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DocumentoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DocumentoPayload>
          }
          aggregate: {
            args: Prisma.DocumentoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDocumento>
          }
          groupBy: {
            args: Prisma.DocumentoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DocumentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentoCountArgs<ExtArgs>,
            result: $Utils.Optional<DocumentoCountAggregateOutputType> | number
          }
        }
      }
      Lote: {
        payload: LotePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.LoteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LoteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LotePayload>
          }
          findFirst: {
            args: Prisma.LoteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LoteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LotePayload>
          }
          findMany: {
            args: Prisma.LoteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LotePayload>[]
          }
          create: {
            args: Prisma.LoteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LotePayload>
          }
          createMany: {
            args: Prisma.LoteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LoteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LotePayload>
          }
          update: {
            args: Prisma.LoteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LotePayload>
          }
          deleteMany: {
            args: Prisma.LoteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LoteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LoteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LotePayload>
          }
          aggregate: {
            args: Prisma.LoteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLote>
          }
          groupBy: {
            args: Prisma.LoteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.LoteCountArgs<ExtArgs>,
            result: $Utils.Optional<LoteCountAggregateOutputType> | number
          }
        }
      }
      Contrato: {
        payload: ContratoPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ContratoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContratoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContratoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContratoPayload>
          }
          findFirst: {
            args: Prisma.ContratoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContratoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContratoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContratoPayload>
          }
          findMany: {
            args: Prisma.ContratoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContratoPayload>[]
          }
          create: {
            args: Prisma.ContratoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContratoPayload>
          }
          createMany: {
            args: Prisma.ContratoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ContratoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContratoPayload>
          }
          update: {
            args: Prisma.ContratoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContratoPayload>
          }
          deleteMany: {
            args: Prisma.ContratoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ContratoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ContratoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContratoPayload>
          }
          aggregate: {
            args: Prisma.ContratoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateContrato>
          }
          groupBy: {
            args: Prisma.ContratoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ContratoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContratoCountArgs<ExtArgs>,
            result: $Utils.Optional<ContratoCountAggregateOutputType> | number
          }
        }
      }
      Boleto: {
        payload: BoletoPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.BoletoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BoletoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BoletoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BoletoPayload>
          }
          findFirst: {
            args: Prisma.BoletoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BoletoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BoletoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BoletoPayload>
          }
          findMany: {
            args: Prisma.BoletoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BoletoPayload>[]
          }
          create: {
            args: Prisma.BoletoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BoletoPayload>
          }
          createMany: {
            args: Prisma.BoletoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BoletoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BoletoPayload>
          }
          update: {
            args: Prisma.BoletoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BoletoPayload>
          }
          deleteMany: {
            args: Prisma.BoletoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BoletoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BoletoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BoletoPayload>
          }
          aggregate: {
            args: Prisma.BoletoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBoleto>
          }
          groupBy: {
            args: Prisma.BoletoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BoletoGroupByOutputType>[]
          }
          count: {
            args: Prisma.BoletoCountArgs<ExtArgs>,
            result: $Utils.Optional<BoletoCountAggregateOutputType> | number
          }
        }
      }
      Reajuste: {
        payload: ReajustePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ReajusteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReajustePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReajusteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReajustePayload>
          }
          findFirst: {
            args: Prisma.ReajusteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReajustePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReajusteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReajustePayload>
          }
          findMany: {
            args: Prisma.ReajusteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReajustePayload>[]
          }
          create: {
            args: Prisma.ReajusteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReajustePayload>
          }
          createMany: {
            args: Prisma.ReajusteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReajusteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReajustePayload>
          }
          update: {
            args: Prisma.ReajusteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReajustePayload>
          }
          deleteMany: {
            args: Prisma.ReajusteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReajusteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReajusteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ReajustePayload>
          }
          aggregate: {
            args: Prisma.ReajusteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReajuste>
          }
          groupBy: {
            args: Prisma.ReajusteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReajusteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReajusteCountArgs<ExtArgs>,
            result: $Utils.Optional<ReajusteCountAggregateOutputType> | number
          }
        }
      }
      ParametrosReajuste: {
        payload: ParametrosReajustePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ParametrosReajusteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParametrosReajustePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParametrosReajusteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParametrosReajustePayload>
          }
          findFirst: {
            args: Prisma.ParametrosReajusteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParametrosReajustePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParametrosReajusteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParametrosReajustePayload>
          }
          findMany: {
            args: Prisma.ParametrosReajusteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParametrosReajustePayload>[]
          }
          create: {
            args: Prisma.ParametrosReajusteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParametrosReajustePayload>
          }
          createMany: {
            args: Prisma.ParametrosReajusteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ParametrosReajusteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParametrosReajustePayload>
          }
          update: {
            args: Prisma.ParametrosReajusteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParametrosReajustePayload>
          }
          deleteMany: {
            args: Prisma.ParametrosReajusteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ParametrosReajusteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ParametrosReajusteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParametrosReajustePayload>
          }
          aggregate: {
            args: Prisma.ParametrosReajusteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateParametrosReajuste>
          }
          groupBy: {
            args: Prisma.ParametrosReajusteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ParametrosReajusteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParametrosReajusteCountArgs<ExtArgs>,
            result: $Utils.Optional<ParametrosReajusteCountAggregateOutputType> | number
          }
        }
      }
      IndicesEconomicos: {
        payload: IndicesEconomicosPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.IndicesEconomicosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<IndicesEconomicosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IndicesEconomicosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<IndicesEconomicosPayload>
          }
          findFirst: {
            args: Prisma.IndicesEconomicosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<IndicesEconomicosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IndicesEconomicosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<IndicesEconomicosPayload>
          }
          findMany: {
            args: Prisma.IndicesEconomicosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<IndicesEconomicosPayload>[]
          }
          create: {
            args: Prisma.IndicesEconomicosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<IndicesEconomicosPayload>
          }
          createMany: {
            args: Prisma.IndicesEconomicosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.IndicesEconomicosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<IndicesEconomicosPayload>
          }
          update: {
            args: Prisma.IndicesEconomicosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<IndicesEconomicosPayload>
          }
          deleteMany: {
            args: Prisma.IndicesEconomicosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.IndicesEconomicosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.IndicesEconomicosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<IndicesEconomicosPayload>
          }
          aggregate: {
            args: Prisma.IndicesEconomicosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateIndicesEconomicos>
          }
          groupBy: {
            args: Prisma.IndicesEconomicosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<IndicesEconomicosGroupByOutputType>[]
          }
          count: {
            args: Prisma.IndicesEconomicosCountArgs<ExtArgs>,
            result: $Utils.Optional<IndicesEconomicosCountAggregateOutputType> | number
          }
        }
      }
      ClienteInadimplente: {
        payload: ClienteInadimplentePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ClienteInadimplenteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClienteInadimplentePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteInadimplenteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClienteInadimplentePayload>
          }
          findFirst: {
            args: Prisma.ClienteInadimplenteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClienteInadimplentePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteInadimplenteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClienteInadimplentePayload>
          }
          findMany: {
            args: Prisma.ClienteInadimplenteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClienteInadimplentePayload>[]
          }
          create: {
            args: Prisma.ClienteInadimplenteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClienteInadimplentePayload>
          }
          createMany: {
            args: Prisma.ClienteInadimplenteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ClienteInadimplenteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClienteInadimplentePayload>
          }
          update: {
            args: Prisma.ClienteInadimplenteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClienteInadimplentePayload>
          }
          deleteMany: {
            args: Prisma.ClienteInadimplenteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteInadimplenteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ClienteInadimplenteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClienteInadimplentePayload>
          }
          aggregate: {
            args: Prisma.ClienteInadimplenteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateClienteInadimplente>
          }
          groupBy: {
            args: Prisma.ClienteInadimplenteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClienteInadimplenteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteInadimplenteCountArgs<ExtArgs>,
            result: $Utils.Optional<ClienteInadimplenteCountAggregateOutputType> | number
          }
        }
      }
      ParcelaInadimplente: {
        payload: ParcelaInadimplentePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ParcelaInadimplenteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParcelaInadimplentePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParcelaInadimplenteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParcelaInadimplentePayload>
          }
          findFirst: {
            args: Prisma.ParcelaInadimplenteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParcelaInadimplentePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParcelaInadimplenteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParcelaInadimplentePayload>
          }
          findMany: {
            args: Prisma.ParcelaInadimplenteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParcelaInadimplentePayload>[]
          }
          create: {
            args: Prisma.ParcelaInadimplenteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParcelaInadimplentePayload>
          }
          createMany: {
            args: Prisma.ParcelaInadimplenteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ParcelaInadimplenteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParcelaInadimplentePayload>
          }
          update: {
            args: Prisma.ParcelaInadimplenteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParcelaInadimplentePayload>
          }
          deleteMany: {
            args: Prisma.ParcelaInadimplenteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ParcelaInadimplenteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ParcelaInadimplenteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParcelaInadimplentePayload>
          }
          aggregate: {
            args: Prisma.ParcelaInadimplenteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateParcelaInadimplente>
          }
          groupBy: {
            args: Prisma.ParcelaInadimplenteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ParcelaInadimplenteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParcelaInadimplenteCountArgs<ExtArgs>,
            result: $Utils.Optional<ParcelaInadimplenteCountAggregateOutputType> | number
          }
        }
      }
      Interacao: {
        payload: InteracaoPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.InteracaoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<InteracaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InteracaoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<InteracaoPayload>
          }
          findFirst: {
            args: Prisma.InteracaoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<InteracaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InteracaoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<InteracaoPayload>
          }
          findMany: {
            args: Prisma.InteracaoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<InteracaoPayload>[]
          }
          create: {
            args: Prisma.InteracaoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<InteracaoPayload>
          }
          createMany: {
            args: Prisma.InteracaoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.InteracaoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<InteracaoPayload>
          }
          update: {
            args: Prisma.InteracaoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<InteracaoPayload>
          }
          deleteMany: {
            args: Prisma.InteracaoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.InteracaoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.InteracaoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<InteracaoPayload>
          }
          aggregate: {
            args: Prisma.InteracaoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInteracao>
          }
          groupBy: {
            args: Prisma.InteracaoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InteracaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.InteracaoCountArgs<ExtArgs>,
            result: $Utils.Optional<InteracaoCountAggregateOutputType> | number
          }
        }
      }
      Comunicacao: {
        payload: ComunicacaoPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ComunicacaoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ComunicacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComunicacaoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ComunicacaoPayload>
          }
          findFirst: {
            args: Prisma.ComunicacaoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ComunicacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComunicacaoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ComunicacaoPayload>
          }
          findMany: {
            args: Prisma.ComunicacaoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ComunicacaoPayload>[]
          }
          create: {
            args: Prisma.ComunicacaoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ComunicacaoPayload>
          }
          createMany: {
            args: Prisma.ComunicacaoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ComunicacaoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ComunicacaoPayload>
          }
          update: {
            args: Prisma.ComunicacaoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ComunicacaoPayload>
          }
          deleteMany: {
            args: Prisma.ComunicacaoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ComunicacaoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ComunicacaoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ComunicacaoPayload>
          }
          aggregate: {
            args: Prisma.ComunicacaoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateComunicacao>
          }
          groupBy: {
            args: Prisma.ComunicacaoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ComunicacaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ComunicacaoCountArgs<ExtArgs>,
            result: $Utils.Optional<ComunicacaoCountAggregateOutputType> | number
          }
        }
      }
      ModeloMensagem: {
        payload: ModeloMensagemPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ModeloMensagemFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ModeloMensagemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ModeloMensagemFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ModeloMensagemPayload>
          }
          findFirst: {
            args: Prisma.ModeloMensagemFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ModeloMensagemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ModeloMensagemFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ModeloMensagemPayload>
          }
          findMany: {
            args: Prisma.ModeloMensagemFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ModeloMensagemPayload>[]
          }
          create: {
            args: Prisma.ModeloMensagemCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ModeloMensagemPayload>
          }
          createMany: {
            args: Prisma.ModeloMensagemCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ModeloMensagemDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ModeloMensagemPayload>
          }
          update: {
            args: Prisma.ModeloMensagemUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ModeloMensagemPayload>
          }
          deleteMany: {
            args: Prisma.ModeloMensagemDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ModeloMensagemUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ModeloMensagemUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ModeloMensagemPayload>
          }
          aggregate: {
            args: Prisma.ModeloMensagemAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateModeloMensagem>
          }
          groupBy: {
            args: Prisma.ModeloMensagemGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ModeloMensagemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ModeloMensagemCountArgs<ExtArgs>,
            result: $Utils.Optional<ModeloMensagemCountAggregateOutputType> | number
          }
        }
      }
      ConfiguracaoGatilhos: {
        payload: ConfiguracaoGatilhosPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ConfiguracaoGatilhosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ConfiguracaoGatilhosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConfiguracaoGatilhosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ConfiguracaoGatilhosPayload>
          }
          findFirst: {
            args: Prisma.ConfiguracaoGatilhosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ConfiguracaoGatilhosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConfiguracaoGatilhosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ConfiguracaoGatilhosPayload>
          }
          findMany: {
            args: Prisma.ConfiguracaoGatilhosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ConfiguracaoGatilhosPayload>[]
          }
          create: {
            args: Prisma.ConfiguracaoGatilhosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ConfiguracaoGatilhosPayload>
          }
          createMany: {
            args: Prisma.ConfiguracaoGatilhosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ConfiguracaoGatilhosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ConfiguracaoGatilhosPayload>
          }
          update: {
            args: Prisma.ConfiguracaoGatilhosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ConfiguracaoGatilhosPayload>
          }
          deleteMany: {
            args: Prisma.ConfiguracaoGatilhosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ConfiguracaoGatilhosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ConfiguracaoGatilhosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ConfiguracaoGatilhosPayload>
          }
          aggregate: {
            args: Prisma.ConfiguracaoGatilhosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateConfiguracaoGatilhos>
          }
          groupBy: {
            args: Prisma.ConfiguracaoGatilhosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ConfiguracaoGatilhosGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConfiguracaoGatilhosCountArgs<ExtArgs>,
            result: $Utils.Optional<ConfiguracaoGatilhosCountAggregateOutputType> | number
          }
        }
      }
      Aditivo: {
        payload: AditivoPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.AditivoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AditivoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AditivoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AditivoPayload>
          }
          findFirst: {
            args: Prisma.AditivoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AditivoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AditivoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AditivoPayload>
          }
          findMany: {
            args: Prisma.AditivoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AditivoPayload>[]
          }
          create: {
            args: Prisma.AditivoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AditivoPayload>
          }
          createMany: {
            args: Prisma.AditivoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AditivoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AditivoPayload>
          }
          update: {
            args: Prisma.AditivoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AditivoPayload>
          }
          deleteMany: {
            args: Prisma.AditivoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AditivoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AditivoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AditivoPayload>
          }
          aggregate: {
            args: Prisma.AditivoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAditivo>
          }
          groupBy: {
            args: Prisma.AditivoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AditivoGroupByOutputType>[]
          }
          count: {
            args: Prisma.AditivoCountArgs<ExtArgs>,
            result: $Utils.Optional<AditivoCountAggregateOutputType> | number
          }
        }
      }
      Distrato: {
        payload: DistratoPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.DistratoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DistratoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DistratoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DistratoPayload>
          }
          findFirst: {
            args: Prisma.DistratoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DistratoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DistratoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DistratoPayload>
          }
          findMany: {
            args: Prisma.DistratoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DistratoPayload>[]
          }
          create: {
            args: Prisma.DistratoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DistratoPayload>
          }
          createMany: {
            args: Prisma.DistratoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DistratoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DistratoPayload>
          }
          update: {
            args: Prisma.DistratoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DistratoPayload>
          }
          deleteMany: {
            args: Prisma.DistratoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DistratoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DistratoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DistratoPayload>
          }
          aggregate: {
            args: Prisma.DistratoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDistrato>
          }
          groupBy: {
            args: Prisma.DistratoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DistratoGroupByOutputType>[]
          }
          count: {
            args: Prisma.DistratoCountArgs<ExtArgs>,
            result: $Utils.Optional<DistratoCountAggregateOutputType> | number
          }
        }
      }
      Quitacao: {
        payload: QuitacaoPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.QuitacaoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuitacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuitacaoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuitacaoPayload>
          }
          findFirst: {
            args: Prisma.QuitacaoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuitacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuitacaoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuitacaoPayload>
          }
          findMany: {
            args: Prisma.QuitacaoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuitacaoPayload>[]
          }
          create: {
            args: Prisma.QuitacaoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuitacaoPayload>
          }
          createMany: {
            args: Prisma.QuitacaoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.QuitacaoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuitacaoPayload>
          }
          update: {
            args: Prisma.QuitacaoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuitacaoPayload>
          }
          deleteMany: {
            args: Prisma.QuitacaoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.QuitacaoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.QuitacaoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<QuitacaoPayload>
          }
          aggregate: {
            args: Prisma.QuitacaoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateQuitacao>
          }
          groupBy: {
            args: Prisma.QuitacaoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<QuitacaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuitacaoCountArgs<ExtArgs>,
            result: $Utils.Optional<QuitacaoCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: UserPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Parcela: {
        payload: ParcelaPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ParcelaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParcelaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParcelaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParcelaPayload>
          }
          findFirst: {
            args: Prisma.ParcelaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParcelaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParcelaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParcelaPayload>
          }
          findMany: {
            args: Prisma.ParcelaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParcelaPayload>[]
          }
          create: {
            args: Prisma.ParcelaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParcelaPayload>
          }
          createMany: {
            args: Prisma.ParcelaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ParcelaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParcelaPayload>
          }
          update: {
            args: Prisma.ParcelaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParcelaPayload>
          }
          deleteMany: {
            args: Prisma.ParcelaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ParcelaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ParcelaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ParcelaPayload>
          }
          aggregate: {
            args: Prisma.ParcelaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateParcela>
          }
          groupBy: {
            args: Prisma.ParcelaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ParcelaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParcelaCountArgs<ExtArgs>,
            result: $Utils.Optional<ParcelaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClienteCountOutputType
   */


  export type ClienteCountOutputType = {
    documentos: number
    contratos: number
    boletos: number
    interacoes: number
    comunicacoes: number
    clientesInadimplentes: number
  }

  export type ClienteCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    documentos?: boolean | ClienteCountOutputTypeCountDocumentosArgs
    contratos?: boolean | ClienteCountOutputTypeCountContratosArgs
    boletos?: boolean | ClienteCountOutputTypeCountBoletosArgs
    interacoes?: boolean | ClienteCountOutputTypeCountInteracoesArgs
    comunicacoes?: boolean | ClienteCountOutputTypeCountComunicacoesArgs
    clientesInadimplentes?: boolean | ClienteCountOutputTypeCountClientesInadimplentesArgs
  }

  // Custom InputTypes

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteCountOutputType
     */
    select?: ClienteCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountDocumentosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DocumentoWhereInput
  }


  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountContratosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ContratoWhereInput
  }


  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountBoletosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: BoletoWhereInput
  }


  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountInteracoesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: InteracaoWhereInput
  }


  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountComunicacoesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ComunicacaoWhereInput
  }


  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountClientesInadimplentesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ClienteInadimplenteWhereInput
  }



  /**
   * Count Type LoteCountOutputType
   */


  export type LoteCountOutputType = {
    contratos: number
  }

  export type LoteCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    contratos?: boolean | LoteCountOutputTypeCountContratosArgs
  }

  // Custom InputTypes

  /**
   * LoteCountOutputType without action
   */
  export type LoteCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoteCountOutputType
     */
    select?: LoteCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * LoteCountOutputType without action
   */
  export type LoteCountOutputTypeCountContratosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ContratoWhereInput
  }



  /**
   * Count Type ContratoCountOutputType
   */


  export type ContratoCountOutputType = {
    boletos: number
    reajustes: number
    aditivos: number
    distratos: number
    quitacoes: number
    parcelas: number
  }

  export type ContratoCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    boletos?: boolean | ContratoCountOutputTypeCountBoletosArgs
    reajustes?: boolean | ContratoCountOutputTypeCountReajustesArgs
    aditivos?: boolean | ContratoCountOutputTypeCountAditivosArgs
    distratos?: boolean | ContratoCountOutputTypeCountDistratosArgs
    quitacoes?: boolean | ContratoCountOutputTypeCountQuitacoesArgs
    parcelas?: boolean | ContratoCountOutputTypeCountParcelasArgs
  }

  // Custom InputTypes

  /**
   * ContratoCountOutputType without action
   */
  export type ContratoCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContratoCountOutputType
     */
    select?: ContratoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ContratoCountOutputType without action
   */
  export type ContratoCountOutputTypeCountBoletosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: BoletoWhereInput
  }


  /**
   * ContratoCountOutputType without action
   */
  export type ContratoCountOutputTypeCountReajustesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ReajusteWhereInput
  }


  /**
   * ContratoCountOutputType without action
   */
  export type ContratoCountOutputTypeCountAditivosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AditivoWhereInput
  }


  /**
   * ContratoCountOutputType without action
   */
  export type ContratoCountOutputTypeCountDistratosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DistratoWhereInput
  }


  /**
   * ContratoCountOutputType without action
   */
  export type ContratoCountOutputTypeCountQuitacoesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: QuitacaoWhereInput
  }


  /**
   * ContratoCountOutputType without action
   */
  export type ContratoCountOutputTypeCountParcelasArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ParcelaWhereInput
  }



  /**
   * Count Type ClienteInadimplenteCountOutputType
   */


  export type ClienteInadimplenteCountOutputType = {
    parcelas: number
  }

  export type ClienteInadimplenteCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    parcelas?: boolean | ClienteInadimplenteCountOutputTypeCountParcelasArgs
  }

  // Custom InputTypes

  /**
   * ClienteInadimplenteCountOutputType without action
   */
  export type ClienteInadimplenteCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInadimplenteCountOutputType
     */
    select?: ClienteInadimplenteCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ClienteInadimplenteCountOutputType without action
   */
  export type ClienteInadimplenteCountOutputTypeCountParcelasArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ParcelaInadimplenteWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Cliente
   */


  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    id: number | null
  }

  export type ClienteSumAggregateOutputType = {
    id: number | null
  }

  export type ClienteMinAggregateOutputType = {
    id: number | null
    nome: string | null
    nomeConjuge: string | null
    profissao: string | null
    cpfCnpj: string | null
    dataNascimento: Date | null
    dataCadastro: Date | null
  }

  export type ClienteMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    nomeConjuge: string | null
    profissao: string | null
    cpfCnpj: string | null
    dataNascimento: Date | null
    dataCadastro: Date | null
  }

  export type ClienteCountAggregateOutputType = {
    id: number
    nome: number
    nomeConjuge: number
    profissao: number
    cpfCnpj: number
    dataNascimento: number
    dataCadastro: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    id?: true
  }

  export type ClienteSumAggregateInputType = {
    id?: true
  }

  export type ClienteMinAggregateInputType = {
    id?: true
    nome?: true
    nomeConjuge?: true
    profissao?: true
    cpfCnpj?: true
    dataNascimento?: true
    dataCadastro?: true
  }

  export type ClienteMaxAggregateInputType = {
    id?: true
    nome?: true
    nomeConjuge?: true
    profissao?: true
    cpfCnpj?: true
    dataNascimento?: true
    dataCadastro?: true
  }

  export type ClienteCountAggregateInputType = {
    id?: true
    nome?: true
    nomeConjuge?: true
    profissao?: true
    cpfCnpj?: true
    dataNascimento?: true
    dataCadastro?: true
    _all?: true
  }

  export type ClienteAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cliente to aggregate.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: Enumerable<ClienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
    orderBy?: Enumerable<ClienteOrderByWithAggregationInput>
    by: ClienteScalarFieldEnum[]
    having?: ClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }


  export type ClienteGroupByOutputType = {
    id: number
    nome: string
    nomeConjuge: string | null
    profissao: string | null
    cpfCnpj: string
    dataNascimento: Date | null
    dataCadastro: Date
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type ClienteSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    nomeConjuge?: boolean
    profissao?: boolean
    cpfCnpj?: boolean
    dataNascimento?: boolean
    dataCadastro?: boolean
    endereco?: boolean | EnderecoArgs<ExtArgs>
    contatos?: boolean | ContatoArgs<ExtArgs>
    documentos?: boolean | Cliente$documentosArgs<ExtArgs>
    contratos?: boolean | Cliente$contratosArgs<ExtArgs>
    boletos?: boolean | Cliente$boletosArgs<ExtArgs>
    interacoes?: boolean | Cliente$interacoesArgs<ExtArgs>
    comunicacoes?: boolean | Cliente$comunicacoesArgs<ExtArgs>
    clientesInadimplentes?: boolean | Cliente$clientesInadimplentesArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["cliente"]>

  export type ClienteSelectScalar = {
    id?: boolean
    nome?: boolean
    nomeConjuge?: boolean
    profissao?: boolean
    cpfCnpj?: boolean
    dataNascimento?: boolean
    dataCadastro?: boolean
  }

  export type ClienteInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    endereco?: boolean | EnderecoArgs<ExtArgs>
    contatos?: boolean | ContatoArgs<ExtArgs>
    documentos?: boolean | Cliente$documentosArgs<ExtArgs>
    contratos?: boolean | Cliente$contratosArgs<ExtArgs>
    boletos?: boolean | Cliente$boletosArgs<ExtArgs>
    interacoes?: boolean | Cliente$interacoesArgs<ExtArgs>
    comunicacoes?: boolean | Cliente$comunicacoesArgs<ExtArgs>
    clientesInadimplentes?: boolean | Cliente$clientesInadimplentesArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeArgs<ExtArgs>
  }


  type ClienteGetPayload<S extends boolean | null | undefined | ClienteArgs> = $Types.GetResult<ClientePayload, S>

  type ClienteCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ClienteFindManyArgs, 'select' | 'include'> & {
      select?: ClienteCountAggregateInputType | true
    }

  export interface ClienteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cliente'], meta: { name: 'Cliente' } }
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {ClienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClienteFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClienteFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Cliente'> extends True ? Prisma__ClienteClient<$Types.GetResult<ClientePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ClienteClient<$Types.GetResult<ClientePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Cliente that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClienteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Types.GetResult<ClientePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClienteFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClienteFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Cliente'> extends True ? Prisma__ClienteClient<$Types.GetResult<ClientePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ClienteClient<$Types.GetResult<ClientePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Cliente that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClienteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Types.GetResult<ClientePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteWithIdOnly = await prisma.cliente.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClienteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ClientePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Cliente.
     * @param {ClienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
    **/
    create<T extends ClienteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteCreateArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Types.GetResult<ClientePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Clientes.
     *     @param {ClienteCreateManyArgs} args - Arguments to create many Clientes.
     *     @example
     *     // Create many Clientes
     *     const cliente = await prisma.cliente.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClienteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cliente.
     * @param {ClienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
    **/
    delete<T extends ClienteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteDeleteArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Types.GetResult<ClientePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Cliente.
     * @param {ClienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClienteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteUpdateArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Types.GetResult<ClientePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Clientes.
     * @param {ClienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClienteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClienteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {ClienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
    **/
    upsert<T extends ClienteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteUpsertArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Types.GetResult<ClientePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends ClienteCountArgs>(
      args?: Subset<T, ClienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): Prisma.PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClienteClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    endereco<T extends EnderecoArgs<ExtArgs> = {}>(args?: Subset<T, EnderecoArgs<ExtArgs>>): Prisma__EnderecoClient<$Types.GetResult<EnderecoPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    contatos<T extends ContatoArgs<ExtArgs> = {}>(args?: Subset<T, ContatoArgs<ExtArgs>>): Prisma__ContatoClient<$Types.GetResult<ContatoPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    documentos<T extends Cliente$documentosArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$documentosArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<DocumentoPayload<ExtArgs>, T, 'findMany', never>| Null>;

    contratos<T extends Cliente$contratosArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$contratosArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ContratoPayload<ExtArgs>, T, 'findMany', never>| Null>;

    boletos<T extends Cliente$boletosArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$boletosArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<BoletoPayload<ExtArgs>, T, 'findMany', never>| Null>;

    interacoes<T extends Cliente$interacoesArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$interacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<InteracaoPayload<ExtArgs>, T, 'findMany', never>| Null>;

    comunicacoes<T extends Cliente$comunicacoesArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$comunicacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ComunicacaoPayload<ExtArgs>, T, 'findMany', never>| Null>;

    clientesInadimplentes<T extends Cliente$clientesInadimplentesArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$clientesInadimplentesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ClienteInadimplentePayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Cliente base type for findUnique actions
   */
  export type ClienteFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findUnique
   */
  export interface ClienteFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ClienteFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Cliente findUniqueOrThrow
   */
  export type ClienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente base type for findFirst actions
   */
  export type ClienteFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: Enumerable<ClienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: Enumerable<ClienteScalarFieldEnum>
  }

  /**
   * Cliente findFirst
   */
  export interface ClienteFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ClienteFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Cliente findFirstOrThrow
   */
  export type ClienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: Enumerable<ClienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: Enumerable<ClienteScalarFieldEnum>
  }


  /**
   * Cliente findMany
   */
  export type ClienteFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Clientes to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: Enumerable<ClienteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    distinct?: Enumerable<ClienteScalarFieldEnum>
  }


  /**
   * Cliente create
   */
  export type ClienteCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to create a Cliente.
     */
    data: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
  }


  /**
   * Cliente createMany
   */
  export type ClienteCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clientes.
     */
    data: Enumerable<ClienteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Cliente update
   */
  export type ClienteUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to update a Cliente.
     */
    data: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
    /**
     * Choose, which Cliente to update.
     */
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente updateMany
   */
  export type ClienteUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clientes.
     */
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     */
    where?: ClienteWhereInput
  }


  /**
   * Cliente upsert
   */
  export type ClienteUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The filter to search for the Cliente to update in case it exists.
     */
    where: ClienteWhereUniqueInput
    /**
     * In case the Cliente found by the `where` argument doesn't exist, create a new Cliente with this data.
     */
    create: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
    /**
     * In case the Cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
  }


  /**
   * Cliente delete
   */
  export type ClienteDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter which Cliente to delete.
     */
    where: ClienteWhereUniqueInput
  }


  /**
   * Cliente deleteMany
   */
  export type ClienteDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clientes to delete
     */
    where?: ClienteWhereInput
  }


  /**
   * Cliente.documentos
   */
  export type Cliente$documentosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude<ExtArgs> | null
    where?: DocumentoWhereInput
    orderBy?: Enumerable<DocumentoOrderByWithRelationInput>
    cursor?: DocumentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DocumentoScalarFieldEnum>
  }


  /**
   * Cliente.contratos
   */
  export type Cliente$contratosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
    where?: ContratoWhereInput
    orderBy?: Enumerable<ContratoOrderByWithRelationInput>
    cursor?: ContratoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ContratoScalarFieldEnum>
  }


  /**
   * Cliente.boletos
   */
  export type Cliente$boletosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boleto
     */
    select?: BoletoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoletoInclude<ExtArgs> | null
    where?: BoletoWhereInput
    orderBy?: Enumerable<BoletoOrderByWithRelationInput>
    cursor?: BoletoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BoletoScalarFieldEnum>
  }


  /**
   * Cliente.interacoes
   */
  export type Cliente$interacoesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interacao
     */
    select?: InteracaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InteracaoInclude<ExtArgs> | null
    where?: InteracaoWhereInput
    orderBy?: Enumerable<InteracaoOrderByWithRelationInput>
    cursor?: InteracaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<InteracaoScalarFieldEnum>
  }


  /**
   * Cliente.comunicacoes
   */
  export type Cliente$comunicacoesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comunicacao
     */
    select?: ComunicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComunicacaoInclude<ExtArgs> | null
    where?: ComunicacaoWhereInput
    orderBy?: Enumerable<ComunicacaoOrderByWithRelationInput>
    cursor?: ComunicacaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ComunicacaoScalarFieldEnum>
  }


  /**
   * Cliente.clientesInadimplentes
   */
  export type Cliente$clientesInadimplentesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInadimplente
     */
    select?: ClienteInadimplenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInadimplenteInclude<ExtArgs> | null
    where?: ClienteInadimplenteWhereInput
    orderBy?: Enumerable<ClienteInadimplenteOrderByWithRelationInput>
    cursor?: ClienteInadimplenteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ClienteInadimplenteScalarFieldEnum>
  }


  /**
   * Cliente without action
   */
  export type ClienteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInclude<ExtArgs> | null
  }



  /**
   * Model Endereco
   */


  export type AggregateEndereco = {
    _count: EnderecoCountAggregateOutputType | null
    _avg: EnderecoAvgAggregateOutputType | null
    _sum: EnderecoSumAggregateOutputType | null
    _min: EnderecoMinAggregateOutputType | null
    _max: EnderecoMaxAggregateOutputType | null
  }

  export type EnderecoAvgAggregateOutputType = {
    id: number | null
    clienteId: number | null
  }

  export type EnderecoSumAggregateOutputType = {
    id: number | null
    clienteId: number | null
  }

  export type EnderecoMinAggregateOutputType = {
    id: number | null
    clienteId: number | null
    cep: string | null
    logradouro: string | null
    numero: string | null
    complemento: string | null
    bairro: string | null
    cidade: string | null
    estado: string | null
  }

  export type EnderecoMaxAggregateOutputType = {
    id: number | null
    clienteId: number | null
    cep: string | null
    logradouro: string | null
    numero: string | null
    complemento: string | null
    bairro: string | null
    cidade: string | null
    estado: string | null
  }

  export type EnderecoCountAggregateOutputType = {
    id: number
    clienteId: number
    cep: number
    logradouro: number
    numero: number
    complemento: number
    bairro: number
    cidade: number
    estado: number
    _all: number
  }


  export type EnderecoAvgAggregateInputType = {
    id?: true
    clienteId?: true
  }

  export type EnderecoSumAggregateInputType = {
    id?: true
    clienteId?: true
  }

  export type EnderecoMinAggregateInputType = {
    id?: true
    clienteId?: true
    cep?: true
    logradouro?: true
    numero?: true
    complemento?: true
    bairro?: true
    cidade?: true
    estado?: true
  }

  export type EnderecoMaxAggregateInputType = {
    id?: true
    clienteId?: true
    cep?: true
    logradouro?: true
    numero?: true
    complemento?: true
    bairro?: true
    cidade?: true
    estado?: true
  }

  export type EnderecoCountAggregateInputType = {
    id?: true
    clienteId?: true
    cep?: true
    logradouro?: true
    numero?: true
    complemento?: true
    bairro?: true
    cidade?: true
    estado?: true
    _all?: true
  }

  export type EnderecoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Endereco to aggregate.
     */
    where?: EnderecoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enderecos to fetch.
     */
    orderBy?: Enumerable<EnderecoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EnderecoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enderecos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enderecos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Enderecos
    **/
    _count?: true | EnderecoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnderecoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnderecoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnderecoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnderecoMaxAggregateInputType
  }

  export type GetEnderecoAggregateType<T extends EnderecoAggregateArgs> = {
        [P in keyof T & keyof AggregateEndereco]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEndereco[P]>
      : GetScalarType<T[P], AggregateEndereco[P]>
  }




  export type EnderecoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: EnderecoWhereInput
    orderBy?: Enumerable<EnderecoOrderByWithAggregationInput>
    by: EnderecoScalarFieldEnum[]
    having?: EnderecoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnderecoCountAggregateInputType | true
    _avg?: EnderecoAvgAggregateInputType
    _sum?: EnderecoSumAggregateInputType
    _min?: EnderecoMinAggregateInputType
    _max?: EnderecoMaxAggregateInputType
  }


  export type EnderecoGroupByOutputType = {
    id: number
    clienteId: number
    cep: string
    logradouro: string
    numero: string
    complemento: string | null
    bairro: string
    cidade: string
    estado: string
    _count: EnderecoCountAggregateOutputType | null
    _avg: EnderecoAvgAggregateOutputType | null
    _sum: EnderecoSumAggregateOutputType | null
    _min: EnderecoMinAggregateOutputType | null
    _max: EnderecoMaxAggregateOutputType | null
  }

  type GetEnderecoGroupByPayload<T extends EnderecoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EnderecoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnderecoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnderecoGroupByOutputType[P]>
            : GetScalarType<T[P], EnderecoGroupByOutputType[P]>
        }
      >
    >


  export type EnderecoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteId?: boolean
    cep?: boolean
    logradouro?: boolean
    numero?: boolean
    complemento?: boolean
    bairro?: boolean
    cidade?: boolean
    estado?: boolean
    cliente?: boolean | ClienteArgs<ExtArgs>
  }, ExtArgs["result"]["endereco"]>

  export type EnderecoSelectScalar = {
    id?: boolean
    clienteId?: boolean
    cep?: boolean
    logradouro?: boolean
    numero?: boolean
    complemento?: boolean
    bairro?: boolean
    cidade?: boolean
    estado?: boolean
  }

  export type EnderecoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteArgs<ExtArgs>
  }


  type EnderecoGetPayload<S extends boolean | null | undefined | EnderecoArgs> = $Types.GetResult<EnderecoPayload, S>

  type EnderecoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<EnderecoFindManyArgs, 'select' | 'include'> & {
      select?: EnderecoCountAggregateInputType | true
    }

  export interface EnderecoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Endereco'], meta: { name: 'Endereco' } }
    /**
     * Find zero or one Endereco that matches the filter.
     * @param {EnderecoFindUniqueArgs} args - Arguments to find a Endereco
     * @example
     * // Get one Endereco
     * const endereco = await prisma.endereco.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EnderecoFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EnderecoFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Endereco'> extends True ? Prisma__EnderecoClient<$Types.GetResult<EnderecoPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__EnderecoClient<$Types.GetResult<EnderecoPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Endereco that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EnderecoFindUniqueOrThrowArgs} args - Arguments to find a Endereco
     * @example
     * // Get one Endereco
     * const endereco = await prisma.endereco.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EnderecoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EnderecoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EnderecoClient<$Types.GetResult<EnderecoPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Endereco that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecoFindFirstArgs} args - Arguments to find a Endereco
     * @example
     * // Get one Endereco
     * const endereco = await prisma.endereco.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EnderecoFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EnderecoFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Endereco'> extends True ? Prisma__EnderecoClient<$Types.GetResult<EnderecoPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__EnderecoClient<$Types.GetResult<EnderecoPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Endereco that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecoFindFirstOrThrowArgs} args - Arguments to find a Endereco
     * @example
     * // Get one Endereco
     * const endereco = await prisma.endereco.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EnderecoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EnderecoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EnderecoClient<$Types.GetResult<EnderecoPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Enderecos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Enderecos
     * const enderecos = await prisma.endereco.findMany()
     * 
     * // Get first 10 Enderecos
     * const enderecos = await prisma.endereco.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const enderecoWithIdOnly = await prisma.endereco.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EnderecoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EnderecoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<EnderecoPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Endereco.
     * @param {EnderecoCreateArgs} args - Arguments to create a Endereco.
     * @example
     * // Create one Endereco
     * const Endereco = await prisma.endereco.create({
     *   data: {
     *     // ... data to create a Endereco
     *   }
     * })
     * 
    **/
    create<T extends EnderecoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EnderecoCreateArgs<ExtArgs>>
    ): Prisma__EnderecoClient<$Types.GetResult<EnderecoPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Enderecos.
     *     @param {EnderecoCreateManyArgs} args - Arguments to create many Enderecos.
     *     @example
     *     // Create many Enderecos
     *     const endereco = await prisma.endereco.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EnderecoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EnderecoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Endereco.
     * @param {EnderecoDeleteArgs} args - Arguments to delete one Endereco.
     * @example
     * // Delete one Endereco
     * const Endereco = await prisma.endereco.delete({
     *   where: {
     *     // ... filter to delete one Endereco
     *   }
     * })
     * 
    **/
    delete<T extends EnderecoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EnderecoDeleteArgs<ExtArgs>>
    ): Prisma__EnderecoClient<$Types.GetResult<EnderecoPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Endereco.
     * @param {EnderecoUpdateArgs} args - Arguments to update one Endereco.
     * @example
     * // Update one Endereco
     * const endereco = await prisma.endereco.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EnderecoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EnderecoUpdateArgs<ExtArgs>>
    ): Prisma__EnderecoClient<$Types.GetResult<EnderecoPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Enderecos.
     * @param {EnderecoDeleteManyArgs} args - Arguments to filter Enderecos to delete.
     * @example
     * // Delete a few Enderecos
     * const { count } = await prisma.endereco.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EnderecoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EnderecoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Enderecos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Enderecos
     * const endereco = await prisma.endereco.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EnderecoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EnderecoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Endereco.
     * @param {EnderecoUpsertArgs} args - Arguments to update or create a Endereco.
     * @example
     * // Update or create a Endereco
     * const endereco = await prisma.endereco.upsert({
     *   create: {
     *     // ... data to create a Endereco
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Endereco we want to update
     *   }
     * })
    **/
    upsert<T extends EnderecoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EnderecoUpsertArgs<ExtArgs>>
    ): Prisma__EnderecoClient<$Types.GetResult<EnderecoPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Enderecos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecoCountArgs} args - Arguments to filter Enderecos to count.
     * @example
     * // Count the number of Enderecos
     * const count = await prisma.endereco.count({
     *   where: {
     *     // ... the filter for the Enderecos we want to count
     *   }
     * })
    **/
    count<T extends EnderecoCountArgs>(
      args?: Subset<T, EnderecoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnderecoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Endereco.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnderecoAggregateArgs>(args: Subset<T, EnderecoAggregateArgs>): Prisma.PrismaPromise<GetEnderecoAggregateType<T>>

    /**
     * Group by Endereco.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnderecoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnderecoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnderecoGroupByArgs['orderBy'] }
        : { orderBy?: EnderecoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnderecoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnderecoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Endereco.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EnderecoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    cliente<T extends ClienteArgs<ExtArgs> = {}>(args?: Subset<T, ClienteArgs<ExtArgs>>): Prisma__ClienteClient<$Types.GetResult<ClientePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Endereco base type for findUnique actions
   */
  export type EnderecoFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnderecoInclude<ExtArgs> | null
    /**
     * Filter, which Endereco to fetch.
     */
    where: EnderecoWhereUniqueInput
  }

  /**
   * Endereco findUnique
   */
  export interface EnderecoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends EnderecoFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Endereco findUniqueOrThrow
   */
  export type EnderecoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnderecoInclude<ExtArgs> | null
    /**
     * Filter, which Endereco to fetch.
     */
    where: EnderecoWhereUniqueInput
  }


  /**
   * Endereco base type for findFirst actions
   */
  export type EnderecoFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnderecoInclude<ExtArgs> | null
    /**
     * Filter, which Endereco to fetch.
     */
    where?: EnderecoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enderecos to fetch.
     */
    orderBy?: Enumerable<EnderecoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enderecos.
     */
    cursor?: EnderecoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enderecos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enderecos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enderecos.
     */
    distinct?: Enumerable<EnderecoScalarFieldEnum>
  }

  /**
   * Endereco findFirst
   */
  export interface EnderecoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends EnderecoFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Endereco findFirstOrThrow
   */
  export type EnderecoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnderecoInclude<ExtArgs> | null
    /**
     * Filter, which Endereco to fetch.
     */
    where?: EnderecoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enderecos to fetch.
     */
    orderBy?: Enumerable<EnderecoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enderecos.
     */
    cursor?: EnderecoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enderecos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enderecos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enderecos.
     */
    distinct?: Enumerable<EnderecoScalarFieldEnum>
  }


  /**
   * Endereco findMany
   */
  export type EnderecoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnderecoInclude<ExtArgs> | null
    /**
     * Filter, which Enderecos to fetch.
     */
    where?: EnderecoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enderecos to fetch.
     */
    orderBy?: Enumerable<EnderecoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Enderecos.
     */
    cursor?: EnderecoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enderecos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enderecos.
     */
    skip?: number
    distinct?: Enumerable<EnderecoScalarFieldEnum>
  }


  /**
   * Endereco create
   */
  export type EnderecoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnderecoInclude<ExtArgs> | null
    /**
     * The data needed to create a Endereco.
     */
    data: XOR<EnderecoCreateInput, EnderecoUncheckedCreateInput>
  }


  /**
   * Endereco createMany
   */
  export type EnderecoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Enderecos.
     */
    data: Enumerable<EnderecoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Endereco update
   */
  export type EnderecoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnderecoInclude<ExtArgs> | null
    /**
     * The data needed to update a Endereco.
     */
    data: XOR<EnderecoUpdateInput, EnderecoUncheckedUpdateInput>
    /**
     * Choose, which Endereco to update.
     */
    where: EnderecoWhereUniqueInput
  }


  /**
   * Endereco updateMany
   */
  export type EnderecoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Enderecos.
     */
    data: XOR<EnderecoUpdateManyMutationInput, EnderecoUncheckedUpdateManyInput>
    /**
     * Filter which Enderecos to update
     */
    where?: EnderecoWhereInput
  }


  /**
   * Endereco upsert
   */
  export type EnderecoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnderecoInclude<ExtArgs> | null
    /**
     * The filter to search for the Endereco to update in case it exists.
     */
    where: EnderecoWhereUniqueInput
    /**
     * In case the Endereco found by the `where` argument doesn't exist, create a new Endereco with this data.
     */
    create: XOR<EnderecoCreateInput, EnderecoUncheckedCreateInput>
    /**
     * In case the Endereco was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EnderecoUpdateInput, EnderecoUncheckedUpdateInput>
  }


  /**
   * Endereco delete
   */
  export type EnderecoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnderecoInclude<ExtArgs> | null
    /**
     * Filter which Endereco to delete.
     */
    where: EnderecoWhereUniqueInput
  }


  /**
   * Endereco deleteMany
   */
  export type EnderecoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enderecos to delete
     */
    where?: EnderecoWhereInput
  }


  /**
   * Endereco without action
   */
  export type EnderecoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endereco
     */
    select?: EnderecoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EnderecoInclude<ExtArgs> | null
  }



  /**
   * Model Contato
   */


  export type AggregateContato = {
    _count: ContatoCountAggregateOutputType | null
    _avg: ContatoAvgAggregateOutputType | null
    _sum: ContatoSumAggregateOutputType | null
    _min: ContatoMinAggregateOutputType | null
    _max: ContatoMaxAggregateOutputType | null
  }

  export type ContatoAvgAggregateOutputType = {
    id: number | null
    clienteId: number | null
  }

  export type ContatoSumAggregateOutputType = {
    id: number | null
    clienteId: number | null
  }

  export type ContatoMinAggregateOutputType = {
    id: number | null
    clienteId: number | null
  }

  export type ContatoMaxAggregateOutputType = {
    id: number | null
    clienteId: number | null
  }

  export type ContatoCountAggregateOutputType = {
    id: number
    clienteId: number
    telefones: number
    emails: number
    _all: number
  }


  export type ContatoAvgAggregateInputType = {
    id?: true
    clienteId?: true
  }

  export type ContatoSumAggregateInputType = {
    id?: true
    clienteId?: true
  }

  export type ContatoMinAggregateInputType = {
    id?: true
    clienteId?: true
  }

  export type ContatoMaxAggregateInputType = {
    id?: true
    clienteId?: true
  }

  export type ContatoCountAggregateInputType = {
    id?: true
    clienteId?: true
    telefones?: true
    emails?: true
    _all?: true
  }

  export type ContatoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contato to aggregate.
     */
    where?: ContatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contatoes to fetch.
     */
    orderBy?: Enumerable<ContatoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contatoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contatoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contatoes
    **/
    _count?: true | ContatoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContatoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContatoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContatoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContatoMaxAggregateInputType
  }

  export type GetContatoAggregateType<T extends ContatoAggregateArgs> = {
        [P in keyof T & keyof AggregateContato]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContato[P]>
      : GetScalarType<T[P], AggregateContato[P]>
  }




  export type ContatoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ContatoWhereInput
    orderBy?: Enumerable<ContatoOrderByWithAggregationInput>
    by: ContatoScalarFieldEnum[]
    having?: ContatoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContatoCountAggregateInputType | true
    _avg?: ContatoAvgAggregateInputType
    _sum?: ContatoSumAggregateInputType
    _min?: ContatoMinAggregateInputType
    _max?: ContatoMaxAggregateInputType
  }


  export type ContatoGroupByOutputType = {
    id: number
    clienteId: number
    telefones: string[]
    emails: string[]
    _count: ContatoCountAggregateOutputType | null
    _avg: ContatoAvgAggregateOutputType | null
    _sum: ContatoSumAggregateOutputType | null
    _min: ContatoMinAggregateOutputType | null
    _max: ContatoMaxAggregateOutputType | null
  }

  type GetContatoGroupByPayload<T extends ContatoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ContatoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContatoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContatoGroupByOutputType[P]>
            : GetScalarType<T[P], ContatoGroupByOutputType[P]>
        }
      >
    >


  export type ContatoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteId?: boolean
    telefones?: boolean
    emails?: boolean
    cliente?: boolean | ClienteArgs<ExtArgs>
  }, ExtArgs["result"]["contato"]>

  export type ContatoSelectScalar = {
    id?: boolean
    clienteId?: boolean
    telefones?: boolean
    emails?: boolean
  }

  export type ContatoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteArgs<ExtArgs>
  }


  type ContatoGetPayload<S extends boolean | null | undefined | ContatoArgs> = $Types.GetResult<ContatoPayload, S>

  type ContatoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ContatoFindManyArgs, 'select' | 'include'> & {
      select?: ContatoCountAggregateInputType | true
    }

  export interface ContatoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contato'], meta: { name: 'Contato' } }
    /**
     * Find zero or one Contato that matches the filter.
     * @param {ContatoFindUniqueArgs} args - Arguments to find a Contato
     * @example
     * // Get one Contato
     * const contato = await prisma.contato.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContatoFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ContatoFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Contato'> extends True ? Prisma__ContatoClient<$Types.GetResult<ContatoPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ContatoClient<$Types.GetResult<ContatoPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Contato that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ContatoFindUniqueOrThrowArgs} args - Arguments to find a Contato
     * @example
     * // Get one Contato
     * const contato = await prisma.contato.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ContatoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContatoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ContatoClient<$Types.GetResult<ContatoPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Contato that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContatoFindFirstArgs} args - Arguments to find a Contato
     * @example
     * // Get one Contato
     * const contato = await prisma.contato.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContatoFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ContatoFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Contato'> extends True ? Prisma__ContatoClient<$Types.GetResult<ContatoPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ContatoClient<$Types.GetResult<ContatoPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Contato that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContatoFindFirstOrThrowArgs} args - Arguments to find a Contato
     * @example
     * // Get one Contato
     * const contato = await prisma.contato.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ContatoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContatoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ContatoClient<$Types.GetResult<ContatoPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Contatoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContatoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contatoes
     * const contatoes = await prisma.contato.findMany()
     * 
     * // Get first 10 Contatoes
     * const contatoes = await prisma.contato.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contatoWithIdOnly = await prisma.contato.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ContatoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContatoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ContatoPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Contato.
     * @param {ContatoCreateArgs} args - Arguments to create a Contato.
     * @example
     * // Create one Contato
     * const Contato = await prisma.contato.create({
     *   data: {
     *     // ... data to create a Contato
     *   }
     * })
     * 
    **/
    create<T extends ContatoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ContatoCreateArgs<ExtArgs>>
    ): Prisma__ContatoClient<$Types.GetResult<ContatoPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Contatoes.
     *     @param {ContatoCreateManyArgs} args - Arguments to create many Contatoes.
     *     @example
     *     // Create many Contatoes
     *     const contato = await prisma.contato.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ContatoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContatoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Contato.
     * @param {ContatoDeleteArgs} args - Arguments to delete one Contato.
     * @example
     * // Delete one Contato
     * const Contato = await prisma.contato.delete({
     *   where: {
     *     // ... filter to delete one Contato
     *   }
     * })
     * 
    **/
    delete<T extends ContatoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ContatoDeleteArgs<ExtArgs>>
    ): Prisma__ContatoClient<$Types.GetResult<ContatoPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Contato.
     * @param {ContatoUpdateArgs} args - Arguments to update one Contato.
     * @example
     * // Update one Contato
     * const contato = await prisma.contato.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContatoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ContatoUpdateArgs<ExtArgs>>
    ): Prisma__ContatoClient<$Types.GetResult<ContatoPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Contatoes.
     * @param {ContatoDeleteManyArgs} args - Arguments to filter Contatoes to delete.
     * @example
     * // Delete a few Contatoes
     * const { count } = await prisma.contato.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContatoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContatoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contatoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContatoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contatoes
     * const contato = await prisma.contato.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContatoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ContatoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contato.
     * @param {ContatoUpsertArgs} args - Arguments to update or create a Contato.
     * @example
     * // Update or create a Contato
     * const contato = await prisma.contato.upsert({
     *   create: {
     *     // ... data to create a Contato
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contato we want to update
     *   }
     * })
    **/
    upsert<T extends ContatoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ContatoUpsertArgs<ExtArgs>>
    ): Prisma__ContatoClient<$Types.GetResult<ContatoPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Contatoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContatoCountArgs} args - Arguments to filter Contatoes to count.
     * @example
     * // Count the number of Contatoes
     * const count = await prisma.contato.count({
     *   where: {
     *     // ... the filter for the Contatoes we want to count
     *   }
     * })
    **/
    count<T extends ContatoCountArgs>(
      args?: Subset<T, ContatoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContatoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contato.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContatoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContatoAggregateArgs>(args: Subset<T, ContatoAggregateArgs>): Prisma.PrismaPromise<GetContatoAggregateType<T>>

    /**
     * Group by Contato.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContatoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContatoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContatoGroupByArgs['orderBy'] }
        : { orderBy?: ContatoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContatoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContatoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Contato.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContatoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    cliente<T extends ClienteArgs<ExtArgs> = {}>(args?: Subset<T, ClienteArgs<ExtArgs>>): Prisma__ClienteClient<$Types.GetResult<ClientePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Contato base type for findUnique actions
   */
  export type ContatoFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contato
     */
    select?: ContatoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContatoInclude<ExtArgs> | null
    /**
     * Filter, which Contato to fetch.
     */
    where: ContatoWhereUniqueInput
  }

  /**
   * Contato findUnique
   */
  export interface ContatoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ContatoFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Contato findUniqueOrThrow
   */
  export type ContatoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contato
     */
    select?: ContatoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContatoInclude<ExtArgs> | null
    /**
     * Filter, which Contato to fetch.
     */
    where: ContatoWhereUniqueInput
  }


  /**
   * Contato base type for findFirst actions
   */
  export type ContatoFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contato
     */
    select?: ContatoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContatoInclude<ExtArgs> | null
    /**
     * Filter, which Contato to fetch.
     */
    where?: ContatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contatoes to fetch.
     */
    orderBy?: Enumerable<ContatoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contatoes.
     */
    cursor?: ContatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contatoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contatoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contatoes.
     */
    distinct?: Enumerable<ContatoScalarFieldEnum>
  }

  /**
   * Contato findFirst
   */
  export interface ContatoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ContatoFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Contato findFirstOrThrow
   */
  export type ContatoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contato
     */
    select?: ContatoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContatoInclude<ExtArgs> | null
    /**
     * Filter, which Contato to fetch.
     */
    where?: ContatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contatoes to fetch.
     */
    orderBy?: Enumerable<ContatoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contatoes.
     */
    cursor?: ContatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contatoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contatoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contatoes.
     */
    distinct?: Enumerable<ContatoScalarFieldEnum>
  }


  /**
   * Contato findMany
   */
  export type ContatoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contato
     */
    select?: ContatoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContatoInclude<ExtArgs> | null
    /**
     * Filter, which Contatoes to fetch.
     */
    where?: ContatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contatoes to fetch.
     */
    orderBy?: Enumerable<ContatoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contatoes.
     */
    cursor?: ContatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contatoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contatoes.
     */
    skip?: number
    distinct?: Enumerable<ContatoScalarFieldEnum>
  }


  /**
   * Contato create
   */
  export type ContatoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contato
     */
    select?: ContatoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContatoInclude<ExtArgs> | null
    /**
     * The data needed to create a Contato.
     */
    data: XOR<ContatoCreateInput, ContatoUncheckedCreateInput>
  }


  /**
   * Contato createMany
   */
  export type ContatoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contatoes.
     */
    data: Enumerable<ContatoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Contato update
   */
  export type ContatoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contato
     */
    select?: ContatoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContatoInclude<ExtArgs> | null
    /**
     * The data needed to update a Contato.
     */
    data: XOR<ContatoUpdateInput, ContatoUncheckedUpdateInput>
    /**
     * Choose, which Contato to update.
     */
    where: ContatoWhereUniqueInput
  }


  /**
   * Contato updateMany
   */
  export type ContatoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contatoes.
     */
    data: XOR<ContatoUpdateManyMutationInput, ContatoUncheckedUpdateManyInput>
    /**
     * Filter which Contatoes to update
     */
    where?: ContatoWhereInput
  }


  /**
   * Contato upsert
   */
  export type ContatoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contato
     */
    select?: ContatoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContatoInclude<ExtArgs> | null
    /**
     * The filter to search for the Contato to update in case it exists.
     */
    where: ContatoWhereUniqueInput
    /**
     * In case the Contato found by the `where` argument doesn't exist, create a new Contato with this data.
     */
    create: XOR<ContatoCreateInput, ContatoUncheckedCreateInput>
    /**
     * In case the Contato was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContatoUpdateInput, ContatoUncheckedUpdateInput>
  }


  /**
   * Contato delete
   */
  export type ContatoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contato
     */
    select?: ContatoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContatoInclude<ExtArgs> | null
    /**
     * Filter which Contato to delete.
     */
    where: ContatoWhereUniqueInput
  }


  /**
   * Contato deleteMany
   */
  export type ContatoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contatoes to delete
     */
    where?: ContatoWhereInput
  }


  /**
   * Contato without action
   */
  export type ContatoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contato
     */
    select?: ContatoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContatoInclude<ExtArgs> | null
  }



  /**
   * Model Documento
   */


  export type AggregateDocumento = {
    _count: DocumentoCountAggregateOutputType | null
    _avg: DocumentoAvgAggregateOutputType | null
    _sum: DocumentoSumAggregateOutputType | null
    _min: DocumentoMinAggregateOutputType | null
    _max: DocumentoMaxAggregateOutputType | null
  }

  export type DocumentoAvgAggregateOutputType = {
    id: number | null
    clienteId: number | null
  }

  export type DocumentoSumAggregateOutputType = {
    id: number | null
    clienteId: number | null
  }

  export type DocumentoMinAggregateOutputType = {
    id: number | null
    clienteId: number | null
    tipo: string | null
    nome: string | null
    arquivo: string | null
    dataUpload: Date | null
    s3Key: string | null
  }

  export type DocumentoMaxAggregateOutputType = {
    id: number | null
    clienteId: number | null
    tipo: string | null
    nome: string | null
    arquivo: string | null
    dataUpload: Date | null
    s3Key: string | null
  }

  export type DocumentoCountAggregateOutputType = {
    id: number
    clienteId: number
    tipo: number
    nome: number
    arquivo: number
    dataUpload: number
    s3Key: number
    _all: number
  }


  export type DocumentoAvgAggregateInputType = {
    id?: true
    clienteId?: true
  }

  export type DocumentoSumAggregateInputType = {
    id?: true
    clienteId?: true
  }

  export type DocumentoMinAggregateInputType = {
    id?: true
    clienteId?: true
    tipo?: true
    nome?: true
    arquivo?: true
    dataUpload?: true
    s3Key?: true
  }

  export type DocumentoMaxAggregateInputType = {
    id?: true
    clienteId?: true
    tipo?: true
    nome?: true
    arquivo?: true
    dataUpload?: true
    s3Key?: true
  }

  export type DocumentoCountAggregateInputType = {
    id?: true
    clienteId?: true
    tipo?: true
    nome?: true
    arquivo?: true
    dataUpload?: true
    s3Key?: true
    _all?: true
  }

  export type DocumentoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documento to aggregate.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: Enumerable<DocumentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documentos
    **/
    _count?: true | DocumentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentoMaxAggregateInputType
  }

  export type GetDocumentoAggregateType<T extends DocumentoAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumento[P]>
      : GetScalarType<T[P], AggregateDocumento[P]>
  }




  export type DocumentoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DocumentoWhereInput
    orderBy?: Enumerable<DocumentoOrderByWithAggregationInput>
    by: DocumentoScalarFieldEnum[]
    having?: DocumentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentoCountAggregateInputType | true
    _avg?: DocumentoAvgAggregateInputType
    _sum?: DocumentoSumAggregateInputType
    _min?: DocumentoMinAggregateInputType
    _max?: DocumentoMaxAggregateInputType
  }


  export type DocumentoGroupByOutputType = {
    id: number
    clienteId: number
    tipo: string
    nome: string
    arquivo: string
    dataUpload: Date
    s3Key: string | null
    _count: DocumentoCountAggregateOutputType | null
    _avg: DocumentoAvgAggregateOutputType | null
    _sum: DocumentoSumAggregateOutputType | null
    _min: DocumentoMinAggregateOutputType | null
    _max: DocumentoMaxAggregateOutputType | null
  }

  type GetDocumentoGroupByPayload<T extends DocumentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DocumentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentoGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentoGroupByOutputType[P]>
        }
      >
    >


  export type DocumentoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteId?: boolean
    tipo?: boolean
    nome?: boolean
    arquivo?: boolean
    dataUpload?: boolean
    s3Key?: boolean
    cliente?: boolean | ClienteArgs<ExtArgs>
  }, ExtArgs["result"]["documento"]>

  export type DocumentoSelectScalar = {
    id?: boolean
    clienteId?: boolean
    tipo?: boolean
    nome?: boolean
    arquivo?: boolean
    dataUpload?: boolean
    s3Key?: boolean
  }

  export type DocumentoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteArgs<ExtArgs>
  }


  type DocumentoGetPayload<S extends boolean | null | undefined | DocumentoArgs> = $Types.GetResult<DocumentoPayload, S>

  type DocumentoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<DocumentoFindManyArgs, 'select' | 'include'> & {
      select?: DocumentoCountAggregateInputType | true
    }

  export interface DocumentoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Documento'], meta: { name: 'Documento' } }
    /**
     * Find zero or one Documento that matches the filter.
     * @param {DocumentoFindUniqueArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DocumentoFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DocumentoFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Documento'> extends True ? Prisma__DocumentoClient<$Types.GetResult<DocumentoPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__DocumentoClient<$Types.GetResult<DocumentoPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Documento that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DocumentoFindUniqueOrThrowArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DocumentoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DocumentoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DocumentoClient<$Types.GetResult<DocumentoPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Documento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoFindFirstArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DocumentoFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DocumentoFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Documento'> extends True ? Prisma__DocumentoClient<$Types.GetResult<DocumentoPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__DocumentoClient<$Types.GetResult<DocumentoPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Documento that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoFindFirstOrThrowArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DocumentoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DocumentoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DocumentoClient<$Types.GetResult<DocumentoPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Documentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documentos
     * const documentos = await prisma.documento.findMany()
     * 
     * // Get first 10 Documentos
     * const documentos = await prisma.documento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentoWithIdOnly = await prisma.documento.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DocumentoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DocumentoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<DocumentoPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Documento.
     * @param {DocumentoCreateArgs} args - Arguments to create a Documento.
     * @example
     * // Create one Documento
     * const Documento = await prisma.documento.create({
     *   data: {
     *     // ... data to create a Documento
     *   }
     * })
     * 
    **/
    create<T extends DocumentoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DocumentoCreateArgs<ExtArgs>>
    ): Prisma__DocumentoClient<$Types.GetResult<DocumentoPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Documentos.
     *     @param {DocumentoCreateManyArgs} args - Arguments to create many Documentos.
     *     @example
     *     // Create many Documentos
     *     const documento = await prisma.documento.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DocumentoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DocumentoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Documento.
     * @param {DocumentoDeleteArgs} args - Arguments to delete one Documento.
     * @example
     * // Delete one Documento
     * const Documento = await prisma.documento.delete({
     *   where: {
     *     // ... filter to delete one Documento
     *   }
     * })
     * 
    **/
    delete<T extends DocumentoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DocumentoDeleteArgs<ExtArgs>>
    ): Prisma__DocumentoClient<$Types.GetResult<DocumentoPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Documento.
     * @param {DocumentoUpdateArgs} args - Arguments to update one Documento.
     * @example
     * // Update one Documento
     * const documento = await prisma.documento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DocumentoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DocumentoUpdateArgs<ExtArgs>>
    ): Prisma__DocumentoClient<$Types.GetResult<DocumentoPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Documentos.
     * @param {DocumentoDeleteManyArgs} args - Arguments to filter Documentos to delete.
     * @example
     * // Delete a few Documentos
     * const { count } = await prisma.documento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DocumentoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DocumentoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documentos
     * const documento = await prisma.documento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DocumentoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DocumentoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Documento.
     * @param {DocumentoUpsertArgs} args - Arguments to update or create a Documento.
     * @example
     * // Update or create a Documento
     * const documento = await prisma.documento.upsert({
     *   create: {
     *     // ... data to create a Documento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Documento we want to update
     *   }
     * })
    **/
    upsert<T extends DocumentoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DocumentoUpsertArgs<ExtArgs>>
    ): Prisma__DocumentoClient<$Types.GetResult<DocumentoPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Documentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoCountArgs} args - Arguments to filter Documentos to count.
     * @example
     * // Count the number of Documentos
     * const count = await prisma.documento.count({
     *   where: {
     *     // ... the filter for the Documentos we want to count
     *   }
     * })
    **/
    count<T extends DocumentoCountArgs>(
      args?: Subset<T, DocumentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Documento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentoAggregateArgs>(args: Subset<T, DocumentoAggregateArgs>): Prisma.PrismaPromise<GetDocumentoAggregateType<T>>

    /**
     * Group by Documento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentoGroupByArgs['orderBy'] }
        : { orderBy?: DocumentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Documento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DocumentoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    cliente<T extends ClienteArgs<ExtArgs> = {}>(args?: Subset<T, ClienteArgs<ExtArgs>>): Prisma__ClienteClient<$Types.GetResult<ClientePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Documento base type for findUnique actions
   */
  export type DocumentoFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documento to fetch.
     */
    where: DocumentoWhereUniqueInput
  }

  /**
   * Documento findUnique
   */
  export interface DocumentoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DocumentoFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Documento findUniqueOrThrow
   */
  export type DocumentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documento to fetch.
     */
    where: DocumentoWhereUniqueInput
  }


  /**
   * Documento base type for findFirst actions
   */
  export type DocumentoFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documento to fetch.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: Enumerable<DocumentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documentos.
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documentos.
     */
    distinct?: Enumerable<DocumentoScalarFieldEnum>
  }

  /**
   * Documento findFirst
   */
  export interface DocumentoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DocumentoFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Documento findFirstOrThrow
   */
  export type DocumentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documento to fetch.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: Enumerable<DocumentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documentos.
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documentos.
     */
    distinct?: Enumerable<DocumentoScalarFieldEnum>
  }


  /**
   * Documento findMany
   */
  export type DocumentoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documentos to fetch.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: Enumerable<DocumentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documentos.
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    distinct?: Enumerable<DocumentoScalarFieldEnum>
  }


  /**
   * Documento create
   */
  export type DocumentoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * The data needed to create a Documento.
     */
    data: XOR<DocumentoCreateInput, DocumentoUncheckedCreateInput>
  }


  /**
   * Documento createMany
   */
  export type DocumentoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documentos.
     */
    data: Enumerable<DocumentoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Documento update
   */
  export type DocumentoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * The data needed to update a Documento.
     */
    data: XOR<DocumentoUpdateInput, DocumentoUncheckedUpdateInput>
    /**
     * Choose, which Documento to update.
     */
    where: DocumentoWhereUniqueInput
  }


  /**
   * Documento updateMany
   */
  export type DocumentoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documentos.
     */
    data: XOR<DocumentoUpdateManyMutationInput, DocumentoUncheckedUpdateManyInput>
    /**
     * Filter which Documentos to update
     */
    where?: DocumentoWhereInput
  }


  /**
   * Documento upsert
   */
  export type DocumentoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * The filter to search for the Documento to update in case it exists.
     */
    where: DocumentoWhereUniqueInput
    /**
     * In case the Documento found by the `where` argument doesn't exist, create a new Documento with this data.
     */
    create: XOR<DocumentoCreateInput, DocumentoUncheckedCreateInput>
    /**
     * In case the Documento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentoUpdateInput, DocumentoUncheckedUpdateInput>
  }


  /**
   * Documento delete
   */
  export type DocumentoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter which Documento to delete.
     */
    where: DocumentoWhereUniqueInput
  }


  /**
   * Documento deleteMany
   */
  export type DocumentoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documentos to delete
     */
    where?: DocumentoWhereInput
  }


  /**
   * Documento without action
   */
  export type DocumentoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DocumentoInclude<ExtArgs> | null
  }



  /**
   * Model Lote
   */


  export type AggregateLote = {
    _count: LoteCountAggregateOutputType | null
    _avg: LoteAvgAggregateOutputType | null
    _sum: LoteSumAggregateOutputType | null
    _min: LoteMinAggregateOutputType | null
    _max: LoteMaxAggregateOutputType | null
  }

  export type LoteAvgAggregateOutputType = {
    id: number | null
    area: number | null
    valorBase: Decimal | null
  }

  export type LoteSumAggregateOutputType = {
    id: number | null
    area: number | null
    valorBase: Decimal | null
  }

  export type LoteMinAggregateOutputType = {
    id: number | null
    numero: string | null
    quadra: string | null
    loteamento: string | null
    area: number | null
    valorBase: Decimal | null
    status: string | null
    chave: string | null
  }

  export type LoteMaxAggregateOutputType = {
    id: number | null
    numero: string | null
    quadra: string | null
    loteamento: string | null
    area: number | null
    valorBase: Decimal | null
    status: string | null
    chave: string | null
  }

  export type LoteCountAggregateOutputType = {
    id: number
    numero: number
    quadra: number
    loteamento: number
    area: number
    valorBase: number
    status: number
    chave: number
    _all: number
  }


  export type LoteAvgAggregateInputType = {
    id?: true
    area?: true
    valorBase?: true
  }

  export type LoteSumAggregateInputType = {
    id?: true
    area?: true
    valorBase?: true
  }

  export type LoteMinAggregateInputType = {
    id?: true
    numero?: true
    quadra?: true
    loteamento?: true
    area?: true
    valorBase?: true
    status?: true
    chave?: true
  }

  export type LoteMaxAggregateInputType = {
    id?: true
    numero?: true
    quadra?: true
    loteamento?: true
    area?: true
    valorBase?: true
    status?: true
    chave?: true
  }

  export type LoteCountAggregateInputType = {
    id?: true
    numero?: true
    quadra?: true
    loteamento?: true
    area?: true
    valorBase?: true
    status?: true
    chave?: true
    _all?: true
  }

  export type LoteAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lote to aggregate.
     */
    where?: LoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lotes to fetch.
     */
    orderBy?: Enumerable<LoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lotes
    **/
    _count?: true | LoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoteMaxAggregateInputType
  }

  export type GetLoteAggregateType<T extends LoteAggregateArgs> = {
        [P in keyof T & keyof AggregateLote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLote[P]>
      : GetScalarType<T[P], AggregateLote[P]>
  }




  export type LoteGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: LoteWhereInput
    orderBy?: Enumerable<LoteOrderByWithAggregationInput>
    by: LoteScalarFieldEnum[]
    having?: LoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoteCountAggregateInputType | true
    _avg?: LoteAvgAggregateInputType
    _sum?: LoteSumAggregateInputType
    _min?: LoteMinAggregateInputType
    _max?: LoteMaxAggregateInputType
  }


  export type LoteGroupByOutputType = {
    id: number
    numero: string
    quadra: string
    loteamento: string
    area: number
    valorBase: Decimal
    status: string
    chave: string | null
    _count: LoteCountAggregateOutputType | null
    _avg: LoteAvgAggregateOutputType | null
    _sum: LoteSumAggregateOutputType | null
    _min: LoteMinAggregateOutputType | null
    _max: LoteMaxAggregateOutputType | null
  }

  type GetLoteGroupByPayload<T extends LoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoteGroupByOutputType[P]>
            : GetScalarType<T[P], LoteGroupByOutputType[P]>
        }
      >
    >


  export type LoteSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numero?: boolean
    quadra?: boolean
    loteamento?: boolean
    area?: boolean
    valorBase?: boolean
    status?: boolean
    chave?: boolean
    contratos?: boolean | Lote$contratosArgs<ExtArgs>
    _count?: boolean | LoteCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["lote"]>

  export type LoteSelectScalar = {
    id?: boolean
    numero?: boolean
    quadra?: boolean
    loteamento?: boolean
    area?: boolean
    valorBase?: boolean
    status?: boolean
    chave?: boolean
  }

  export type LoteInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    contratos?: boolean | Lote$contratosArgs<ExtArgs>
    _count?: boolean | LoteCountOutputTypeArgs<ExtArgs>
  }


  type LoteGetPayload<S extends boolean | null | undefined | LoteArgs> = $Types.GetResult<LotePayload, S>

  type LoteCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<LoteFindManyArgs, 'select' | 'include'> & {
      select?: LoteCountAggregateInputType | true
    }

  export interface LoteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lote'], meta: { name: 'Lote' } }
    /**
     * Find zero or one Lote that matches the filter.
     * @param {LoteFindUniqueArgs} args - Arguments to find a Lote
     * @example
     * // Get one Lote
     * const lote = await prisma.lote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LoteFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LoteFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Lote'> extends True ? Prisma__LoteClient<$Types.GetResult<LotePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__LoteClient<$Types.GetResult<LotePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Lote that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LoteFindUniqueOrThrowArgs} args - Arguments to find a Lote
     * @example
     * // Get one Lote
     * const lote = await prisma.lote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LoteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LoteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LoteClient<$Types.GetResult<LotePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Lote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoteFindFirstArgs} args - Arguments to find a Lote
     * @example
     * // Get one Lote
     * const lote = await prisma.lote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LoteFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LoteFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Lote'> extends True ? Prisma__LoteClient<$Types.GetResult<LotePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__LoteClient<$Types.GetResult<LotePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Lote that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoteFindFirstOrThrowArgs} args - Arguments to find a Lote
     * @example
     * // Get one Lote
     * const lote = await prisma.lote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LoteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LoteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LoteClient<$Types.GetResult<LotePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Lotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lotes
     * const lotes = await prisma.lote.findMany()
     * 
     * // Get first 10 Lotes
     * const lotes = await prisma.lote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const loteWithIdOnly = await prisma.lote.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LoteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LoteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<LotePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Lote.
     * @param {LoteCreateArgs} args - Arguments to create a Lote.
     * @example
     * // Create one Lote
     * const Lote = await prisma.lote.create({
     *   data: {
     *     // ... data to create a Lote
     *   }
     * })
     * 
    **/
    create<T extends LoteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LoteCreateArgs<ExtArgs>>
    ): Prisma__LoteClient<$Types.GetResult<LotePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Lotes.
     *     @param {LoteCreateManyArgs} args - Arguments to create many Lotes.
     *     @example
     *     // Create many Lotes
     *     const lote = await prisma.lote.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LoteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LoteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Lote.
     * @param {LoteDeleteArgs} args - Arguments to delete one Lote.
     * @example
     * // Delete one Lote
     * const Lote = await prisma.lote.delete({
     *   where: {
     *     // ... filter to delete one Lote
     *   }
     * })
     * 
    **/
    delete<T extends LoteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LoteDeleteArgs<ExtArgs>>
    ): Prisma__LoteClient<$Types.GetResult<LotePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Lote.
     * @param {LoteUpdateArgs} args - Arguments to update one Lote.
     * @example
     * // Update one Lote
     * const lote = await prisma.lote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LoteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LoteUpdateArgs<ExtArgs>>
    ): Prisma__LoteClient<$Types.GetResult<LotePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Lotes.
     * @param {LoteDeleteManyArgs} args - Arguments to filter Lotes to delete.
     * @example
     * // Delete a few Lotes
     * const { count } = await prisma.lote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LoteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LoteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lotes
     * const lote = await prisma.lote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LoteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LoteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Lote.
     * @param {LoteUpsertArgs} args - Arguments to update or create a Lote.
     * @example
     * // Update or create a Lote
     * const lote = await prisma.lote.upsert({
     *   create: {
     *     // ... data to create a Lote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lote we want to update
     *   }
     * })
    **/
    upsert<T extends LoteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LoteUpsertArgs<ExtArgs>>
    ): Prisma__LoteClient<$Types.GetResult<LotePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Lotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoteCountArgs} args - Arguments to filter Lotes to count.
     * @example
     * // Count the number of Lotes
     * const count = await prisma.lote.count({
     *   where: {
     *     // ... the filter for the Lotes we want to count
     *   }
     * })
    **/
    count<T extends LoteCountArgs>(
      args?: Subset<T, LoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoteAggregateArgs>(args: Subset<T, LoteAggregateArgs>): Prisma.PrismaPromise<GetLoteAggregateType<T>>

    /**
     * Group by Lote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoteGroupByArgs['orderBy'] }
        : { orderBy?: LoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Lote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LoteClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    contratos<T extends Lote$contratosArgs<ExtArgs> = {}>(args?: Subset<T, Lote$contratosArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ContratoPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Lote base type for findUnique actions
   */
  export type LoteFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoteInclude<ExtArgs> | null
    /**
     * Filter, which Lote to fetch.
     */
    where: LoteWhereUniqueInput
  }

  /**
   * Lote findUnique
   */
  export interface LoteFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends LoteFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Lote findUniqueOrThrow
   */
  export type LoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoteInclude<ExtArgs> | null
    /**
     * Filter, which Lote to fetch.
     */
    where: LoteWhereUniqueInput
  }


  /**
   * Lote base type for findFirst actions
   */
  export type LoteFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoteInclude<ExtArgs> | null
    /**
     * Filter, which Lote to fetch.
     */
    where?: LoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lotes to fetch.
     */
    orderBy?: Enumerable<LoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lotes.
     */
    cursor?: LoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lotes.
     */
    distinct?: Enumerable<LoteScalarFieldEnum>
  }

  /**
   * Lote findFirst
   */
  export interface LoteFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends LoteFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Lote findFirstOrThrow
   */
  export type LoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoteInclude<ExtArgs> | null
    /**
     * Filter, which Lote to fetch.
     */
    where?: LoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lotes to fetch.
     */
    orderBy?: Enumerable<LoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lotes.
     */
    cursor?: LoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lotes.
     */
    distinct?: Enumerable<LoteScalarFieldEnum>
  }


  /**
   * Lote findMany
   */
  export type LoteFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoteInclude<ExtArgs> | null
    /**
     * Filter, which Lotes to fetch.
     */
    where?: LoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lotes to fetch.
     */
    orderBy?: Enumerable<LoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lotes.
     */
    cursor?: LoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lotes.
     */
    skip?: number
    distinct?: Enumerable<LoteScalarFieldEnum>
  }


  /**
   * Lote create
   */
  export type LoteCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Lote.
     */
    data: XOR<LoteCreateInput, LoteUncheckedCreateInput>
  }


  /**
   * Lote createMany
   */
  export type LoteCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lotes.
     */
    data: Enumerable<LoteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Lote update
   */
  export type LoteUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Lote.
     */
    data: XOR<LoteUpdateInput, LoteUncheckedUpdateInput>
    /**
     * Choose, which Lote to update.
     */
    where: LoteWhereUniqueInput
  }


  /**
   * Lote updateMany
   */
  export type LoteUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lotes.
     */
    data: XOR<LoteUpdateManyMutationInput, LoteUncheckedUpdateManyInput>
    /**
     * Filter which Lotes to update
     */
    where?: LoteWhereInput
  }


  /**
   * Lote upsert
   */
  export type LoteUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Lote to update in case it exists.
     */
    where: LoteWhereUniqueInput
    /**
     * In case the Lote found by the `where` argument doesn't exist, create a new Lote with this data.
     */
    create: XOR<LoteCreateInput, LoteUncheckedCreateInput>
    /**
     * In case the Lote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LoteUpdateInput, LoteUncheckedUpdateInput>
  }


  /**
   * Lote delete
   */
  export type LoteDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoteInclude<ExtArgs> | null
    /**
     * Filter which Lote to delete.
     */
    where: LoteWhereUniqueInput
  }


  /**
   * Lote deleteMany
   */
  export type LoteDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lotes to delete
     */
    where?: LoteWhereInput
  }


  /**
   * Lote.contratos
   */
  export type Lote$contratosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
    where?: ContratoWhereInput
    orderBy?: Enumerable<ContratoOrderByWithRelationInput>
    cursor?: ContratoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ContratoScalarFieldEnum>
  }


  /**
   * Lote without action
   */
  export type LoteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lote
     */
    select?: LoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LoteInclude<ExtArgs> | null
  }



  /**
   * Model Contrato
   */


  export type AggregateContrato = {
    _count: ContratoCountAggregateOutputType | null
    _avg: ContratoAvgAggregateOutputType | null
    _sum: ContratoSumAggregateOutputType | null
    _min: ContratoMinAggregateOutputType | null
    _max: ContratoMaxAggregateOutputType | null
  }

  export type ContratoAvgAggregateOutputType = {
    id: number | null
    clienteId: number | null
    loteId: number | null
    valorPrestacao: Decimal | null
    valorTotal: Decimal | null
    valorEntrada: Decimal | null
    numeroParcelas: number | null
    dataVencimento: number | null
    parcelasPagas: number | null
  }

  export type ContratoSumAggregateOutputType = {
    id: number | null
    clienteId: number | null
    loteId: number | null
    valorPrestacao: Decimal | null
    valorTotal: Decimal | null
    valorEntrada: Decimal | null
    numeroParcelas: number | null
    dataVencimento: number | null
    parcelasPagas: number | null
  }

  export type ContratoMinAggregateOutputType = {
    id: number | null
    clienteId: number | null
    loteId: number | null
    chave: string | null
    numeroContrato: string | null
    dataEmissao: Date | null
    dataPrimeiraPrestacao: Date | null
    valorPrestacao: Decimal | null
    dataInicio: Date | null
    dataFim: Date | null
    valorTotal: Decimal | null
    valorEntrada: Decimal | null
    numeroParcelas: number | null
    dataVencimento: number | null
    clausulas: string | null
    status: string | null
    dataCriacao: Date | null
    parcelasPagas: number | null
  }

  export type ContratoMaxAggregateOutputType = {
    id: number | null
    clienteId: number | null
    loteId: number | null
    chave: string | null
    numeroContrato: string | null
    dataEmissao: Date | null
    dataPrimeiraPrestacao: Date | null
    valorPrestacao: Decimal | null
    dataInicio: Date | null
    dataFim: Date | null
    valorTotal: Decimal | null
    valorEntrada: Decimal | null
    numeroParcelas: number | null
    dataVencimento: number | null
    clausulas: string | null
    status: string | null
    dataCriacao: Date | null
    parcelasPagas: number | null
  }

  export type ContratoCountAggregateOutputType = {
    id: number
    clienteId: number
    loteId: number
    chave: number
    numeroContrato: number
    dataEmissao: number
    dataPrimeiraPrestacao: number
    valorPrestacao: number
    dataInicio: number
    dataFim: number
    valorTotal: number
    valorEntrada: number
    numeroParcelas: number
    dataVencimento: number
    clausulas: number
    status: number
    dataCriacao: number
    parcelasPagas: number
    ultimoReajuste: number
    _all: number
  }


  export type ContratoAvgAggregateInputType = {
    id?: true
    clienteId?: true
    loteId?: true
    valorPrestacao?: true
    valorTotal?: true
    valorEntrada?: true
    numeroParcelas?: true
    dataVencimento?: true
    parcelasPagas?: true
  }

  export type ContratoSumAggregateInputType = {
    id?: true
    clienteId?: true
    loteId?: true
    valorPrestacao?: true
    valorTotal?: true
    valorEntrada?: true
    numeroParcelas?: true
    dataVencimento?: true
    parcelasPagas?: true
  }

  export type ContratoMinAggregateInputType = {
    id?: true
    clienteId?: true
    loteId?: true
    chave?: true
    numeroContrato?: true
    dataEmissao?: true
    dataPrimeiraPrestacao?: true
    valorPrestacao?: true
    dataInicio?: true
    dataFim?: true
    valorTotal?: true
    valorEntrada?: true
    numeroParcelas?: true
    dataVencimento?: true
    clausulas?: true
    status?: true
    dataCriacao?: true
    parcelasPagas?: true
  }

  export type ContratoMaxAggregateInputType = {
    id?: true
    clienteId?: true
    loteId?: true
    chave?: true
    numeroContrato?: true
    dataEmissao?: true
    dataPrimeiraPrestacao?: true
    valorPrestacao?: true
    dataInicio?: true
    dataFim?: true
    valorTotal?: true
    valorEntrada?: true
    numeroParcelas?: true
    dataVencimento?: true
    clausulas?: true
    status?: true
    dataCriacao?: true
    parcelasPagas?: true
  }

  export type ContratoCountAggregateInputType = {
    id?: true
    clienteId?: true
    loteId?: true
    chave?: true
    numeroContrato?: true
    dataEmissao?: true
    dataPrimeiraPrestacao?: true
    valorPrestacao?: true
    dataInicio?: true
    dataFim?: true
    valorTotal?: true
    valorEntrada?: true
    numeroParcelas?: true
    dataVencimento?: true
    clausulas?: true
    status?: true
    dataCriacao?: true
    parcelasPagas?: true
    ultimoReajuste?: true
    _all?: true
  }

  export type ContratoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contrato to aggregate.
     */
    where?: ContratoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contratoes to fetch.
     */
    orderBy?: Enumerable<ContratoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContratoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contratoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contratoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contratoes
    **/
    _count?: true | ContratoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContratoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContratoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContratoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContratoMaxAggregateInputType
  }

  export type GetContratoAggregateType<T extends ContratoAggregateArgs> = {
        [P in keyof T & keyof AggregateContrato]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContrato[P]>
      : GetScalarType<T[P], AggregateContrato[P]>
  }




  export type ContratoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ContratoWhereInput
    orderBy?: Enumerable<ContratoOrderByWithAggregationInput>
    by: ContratoScalarFieldEnum[]
    having?: ContratoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContratoCountAggregateInputType | true
    _avg?: ContratoAvgAggregateInputType
    _sum?: ContratoSumAggregateInputType
    _min?: ContratoMinAggregateInputType
    _max?: ContratoMaxAggregateInputType
  }


  export type ContratoGroupByOutputType = {
    id: number
    clienteId: number
    loteId: number
    chave: string | null
    numeroContrato: string | null
    dataEmissao: Date | null
    dataPrimeiraPrestacao: Date | null
    valorPrestacao: Decimal | null
    dataInicio: Date
    dataFim: Date
    valorTotal: Decimal
    valorEntrada: Decimal
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status: string
    dataCriacao: Date
    parcelasPagas: number
    ultimoReajuste: JsonValue | null
    _count: ContratoCountAggregateOutputType | null
    _avg: ContratoAvgAggregateOutputType | null
    _sum: ContratoSumAggregateOutputType | null
    _min: ContratoMinAggregateOutputType | null
    _max: ContratoMaxAggregateOutputType | null
  }

  type GetContratoGroupByPayload<T extends ContratoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ContratoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContratoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContratoGroupByOutputType[P]>
            : GetScalarType<T[P], ContratoGroupByOutputType[P]>
        }
      >
    >


  export type ContratoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteId?: boolean
    loteId?: boolean
    chave?: boolean
    numeroContrato?: boolean
    dataEmissao?: boolean
    dataPrimeiraPrestacao?: boolean
    valorPrestacao?: boolean
    dataInicio?: boolean
    dataFim?: boolean
    valorTotal?: boolean
    valorEntrada?: boolean
    numeroParcelas?: boolean
    dataVencimento?: boolean
    clausulas?: boolean
    status?: boolean
    dataCriacao?: boolean
    parcelasPagas?: boolean
    ultimoReajuste?: boolean
    cliente?: boolean | ClienteArgs<ExtArgs>
    lote?: boolean | LoteArgs<ExtArgs>
    boletos?: boolean | Contrato$boletosArgs<ExtArgs>
    reajustes?: boolean | Contrato$reajustesArgs<ExtArgs>
    aditivos?: boolean | Contrato$aditivosArgs<ExtArgs>
    distratos?: boolean | Contrato$distratosArgs<ExtArgs>
    quitacoes?: boolean | Contrato$quitacoesArgs<ExtArgs>
    parcelas?: boolean | Contrato$parcelasArgs<ExtArgs>
    _count?: boolean | ContratoCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["contrato"]>

  export type ContratoSelectScalar = {
    id?: boolean
    clienteId?: boolean
    loteId?: boolean
    chave?: boolean
    numeroContrato?: boolean
    dataEmissao?: boolean
    dataPrimeiraPrestacao?: boolean
    valorPrestacao?: boolean
    dataInicio?: boolean
    dataFim?: boolean
    valorTotal?: boolean
    valorEntrada?: boolean
    numeroParcelas?: boolean
    dataVencimento?: boolean
    clausulas?: boolean
    status?: boolean
    dataCriacao?: boolean
    parcelasPagas?: boolean
    ultimoReajuste?: boolean
  }

  export type ContratoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteArgs<ExtArgs>
    lote?: boolean | LoteArgs<ExtArgs>
    boletos?: boolean | Contrato$boletosArgs<ExtArgs>
    reajustes?: boolean | Contrato$reajustesArgs<ExtArgs>
    aditivos?: boolean | Contrato$aditivosArgs<ExtArgs>
    distratos?: boolean | Contrato$distratosArgs<ExtArgs>
    quitacoes?: boolean | Contrato$quitacoesArgs<ExtArgs>
    parcelas?: boolean | Contrato$parcelasArgs<ExtArgs>
    _count?: boolean | ContratoCountOutputTypeArgs<ExtArgs>
  }


  type ContratoGetPayload<S extends boolean | null | undefined | ContratoArgs> = $Types.GetResult<ContratoPayload, S>

  type ContratoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ContratoFindManyArgs, 'select' | 'include'> & {
      select?: ContratoCountAggregateInputType | true
    }

  export interface ContratoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contrato'], meta: { name: 'Contrato' } }
    /**
     * Find zero or one Contrato that matches the filter.
     * @param {ContratoFindUniqueArgs} args - Arguments to find a Contrato
     * @example
     * // Get one Contrato
     * const contrato = await prisma.contrato.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContratoFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ContratoFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Contrato'> extends True ? Prisma__ContratoClient<$Types.GetResult<ContratoPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ContratoClient<$Types.GetResult<ContratoPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Contrato that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ContratoFindUniqueOrThrowArgs} args - Arguments to find a Contrato
     * @example
     * // Get one Contrato
     * const contrato = await prisma.contrato.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ContratoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContratoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ContratoClient<$Types.GetResult<ContratoPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Contrato that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoFindFirstArgs} args - Arguments to find a Contrato
     * @example
     * // Get one Contrato
     * const contrato = await prisma.contrato.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContratoFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ContratoFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Contrato'> extends True ? Prisma__ContratoClient<$Types.GetResult<ContratoPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ContratoClient<$Types.GetResult<ContratoPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Contrato that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoFindFirstOrThrowArgs} args - Arguments to find a Contrato
     * @example
     * // Get one Contrato
     * const contrato = await prisma.contrato.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ContratoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContratoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ContratoClient<$Types.GetResult<ContratoPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Contratoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contratoes
     * const contratoes = await prisma.contrato.findMany()
     * 
     * // Get first 10 Contratoes
     * const contratoes = await prisma.contrato.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contratoWithIdOnly = await prisma.contrato.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ContratoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContratoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ContratoPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Contrato.
     * @param {ContratoCreateArgs} args - Arguments to create a Contrato.
     * @example
     * // Create one Contrato
     * const Contrato = await prisma.contrato.create({
     *   data: {
     *     // ... data to create a Contrato
     *   }
     * })
     * 
    **/
    create<T extends ContratoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ContratoCreateArgs<ExtArgs>>
    ): Prisma__ContratoClient<$Types.GetResult<ContratoPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Contratoes.
     *     @param {ContratoCreateManyArgs} args - Arguments to create many Contratoes.
     *     @example
     *     // Create many Contratoes
     *     const contrato = await prisma.contrato.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ContratoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContratoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Contrato.
     * @param {ContratoDeleteArgs} args - Arguments to delete one Contrato.
     * @example
     * // Delete one Contrato
     * const Contrato = await prisma.contrato.delete({
     *   where: {
     *     // ... filter to delete one Contrato
     *   }
     * })
     * 
    **/
    delete<T extends ContratoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ContratoDeleteArgs<ExtArgs>>
    ): Prisma__ContratoClient<$Types.GetResult<ContratoPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Contrato.
     * @param {ContratoUpdateArgs} args - Arguments to update one Contrato.
     * @example
     * // Update one Contrato
     * const contrato = await prisma.contrato.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContratoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ContratoUpdateArgs<ExtArgs>>
    ): Prisma__ContratoClient<$Types.GetResult<ContratoPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Contratoes.
     * @param {ContratoDeleteManyArgs} args - Arguments to filter Contratoes to delete.
     * @example
     * // Delete a few Contratoes
     * const { count } = await prisma.contrato.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContratoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContratoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contratoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contratoes
     * const contrato = await prisma.contrato.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContratoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ContratoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contrato.
     * @param {ContratoUpsertArgs} args - Arguments to update or create a Contrato.
     * @example
     * // Update or create a Contrato
     * const contrato = await prisma.contrato.upsert({
     *   create: {
     *     // ... data to create a Contrato
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contrato we want to update
     *   }
     * })
    **/
    upsert<T extends ContratoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ContratoUpsertArgs<ExtArgs>>
    ): Prisma__ContratoClient<$Types.GetResult<ContratoPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Contratoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoCountArgs} args - Arguments to filter Contratoes to count.
     * @example
     * // Count the number of Contratoes
     * const count = await prisma.contrato.count({
     *   where: {
     *     // ... the filter for the Contratoes we want to count
     *   }
     * })
    **/
    count<T extends ContratoCountArgs>(
      args?: Subset<T, ContratoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContratoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contrato.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContratoAggregateArgs>(args: Subset<T, ContratoAggregateArgs>): Prisma.PrismaPromise<GetContratoAggregateType<T>>

    /**
     * Group by Contrato.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContratoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContratoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContratoGroupByArgs['orderBy'] }
        : { orderBy?: ContratoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContratoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContratoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Contrato.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContratoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    cliente<T extends ClienteArgs<ExtArgs> = {}>(args?: Subset<T, ClienteArgs<ExtArgs>>): Prisma__ClienteClient<$Types.GetResult<ClientePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    lote<T extends LoteArgs<ExtArgs> = {}>(args?: Subset<T, LoteArgs<ExtArgs>>): Prisma__LoteClient<$Types.GetResult<LotePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    boletos<T extends Contrato$boletosArgs<ExtArgs> = {}>(args?: Subset<T, Contrato$boletosArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<BoletoPayload<ExtArgs>, T, 'findMany', never>| Null>;

    reajustes<T extends Contrato$reajustesArgs<ExtArgs> = {}>(args?: Subset<T, Contrato$reajustesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ReajustePayload<ExtArgs>, T, 'findMany', never>| Null>;

    aditivos<T extends Contrato$aditivosArgs<ExtArgs> = {}>(args?: Subset<T, Contrato$aditivosArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<AditivoPayload<ExtArgs>, T, 'findMany', never>| Null>;

    distratos<T extends Contrato$distratosArgs<ExtArgs> = {}>(args?: Subset<T, Contrato$distratosArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<DistratoPayload<ExtArgs>, T, 'findMany', never>| Null>;

    quitacoes<T extends Contrato$quitacoesArgs<ExtArgs> = {}>(args?: Subset<T, Contrato$quitacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<QuitacaoPayload<ExtArgs>, T, 'findMany', never>| Null>;

    parcelas<T extends Contrato$parcelasArgs<ExtArgs> = {}>(args?: Subset<T, Contrato$parcelasArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ParcelaPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Contrato base type for findUnique actions
   */
  export type ContratoFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
    /**
     * Filter, which Contrato to fetch.
     */
    where: ContratoWhereUniqueInput
  }

  /**
   * Contrato findUnique
   */
  export interface ContratoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ContratoFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Contrato findUniqueOrThrow
   */
  export type ContratoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
    /**
     * Filter, which Contrato to fetch.
     */
    where: ContratoWhereUniqueInput
  }


  /**
   * Contrato base type for findFirst actions
   */
  export type ContratoFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
    /**
     * Filter, which Contrato to fetch.
     */
    where?: ContratoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contratoes to fetch.
     */
    orderBy?: Enumerable<ContratoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contratoes.
     */
    cursor?: ContratoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contratoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contratoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contratoes.
     */
    distinct?: Enumerable<ContratoScalarFieldEnum>
  }

  /**
   * Contrato findFirst
   */
  export interface ContratoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ContratoFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Contrato findFirstOrThrow
   */
  export type ContratoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
    /**
     * Filter, which Contrato to fetch.
     */
    where?: ContratoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contratoes to fetch.
     */
    orderBy?: Enumerable<ContratoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contratoes.
     */
    cursor?: ContratoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contratoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contratoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contratoes.
     */
    distinct?: Enumerable<ContratoScalarFieldEnum>
  }


  /**
   * Contrato findMany
   */
  export type ContratoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
    /**
     * Filter, which Contratoes to fetch.
     */
    where?: ContratoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contratoes to fetch.
     */
    orderBy?: Enumerable<ContratoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contratoes.
     */
    cursor?: ContratoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contratoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contratoes.
     */
    skip?: number
    distinct?: Enumerable<ContratoScalarFieldEnum>
  }


  /**
   * Contrato create
   */
  export type ContratoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
    /**
     * The data needed to create a Contrato.
     */
    data: XOR<ContratoCreateInput, ContratoUncheckedCreateInput>
  }


  /**
   * Contrato createMany
   */
  export type ContratoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contratoes.
     */
    data: Enumerable<ContratoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Contrato update
   */
  export type ContratoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
    /**
     * The data needed to update a Contrato.
     */
    data: XOR<ContratoUpdateInput, ContratoUncheckedUpdateInput>
    /**
     * Choose, which Contrato to update.
     */
    where: ContratoWhereUniqueInput
  }


  /**
   * Contrato updateMany
   */
  export type ContratoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contratoes.
     */
    data: XOR<ContratoUpdateManyMutationInput, ContratoUncheckedUpdateManyInput>
    /**
     * Filter which Contratoes to update
     */
    where?: ContratoWhereInput
  }


  /**
   * Contrato upsert
   */
  export type ContratoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
    /**
     * The filter to search for the Contrato to update in case it exists.
     */
    where: ContratoWhereUniqueInput
    /**
     * In case the Contrato found by the `where` argument doesn't exist, create a new Contrato with this data.
     */
    create: XOR<ContratoCreateInput, ContratoUncheckedCreateInput>
    /**
     * In case the Contrato was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContratoUpdateInput, ContratoUncheckedUpdateInput>
  }


  /**
   * Contrato delete
   */
  export type ContratoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
    /**
     * Filter which Contrato to delete.
     */
    where: ContratoWhereUniqueInput
  }


  /**
   * Contrato deleteMany
   */
  export type ContratoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contratoes to delete
     */
    where?: ContratoWhereInput
  }


  /**
   * Contrato.boletos
   */
  export type Contrato$boletosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boleto
     */
    select?: BoletoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoletoInclude<ExtArgs> | null
    where?: BoletoWhereInput
    orderBy?: Enumerable<BoletoOrderByWithRelationInput>
    cursor?: BoletoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BoletoScalarFieldEnum>
  }


  /**
   * Contrato.reajustes
   */
  export type Contrato$reajustesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reajuste
     */
    select?: ReajusteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReajusteInclude<ExtArgs> | null
    where?: ReajusteWhereInput
    orderBy?: Enumerable<ReajusteOrderByWithRelationInput>
    cursor?: ReajusteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ReajusteScalarFieldEnum>
  }


  /**
   * Contrato.aditivos
   */
  export type Contrato$aditivosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aditivo
     */
    select?: AditivoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AditivoInclude<ExtArgs> | null
    where?: AditivoWhereInput
    orderBy?: Enumerable<AditivoOrderByWithRelationInput>
    cursor?: AditivoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AditivoScalarFieldEnum>
  }


  /**
   * Contrato.distratos
   */
  export type Contrato$distratosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Distrato
     */
    select?: DistratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DistratoInclude<ExtArgs> | null
    where?: DistratoWhereInput
    orderBy?: Enumerable<DistratoOrderByWithRelationInput>
    cursor?: DistratoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DistratoScalarFieldEnum>
  }


  /**
   * Contrato.quitacoes
   */
  export type Contrato$quitacoesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quitacao
     */
    select?: QuitacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuitacaoInclude<ExtArgs> | null
    where?: QuitacaoWhereInput
    orderBy?: Enumerable<QuitacaoOrderByWithRelationInput>
    cursor?: QuitacaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<QuitacaoScalarFieldEnum>
  }


  /**
   * Contrato.parcelas
   */
  export type Contrato$parcelasArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParcelaInclude<ExtArgs> | null
    where?: ParcelaWhereInput
    orderBy?: Enumerable<ParcelaOrderByWithRelationInput>
    cursor?: ParcelaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ParcelaScalarFieldEnum>
  }


  /**
   * Contrato without action
   */
  export type ContratoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contrato
     */
    select?: ContratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContratoInclude<ExtArgs> | null
  }



  /**
   * Model Boleto
   */


  export type AggregateBoleto = {
    _count: BoletoCountAggregateOutputType | null
    _avg: BoletoAvgAggregateOutputType | null
    _sum: BoletoSumAggregateOutputType | null
    _min: BoletoMinAggregateOutputType | null
    _max: BoletoMaxAggregateOutputType | null
  }

  export type BoletoAvgAggregateOutputType = {
    id: number | null
    clienteId: number | null
    contratoId: number | null
    valor: Decimal | null
    numeroParcela: number | null
    valorPago: Decimal | null
    parcelaId: number | null
  }

  export type BoletoSumAggregateOutputType = {
    id: number | null
    clienteId: number | null
    contratoId: number | null
    valor: Decimal | null
    numeroParcela: number | null
    valorPago: Decimal | null
    parcelaId: number | null
  }

  export type BoletoMinAggregateOutputType = {
    id: number | null
    clienteId: number | null
    clienteNome: string | null
    contratoId: number | null
    valor: Decimal | null
    dataVencimento: Date | null
    numeroParcela: number | null
    descricao: string | null
    nossoNumero: string | null
    linhaDigitavel: string | null
    codigoBarras: string | null
    pdfUrl: string | null
    dataGeracao: Date | null
    status: string | null
    dataPagamento: Date | null
    valorPago: Decimal | null
    formaPagamento: string | null
    dataCancelamento: Date | null
    comprovante: string | null
    parcelaId: number | null
  }

  export type BoletoMaxAggregateOutputType = {
    id: number | null
    clienteId: number | null
    clienteNome: string | null
    contratoId: number | null
    valor: Decimal | null
    dataVencimento: Date | null
    numeroParcela: number | null
    descricao: string | null
    nossoNumero: string | null
    linhaDigitavel: string | null
    codigoBarras: string | null
    pdfUrl: string | null
    dataGeracao: Date | null
    status: string | null
    dataPagamento: Date | null
    valorPago: Decimal | null
    formaPagamento: string | null
    dataCancelamento: Date | null
    comprovante: string | null
    parcelaId: number | null
  }

  export type BoletoCountAggregateOutputType = {
    id: number
    clienteId: number
    clienteNome: number
    contratoId: number
    valor: number
    dataVencimento: number
    numeroParcela: number
    descricao: number
    nossoNumero: number
    linhaDigitavel: number
    codigoBarras: number
    pdfUrl: number
    dataGeracao: number
    status: number
    dataPagamento: number
    valorPago: number
    formaPagamento: number
    dataCancelamento: number
    comprovante: number
    parcelaId: number
    _all: number
  }


  export type BoletoAvgAggregateInputType = {
    id?: true
    clienteId?: true
    contratoId?: true
    valor?: true
    numeroParcela?: true
    valorPago?: true
    parcelaId?: true
  }

  export type BoletoSumAggregateInputType = {
    id?: true
    clienteId?: true
    contratoId?: true
    valor?: true
    numeroParcela?: true
    valorPago?: true
    parcelaId?: true
  }

  export type BoletoMinAggregateInputType = {
    id?: true
    clienteId?: true
    clienteNome?: true
    contratoId?: true
    valor?: true
    dataVencimento?: true
    numeroParcela?: true
    descricao?: true
    nossoNumero?: true
    linhaDigitavel?: true
    codigoBarras?: true
    pdfUrl?: true
    dataGeracao?: true
    status?: true
    dataPagamento?: true
    valorPago?: true
    formaPagamento?: true
    dataCancelamento?: true
    comprovante?: true
    parcelaId?: true
  }

  export type BoletoMaxAggregateInputType = {
    id?: true
    clienteId?: true
    clienteNome?: true
    contratoId?: true
    valor?: true
    dataVencimento?: true
    numeroParcela?: true
    descricao?: true
    nossoNumero?: true
    linhaDigitavel?: true
    codigoBarras?: true
    pdfUrl?: true
    dataGeracao?: true
    status?: true
    dataPagamento?: true
    valorPago?: true
    formaPagamento?: true
    dataCancelamento?: true
    comprovante?: true
    parcelaId?: true
  }

  export type BoletoCountAggregateInputType = {
    id?: true
    clienteId?: true
    clienteNome?: true
    contratoId?: true
    valor?: true
    dataVencimento?: true
    numeroParcela?: true
    descricao?: true
    nossoNumero?: true
    linhaDigitavel?: true
    codigoBarras?: true
    pdfUrl?: true
    dataGeracao?: true
    status?: true
    dataPagamento?: true
    valorPago?: true
    formaPagamento?: true
    dataCancelamento?: true
    comprovante?: true
    parcelaId?: true
    _all?: true
  }

  export type BoletoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Boleto to aggregate.
     */
    where?: BoletoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boletos to fetch.
     */
    orderBy?: Enumerable<BoletoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BoletoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boletos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boletos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Boletos
    **/
    _count?: true | BoletoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BoletoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BoletoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BoletoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BoletoMaxAggregateInputType
  }

  export type GetBoletoAggregateType<T extends BoletoAggregateArgs> = {
        [P in keyof T & keyof AggregateBoleto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBoleto[P]>
      : GetScalarType<T[P], AggregateBoleto[P]>
  }




  export type BoletoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: BoletoWhereInput
    orderBy?: Enumerable<BoletoOrderByWithAggregationInput>
    by: BoletoScalarFieldEnum[]
    having?: BoletoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BoletoCountAggregateInputType | true
    _avg?: BoletoAvgAggregateInputType
    _sum?: BoletoSumAggregateInputType
    _min?: BoletoMinAggregateInputType
    _max?: BoletoMaxAggregateInputType
  }


  export type BoletoGroupByOutputType = {
    id: number
    clienteId: number
    clienteNome: string
    contratoId: number
    valor: Decimal
    dataVencimento: Date
    numeroParcela: number
    descricao: string
    nossoNumero: string
    linhaDigitavel: string
    codigoBarras: string
    pdfUrl: string
    dataGeracao: Date
    status: string
    dataPagamento: Date | null
    valorPago: Decimal | null
    formaPagamento: string | null
    dataCancelamento: Date | null
    comprovante: string | null
    parcelaId: number | null
    _count: BoletoCountAggregateOutputType | null
    _avg: BoletoAvgAggregateOutputType | null
    _sum: BoletoSumAggregateOutputType | null
    _min: BoletoMinAggregateOutputType | null
    _max: BoletoMaxAggregateOutputType | null
  }

  type GetBoletoGroupByPayload<T extends BoletoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BoletoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BoletoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BoletoGroupByOutputType[P]>
            : GetScalarType<T[P], BoletoGroupByOutputType[P]>
        }
      >
    >


  export type BoletoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteId?: boolean
    clienteNome?: boolean
    contratoId?: boolean
    valor?: boolean
    dataVencimento?: boolean
    numeroParcela?: boolean
    descricao?: boolean
    nossoNumero?: boolean
    linhaDigitavel?: boolean
    codigoBarras?: boolean
    pdfUrl?: boolean
    dataGeracao?: boolean
    status?: boolean
    dataPagamento?: boolean
    valorPago?: boolean
    formaPagamento?: boolean
    dataCancelamento?: boolean
    comprovante?: boolean
    parcelaId?: boolean
    cliente?: boolean | ClienteArgs<ExtArgs>
    contrato?: boolean | ContratoArgs<ExtArgs>
    parcela?: boolean | ParcelaArgs<ExtArgs>
  }, ExtArgs["result"]["boleto"]>

  export type BoletoSelectScalar = {
    id?: boolean
    clienteId?: boolean
    clienteNome?: boolean
    contratoId?: boolean
    valor?: boolean
    dataVencimento?: boolean
    numeroParcela?: boolean
    descricao?: boolean
    nossoNumero?: boolean
    linhaDigitavel?: boolean
    codigoBarras?: boolean
    pdfUrl?: boolean
    dataGeracao?: boolean
    status?: boolean
    dataPagamento?: boolean
    valorPago?: boolean
    formaPagamento?: boolean
    dataCancelamento?: boolean
    comprovante?: boolean
    parcelaId?: boolean
  }

  export type BoletoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteArgs<ExtArgs>
    contrato?: boolean | ContratoArgs<ExtArgs>
    parcela?: boolean | ParcelaArgs<ExtArgs>
  }


  type BoletoGetPayload<S extends boolean | null | undefined | BoletoArgs> = $Types.GetResult<BoletoPayload, S>

  type BoletoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<BoletoFindManyArgs, 'select' | 'include'> & {
      select?: BoletoCountAggregateInputType | true
    }

  export interface BoletoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Boleto'], meta: { name: 'Boleto' } }
    /**
     * Find zero or one Boleto that matches the filter.
     * @param {BoletoFindUniqueArgs} args - Arguments to find a Boleto
     * @example
     * // Get one Boleto
     * const boleto = await prisma.boleto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BoletoFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BoletoFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Boleto'> extends True ? Prisma__BoletoClient<$Types.GetResult<BoletoPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__BoletoClient<$Types.GetResult<BoletoPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Boleto that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BoletoFindUniqueOrThrowArgs} args - Arguments to find a Boleto
     * @example
     * // Get one Boleto
     * const boleto = await prisma.boleto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BoletoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BoletoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BoletoClient<$Types.GetResult<BoletoPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Boleto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoletoFindFirstArgs} args - Arguments to find a Boleto
     * @example
     * // Get one Boleto
     * const boleto = await prisma.boleto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BoletoFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BoletoFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Boleto'> extends True ? Prisma__BoletoClient<$Types.GetResult<BoletoPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__BoletoClient<$Types.GetResult<BoletoPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Boleto that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoletoFindFirstOrThrowArgs} args - Arguments to find a Boleto
     * @example
     * // Get one Boleto
     * const boleto = await prisma.boleto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BoletoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BoletoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BoletoClient<$Types.GetResult<BoletoPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Boletos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoletoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Boletos
     * const boletos = await prisma.boleto.findMany()
     * 
     * // Get first 10 Boletos
     * const boletos = await prisma.boleto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const boletoWithIdOnly = await prisma.boleto.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BoletoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoletoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<BoletoPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Boleto.
     * @param {BoletoCreateArgs} args - Arguments to create a Boleto.
     * @example
     * // Create one Boleto
     * const Boleto = await prisma.boleto.create({
     *   data: {
     *     // ... data to create a Boleto
     *   }
     * })
     * 
    **/
    create<T extends BoletoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BoletoCreateArgs<ExtArgs>>
    ): Prisma__BoletoClient<$Types.GetResult<BoletoPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Boletos.
     *     @param {BoletoCreateManyArgs} args - Arguments to create many Boletos.
     *     @example
     *     // Create many Boletos
     *     const boleto = await prisma.boleto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BoletoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoletoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Boleto.
     * @param {BoletoDeleteArgs} args - Arguments to delete one Boleto.
     * @example
     * // Delete one Boleto
     * const Boleto = await prisma.boleto.delete({
     *   where: {
     *     // ... filter to delete one Boleto
     *   }
     * })
     * 
    **/
    delete<T extends BoletoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BoletoDeleteArgs<ExtArgs>>
    ): Prisma__BoletoClient<$Types.GetResult<BoletoPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Boleto.
     * @param {BoletoUpdateArgs} args - Arguments to update one Boleto.
     * @example
     * // Update one Boleto
     * const boleto = await prisma.boleto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BoletoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BoletoUpdateArgs<ExtArgs>>
    ): Prisma__BoletoClient<$Types.GetResult<BoletoPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Boletos.
     * @param {BoletoDeleteManyArgs} args - Arguments to filter Boletos to delete.
     * @example
     * // Delete a few Boletos
     * const { count } = await prisma.boleto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BoletoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoletoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Boletos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoletoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Boletos
     * const boleto = await prisma.boleto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BoletoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BoletoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Boleto.
     * @param {BoletoUpsertArgs} args - Arguments to update or create a Boleto.
     * @example
     * // Update or create a Boleto
     * const boleto = await prisma.boleto.upsert({
     *   create: {
     *     // ... data to create a Boleto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Boleto we want to update
     *   }
     * })
    **/
    upsert<T extends BoletoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BoletoUpsertArgs<ExtArgs>>
    ): Prisma__BoletoClient<$Types.GetResult<BoletoPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Boletos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoletoCountArgs} args - Arguments to filter Boletos to count.
     * @example
     * // Count the number of Boletos
     * const count = await prisma.boleto.count({
     *   where: {
     *     // ... the filter for the Boletos we want to count
     *   }
     * })
    **/
    count<T extends BoletoCountArgs>(
      args?: Subset<T, BoletoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BoletoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Boleto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoletoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BoletoAggregateArgs>(args: Subset<T, BoletoAggregateArgs>): Prisma.PrismaPromise<GetBoletoAggregateType<T>>

    /**
     * Group by Boleto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoletoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BoletoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BoletoGroupByArgs['orderBy'] }
        : { orderBy?: BoletoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BoletoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBoletoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Boleto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BoletoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    cliente<T extends ClienteArgs<ExtArgs> = {}>(args?: Subset<T, ClienteArgs<ExtArgs>>): Prisma__ClienteClient<$Types.GetResult<ClientePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    contrato<T extends ContratoArgs<ExtArgs> = {}>(args?: Subset<T, ContratoArgs<ExtArgs>>): Prisma__ContratoClient<$Types.GetResult<ContratoPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    parcela<T extends ParcelaArgs<ExtArgs> = {}>(args?: Subset<T, ParcelaArgs<ExtArgs>>): Prisma__ParcelaClient<$Types.GetResult<ParcelaPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Boleto base type for findUnique actions
   */
  export type BoletoFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boleto
     */
    select?: BoletoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoletoInclude<ExtArgs> | null
    /**
     * Filter, which Boleto to fetch.
     */
    where: BoletoWhereUniqueInput
  }

  /**
   * Boleto findUnique
   */
  export interface BoletoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends BoletoFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Boleto findUniqueOrThrow
   */
  export type BoletoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boleto
     */
    select?: BoletoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoletoInclude<ExtArgs> | null
    /**
     * Filter, which Boleto to fetch.
     */
    where: BoletoWhereUniqueInput
  }


  /**
   * Boleto base type for findFirst actions
   */
  export type BoletoFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boleto
     */
    select?: BoletoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoletoInclude<ExtArgs> | null
    /**
     * Filter, which Boleto to fetch.
     */
    where?: BoletoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boletos to fetch.
     */
    orderBy?: Enumerable<BoletoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Boletos.
     */
    cursor?: BoletoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boletos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boletos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Boletos.
     */
    distinct?: Enumerable<BoletoScalarFieldEnum>
  }

  /**
   * Boleto findFirst
   */
  export interface BoletoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends BoletoFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Boleto findFirstOrThrow
   */
  export type BoletoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boleto
     */
    select?: BoletoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoletoInclude<ExtArgs> | null
    /**
     * Filter, which Boleto to fetch.
     */
    where?: BoletoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boletos to fetch.
     */
    orderBy?: Enumerable<BoletoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Boletos.
     */
    cursor?: BoletoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boletos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boletos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Boletos.
     */
    distinct?: Enumerable<BoletoScalarFieldEnum>
  }


  /**
   * Boleto findMany
   */
  export type BoletoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boleto
     */
    select?: BoletoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoletoInclude<ExtArgs> | null
    /**
     * Filter, which Boletos to fetch.
     */
    where?: BoletoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boletos to fetch.
     */
    orderBy?: Enumerable<BoletoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Boletos.
     */
    cursor?: BoletoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boletos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boletos.
     */
    skip?: number
    distinct?: Enumerable<BoletoScalarFieldEnum>
  }


  /**
   * Boleto create
   */
  export type BoletoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boleto
     */
    select?: BoletoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoletoInclude<ExtArgs> | null
    /**
     * The data needed to create a Boleto.
     */
    data: XOR<BoletoCreateInput, BoletoUncheckedCreateInput>
  }


  /**
   * Boleto createMany
   */
  export type BoletoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Boletos.
     */
    data: Enumerable<BoletoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Boleto update
   */
  export type BoletoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boleto
     */
    select?: BoletoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoletoInclude<ExtArgs> | null
    /**
     * The data needed to update a Boleto.
     */
    data: XOR<BoletoUpdateInput, BoletoUncheckedUpdateInput>
    /**
     * Choose, which Boleto to update.
     */
    where: BoletoWhereUniqueInput
  }


  /**
   * Boleto updateMany
   */
  export type BoletoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Boletos.
     */
    data: XOR<BoletoUpdateManyMutationInput, BoletoUncheckedUpdateManyInput>
    /**
     * Filter which Boletos to update
     */
    where?: BoletoWhereInput
  }


  /**
   * Boleto upsert
   */
  export type BoletoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boleto
     */
    select?: BoletoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoletoInclude<ExtArgs> | null
    /**
     * The filter to search for the Boleto to update in case it exists.
     */
    where: BoletoWhereUniqueInput
    /**
     * In case the Boleto found by the `where` argument doesn't exist, create a new Boleto with this data.
     */
    create: XOR<BoletoCreateInput, BoletoUncheckedCreateInput>
    /**
     * In case the Boleto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BoletoUpdateInput, BoletoUncheckedUpdateInput>
  }


  /**
   * Boleto delete
   */
  export type BoletoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boleto
     */
    select?: BoletoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoletoInclude<ExtArgs> | null
    /**
     * Filter which Boleto to delete.
     */
    where: BoletoWhereUniqueInput
  }


  /**
   * Boleto deleteMany
   */
  export type BoletoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Boletos to delete
     */
    where?: BoletoWhereInput
  }


  /**
   * Boleto without action
   */
  export type BoletoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boleto
     */
    select?: BoletoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BoletoInclude<ExtArgs> | null
  }



  /**
   * Model Reajuste
   */


  export type AggregateReajuste = {
    _count: ReajusteCountAggregateOutputType | null
    _avg: ReajusteAvgAggregateOutputType | null
    _sum: ReajusteSumAggregateOutputType | null
    _min: ReajusteMinAggregateOutputType | null
    _max: ReajusteMaxAggregateOutputType | null
  }

  export type ReajusteAvgAggregateOutputType = {
    id: number | null
    contratoId: number | null
    parcelaReferencia: number | null
    valorOriginal: Decimal | null
    valorReajustado: Decimal | null
    indiceAplicado: Decimal | null
    percentualAdicional: Decimal | null
    reajusteTotal: Decimal | null
  }

  export type ReajusteSumAggregateOutputType = {
    id: number | null
    contratoId: number | null
    parcelaReferencia: number | null
    valorOriginal: Decimal | null
    valorReajustado: Decimal | null
    indiceAplicado: Decimal | null
    percentualAdicional: Decimal | null
    reajusteTotal: Decimal | null
  }

  export type ReajusteMinAggregateOutputType = {
    id: number | null
    contratoId: number | null
    parcelaReferencia: number | null
    valorOriginal: Decimal | null
    valorReajustado: Decimal | null
    indiceAplicado: Decimal | null
    indiceBase: string | null
    percentualAdicional: Decimal | null
    reajusteTotal: Decimal | null
    dataReferencia: Date | null
    dataAplicacao: Date | null
    status: string | null
    aplicado: boolean | null
  }

  export type ReajusteMaxAggregateOutputType = {
    id: number | null
    contratoId: number | null
    parcelaReferencia: number | null
    valorOriginal: Decimal | null
    valorReajustado: Decimal | null
    indiceAplicado: Decimal | null
    indiceBase: string | null
    percentualAdicional: Decimal | null
    reajusteTotal: Decimal | null
    dataReferencia: Date | null
    dataAplicacao: Date | null
    status: string | null
    aplicado: boolean | null
  }

  export type ReajusteCountAggregateOutputType = {
    id: number
    contratoId: number
    parcelaReferencia: number
    valorOriginal: number
    valorReajustado: number
    indiceAplicado: number
    indiceBase: number
    percentualAdicional: number
    reajusteTotal: number
    dataReferencia: number
    dataAplicacao: number
    status: number
    aplicado: number
    _all: number
  }


  export type ReajusteAvgAggregateInputType = {
    id?: true
    contratoId?: true
    parcelaReferencia?: true
    valorOriginal?: true
    valorReajustado?: true
    indiceAplicado?: true
    percentualAdicional?: true
    reajusteTotal?: true
  }

  export type ReajusteSumAggregateInputType = {
    id?: true
    contratoId?: true
    parcelaReferencia?: true
    valorOriginal?: true
    valorReajustado?: true
    indiceAplicado?: true
    percentualAdicional?: true
    reajusteTotal?: true
  }

  export type ReajusteMinAggregateInputType = {
    id?: true
    contratoId?: true
    parcelaReferencia?: true
    valorOriginal?: true
    valorReajustado?: true
    indiceAplicado?: true
    indiceBase?: true
    percentualAdicional?: true
    reajusteTotal?: true
    dataReferencia?: true
    dataAplicacao?: true
    status?: true
    aplicado?: true
  }

  export type ReajusteMaxAggregateInputType = {
    id?: true
    contratoId?: true
    parcelaReferencia?: true
    valorOriginal?: true
    valorReajustado?: true
    indiceAplicado?: true
    indiceBase?: true
    percentualAdicional?: true
    reajusteTotal?: true
    dataReferencia?: true
    dataAplicacao?: true
    status?: true
    aplicado?: true
  }

  export type ReajusteCountAggregateInputType = {
    id?: true
    contratoId?: true
    parcelaReferencia?: true
    valorOriginal?: true
    valorReajustado?: true
    indiceAplicado?: true
    indiceBase?: true
    percentualAdicional?: true
    reajusteTotal?: true
    dataReferencia?: true
    dataAplicacao?: true
    status?: true
    aplicado?: true
    _all?: true
  }

  export type ReajusteAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reajuste to aggregate.
     */
    where?: ReajusteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reajustes to fetch.
     */
    orderBy?: Enumerable<ReajusteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReajusteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reajustes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reajustes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reajustes
    **/
    _count?: true | ReajusteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReajusteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReajusteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReajusteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReajusteMaxAggregateInputType
  }

  export type GetReajusteAggregateType<T extends ReajusteAggregateArgs> = {
        [P in keyof T & keyof AggregateReajuste]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReajuste[P]>
      : GetScalarType<T[P], AggregateReajuste[P]>
  }




  export type ReajusteGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ReajusteWhereInput
    orderBy?: Enumerable<ReajusteOrderByWithAggregationInput>
    by: ReajusteScalarFieldEnum[]
    having?: ReajusteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReajusteCountAggregateInputType | true
    _avg?: ReajusteAvgAggregateInputType
    _sum?: ReajusteSumAggregateInputType
    _min?: ReajusteMinAggregateInputType
    _max?: ReajusteMaxAggregateInputType
  }


  export type ReajusteGroupByOutputType = {
    id: number
    contratoId: number
    parcelaReferencia: number
    valorOriginal: Decimal
    valorReajustado: Decimal
    indiceAplicado: Decimal
    indiceBase: string
    percentualAdicional: Decimal
    reajusteTotal: Decimal
    dataReferencia: Date
    dataAplicacao: Date | null
    status: string
    aplicado: boolean
    _count: ReajusteCountAggregateOutputType | null
    _avg: ReajusteAvgAggregateOutputType | null
    _sum: ReajusteSumAggregateOutputType | null
    _min: ReajusteMinAggregateOutputType | null
    _max: ReajusteMaxAggregateOutputType | null
  }

  type GetReajusteGroupByPayload<T extends ReajusteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ReajusteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReajusteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReajusteGroupByOutputType[P]>
            : GetScalarType<T[P], ReajusteGroupByOutputType[P]>
        }
      >
    >


  export type ReajusteSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contratoId?: boolean
    parcelaReferencia?: boolean
    valorOriginal?: boolean
    valorReajustado?: boolean
    indiceAplicado?: boolean
    indiceBase?: boolean
    percentualAdicional?: boolean
    reajusteTotal?: boolean
    dataReferencia?: boolean
    dataAplicacao?: boolean
    status?: boolean
    aplicado?: boolean
    contrato?: boolean | ContratoArgs<ExtArgs>
  }, ExtArgs["result"]["reajuste"]>

  export type ReajusteSelectScalar = {
    id?: boolean
    contratoId?: boolean
    parcelaReferencia?: boolean
    valorOriginal?: boolean
    valorReajustado?: boolean
    indiceAplicado?: boolean
    indiceBase?: boolean
    percentualAdicional?: boolean
    reajusteTotal?: boolean
    dataReferencia?: boolean
    dataAplicacao?: boolean
    status?: boolean
    aplicado?: boolean
  }

  export type ReajusteInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    contrato?: boolean | ContratoArgs<ExtArgs>
  }


  type ReajusteGetPayload<S extends boolean | null | undefined | ReajusteArgs> = $Types.GetResult<ReajustePayload, S>

  type ReajusteCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ReajusteFindManyArgs, 'select' | 'include'> & {
      select?: ReajusteCountAggregateInputType | true
    }

  export interface ReajusteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reajuste'], meta: { name: 'Reajuste' } }
    /**
     * Find zero or one Reajuste that matches the filter.
     * @param {ReajusteFindUniqueArgs} args - Arguments to find a Reajuste
     * @example
     * // Get one Reajuste
     * const reajuste = await prisma.reajuste.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReajusteFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReajusteFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Reajuste'> extends True ? Prisma__ReajusteClient<$Types.GetResult<ReajustePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ReajusteClient<$Types.GetResult<ReajustePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Reajuste that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReajusteFindUniqueOrThrowArgs} args - Arguments to find a Reajuste
     * @example
     * // Get one Reajuste
     * const reajuste = await prisma.reajuste.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReajusteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReajusteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReajusteClient<$Types.GetResult<ReajustePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Reajuste that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReajusteFindFirstArgs} args - Arguments to find a Reajuste
     * @example
     * // Get one Reajuste
     * const reajuste = await prisma.reajuste.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReajusteFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReajusteFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Reajuste'> extends True ? Prisma__ReajusteClient<$Types.GetResult<ReajustePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ReajusteClient<$Types.GetResult<ReajustePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Reajuste that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReajusteFindFirstOrThrowArgs} args - Arguments to find a Reajuste
     * @example
     * // Get one Reajuste
     * const reajuste = await prisma.reajuste.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReajusteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReajusteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReajusteClient<$Types.GetResult<ReajustePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Reajustes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReajusteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reajustes
     * const reajustes = await prisma.reajuste.findMany()
     * 
     * // Get first 10 Reajustes
     * const reajustes = await prisma.reajuste.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reajusteWithIdOnly = await prisma.reajuste.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReajusteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReajusteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ReajustePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Reajuste.
     * @param {ReajusteCreateArgs} args - Arguments to create a Reajuste.
     * @example
     * // Create one Reajuste
     * const Reajuste = await prisma.reajuste.create({
     *   data: {
     *     // ... data to create a Reajuste
     *   }
     * })
     * 
    **/
    create<T extends ReajusteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReajusteCreateArgs<ExtArgs>>
    ): Prisma__ReajusteClient<$Types.GetResult<ReajustePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Reajustes.
     *     @param {ReajusteCreateManyArgs} args - Arguments to create many Reajustes.
     *     @example
     *     // Create many Reajustes
     *     const reajuste = await prisma.reajuste.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReajusteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReajusteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reajuste.
     * @param {ReajusteDeleteArgs} args - Arguments to delete one Reajuste.
     * @example
     * // Delete one Reajuste
     * const Reajuste = await prisma.reajuste.delete({
     *   where: {
     *     // ... filter to delete one Reajuste
     *   }
     * })
     * 
    **/
    delete<T extends ReajusteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReajusteDeleteArgs<ExtArgs>>
    ): Prisma__ReajusteClient<$Types.GetResult<ReajustePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Reajuste.
     * @param {ReajusteUpdateArgs} args - Arguments to update one Reajuste.
     * @example
     * // Update one Reajuste
     * const reajuste = await prisma.reajuste.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReajusteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReajusteUpdateArgs<ExtArgs>>
    ): Prisma__ReajusteClient<$Types.GetResult<ReajustePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Reajustes.
     * @param {ReajusteDeleteManyArgs} args - Arguments to filter Reajustes to delete.
     * @example
     * // Delete a few Reajustes
     * const { count } = await prisma.reajuste.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReajusteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReajusteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reajustes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReajusteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reajustes
     * const reajuste = await prisma.reajuste.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReajusteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReajusteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reajuste.
     * @param {ReajusteUpsertArgs} args - Arguments to update or create a Reajuste.
     * @example
     * // Update or create a Reajuste
     * const reajuste = await prisma.reajuste.upsert({
     *   create: {
     *     // ... data to create a Reajuste
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reajuste we want to update
     *   }
     * })
    **/
    upsert<T extends ReajusteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReajusteUpsertArgs<ExtArgs>>
    ): Prisma__ReajusteClient<$Types.GetResult<ReajustePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Reajustes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReajusteCountArgs} args - Arguments to filter Reajustes to count.
     * @example
     * // Count the number of Reajustes
     * const count = await prisma.reajuste.count({
     *   where: {
     *     // ... the filter for the Reajustes we want to count
     *   }
     * })
    **/
    count<T extends ReajusteCountArgs>(
      args?: Subset<T, ReajusteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReajusteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reajuste.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReajusteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReajusteAggregateArgs>(args: Subset<T, ReajusteAggregateArgs>): Prisma.PrismaPromise<GetReajusteAggregateType<T>>

    /**
     * Group by Reajuste.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReajusteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReajusteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReajusteGroupByArgs['orderBy'] }
        : { orderBy?: ReajusteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReajusteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReajusteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Reajuste.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReajusteClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    contrato<T extends ContratoArgs<ExtArgs> = {}>(args?: Subset<T, ContratoArgs<ExtArgs>>): Prisma__ContratoClient<$Types.GetResult<ContratoPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Reajuste base type for findUnique actions
   */
  export type ReajusteFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reajuste
     */
    select?: ReajusteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReajusteInclude<ExtArgs> | null
    /**
     * Filter, which Reajuste to fetch.
     */
    where: ReajusteWhereUniqueInput
  }

  /**
   * Reajuste findUnique
   */
  export interface ReajusteFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ReajusteFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Reajuste findUniqueOrThrow
   */
  export type ReajusteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reajuste
     */
    select?: ReajusteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReajusteInclude<ExtArgs> | null
    /**
     * Filter, which Reajuste to fetch.
     */
    where: ReajusteWhereUniqueInput
  }


  /**
   * Reajuste base type for findFirst actions
   */
  export type ReajusteFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reajuste
     */
    select?: ReajusteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReajusteInclude<ExtArgs> | null
    /**
     * Filter, which Reajuste to fetch.
     */
    where?: ReajusteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reajustes to fetch.
     */
    orderBy?: Enumerable<ReajusteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reajustes.
     */
    cursor?: ReajusteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reajustes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reajustes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reajustes.
     */
    distinct?: Enumerable<ReajusteScalarFieldEnum>
  }

  /**
   * Reajuste findFirst
   */
  export interface ReajusteFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ReajusteFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Reajuste findFirstOrThrow
   */
  export type ReajusteFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reajuste
     */
    select?: ReajusteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReajusteInclude<ExtArgs> | null
    /**
     * Filter, which Reajuste to fetch.
     */
    where?: ReajusteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reajustes to fetch.
     */
    orderBy?: Enumerable<ReajusteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reajustes.
     */
    cursor?: ReajusteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reajustes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reajustes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reajustes.
     */
    distinct?: Enumerable<ReajusteScalarFieldEnum>
  }


  /**
   * Reajuste findMany
   */
  export type ReajusteFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reajuste
     */
    select?: ReajusteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReajusteInclude<ExtArgs> | null
    /**
     * Filter, which Reajustes to fetch.
     */
    where?: ReajusteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reajustes to fetch.
     */
    orderBy?: Enumerable<ReajusteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reajustes.
     */
    cursor?: ReajusteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reajustes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reajustes.
     */
    skip?: number
    distinct?: Enumerable<ReajusteScalarFieldEnum>
  }


  /**
   * Reajuste create
   */
  export type ReajusteCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reajuste
     */
    select?: ReajusteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReajusteInclude<ExtArgs> | null
    /**
     * The data needed to create a Reajuste.
     */
    data: XOR<ReajusteCreateInput, ReajusteUncheckedCreateInput>
  }


  /**
   * Reajuste createMany
   */
  export type ReajusteCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reajustes.
     */
    data: Enumerable<ReajusteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Reajuste update
   */
  export type ReajusteUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reajuste
     */
    select?: ReajusteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReajusteInclude<ExtArgs> | null
    /**
     * The data needed to update a Reajuste.
     */
    data: XOR<ReajusteUpdateInput, ReajusteUncheckedUpdateInput>
    /**
     * Choose, which Reajuste to update.
     */
    where: ReajusteWhereUniqueInput
  }


  /**
   * Reajuste updateMany
   */
  export type ReajusteUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reajustes.
     */
    data: XOR<ReajusteUpdateManyMutationInput, ReajusteUncheckedUpdateManyInput>
    /**
     * Filter which Reajustes to update
     */
    where?: ReajusteWhereInput
  }


  /**
   * Reajuste upsert
   */
  export type ReajusteUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reajuste
     */
    select?: ReajusteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReajusteInclude<ExtArgs> | null
    /**
     * The filter to search for the Reajuste to update in case it exists.
     */
    where: ReajusteWhereUniqueInput
    /**
     * In case the Reajuste found by the `where` argument doesn't exist, create a new Reajuste with this data.
     */
    create: XOR<ReajusteCreateInput, ReajusteUncheckedCreateInput>
    /**
     * In case the Reajuste was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReajusteUpdateInput, ReajusteUncheckedUpdateInput>
  }


  /**
   * Reajuste delete
   */
  export type ReajusteDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reajuste
     */
    select?: ReajusteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReajusteInclude<ExtArgs> | null
    /**
     * Filter which Reajuste to delete.
     */
    where: ReajusteWhereUniqueInput
  }


  /**
   * Reajuste deleteMany
   */
  export type ReajusteDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reajustes to delete
     */
    where?: ReajusteWhereInput
  }


  /**
   * Reajuste without action
   */
  export type ReajusteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reajuste
     */
    select?: ReajusteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReajusteInclude<ExtArgs> | null
  }



  /**
   * Model ParametrosReajuste
   */


  export type AggregateParametrosReajuste = {
    _count: ParametrosReajusteCountAggregateOutputType | null
    _avg: ParametrosReajusteAvgAggregateOutputType | null
    _sum: ParametrosReajusteSumAggregateOutputType | null
    _min: ParametrosReajusteMinAggregateOutputType | null
    _max: ParametrosReajusteMaxAggregateOutputType | null
  }

  export type ParametrosReajusteAvgAggregateOutputType = {
    id: number | null
    percentualAdicional: Decimal | null
    intervaloParcelas: number | null
    alertaAntecipadoDias: number | null
  }

  export type ParametrosReajusteSumAggregateOutputType = {
    id: number | null
    percentualAdicional: Decimal | null
    intervaloParcelas: number | null
    alertaAntecipadoDias: number | null
  }

  export type ParametrosReajusteMinAggregateOutputType = {
    id: number | null
    indiceBase: string | null
    percentualAdicional: Decimal | null
    intervaloParcelas: number | null
    alertaAntecipadoDias: number | null
  }

  export type ParametrosReajusteMaxAggregateOutputType = {
    id: number | null
    indiceBase: string | null
    percentualAdicional: Decimal | null
    intervaloParcelas: number | null
    alertaAntecipadoDias: number | null
  }

  export type ParametrosReajusteCountAggregateOutputType = {
    id: number
    indiceBase: number
    percentualAdicional: number
    intervaloParcelas: number
    alertaAntecipadoDias: number
    _all: number
  }


  export type ParametrosReajusteAvgAggregateInputType = {
    id?: true
    percentualAdicional?: true
    intervaloParcelas?: true
    alertaAntecipadoDias?: true
  }

  export type ParametrosReajusteSumAggregateInputType = {
    id?: true
    percentualAdicional?: true
    intervaloParcelas?: true
    alertaAntecipadoDias?: true
  }

  export type ParametrosReajusteMinAggregateInputType = {
    id?: true
    indiceBase?: true
    percentualAdicional?: true
    intervaloParcelas?: true
    alertaAntecipadoDias?: true
  }

  export type ParametrosReajusteMaxAggregateInputType = {
    id?: true
    indiceBase?: true
    percentualAdicional?: true
    intervaloParcelas?: true
    alertaAntecipadoDias?: true
  }

  export type ParametrosReajusteCountAggregateInputType = {
    id?: true
    indiceBase?: true
    percentualAdicional?: true
    intervaloParcelas?: true
    alertaAntecipadoDias?: true
    _all?: true
  }

  export type ParametrosReajusteAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParametrosReajuste to aggregate.
     */
    where?: ParametrosReajusteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParametrosReajustes to fetch.
     */
    orderBy?: Enumerable<ParametrosReajusteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParametrosReajusteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParametrosReajustes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParametrosReajustes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ParametrosReajustes
    **/
    _count?: true | ParametrosReajusteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParametrosReajusteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParametrosReajusteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParametrosReajusteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParametrosReajusteMaxAggregateInputType
  }

  export type GetParametrosReajusteAggregateType<T extends ParametrosReajusteAggregateArgs> = {
        [P in keyof T & keyof AggregateParametrosReajuste]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParametrosReajuste[P]>
      : GetScalarType<T[P], AggregateParametrosReajuste[P]>
  }




  export type ParametrosReajusteGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ParametrosReajusteWhereInput
    orderBy?: Enumerable<ParametrosReajusteOrderByWithAggregationInput>
    by: ParametrosReajusteScalarFieldEnum[]
    having?: ParametrosReajusteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParametrosReajusteCountAggregateInputType | true
    _avg?: ParametrosReajusteAvgAggregateInputType
    _sum?: ParametrosReajusteSumAggregateInputType
    _min?: ParametrosReajusteMinAggregateInputType
    _max?: ParametrosReajusteMaxAggregateInputType
  }


  export type ParametrosReajusteGroupByOutputType = {
    id: number
    indiceBase: string
    percentualAdicional: Decimal
    intervaloParcelas: number
    alertaAntecipadoDias: number
    _count: ParametrosReajusteCountAggregateOutputType | null
    _avg: ParametrosReajusteAvgAggregateOutputType | null
    _sum: ParametrosReajusteSumAggregateOutputType | null
    _min: ParametrosReajusteMinAggregateOutputType | null
    _max: ParametrosReajusteMaxAggregateOutputType | null
  }

  type GetParametrosReajusteGroupByPayload<T extends ParametrosReajusteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ParametrosReajusteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParametrosReajusteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParametrosReajusteGroupByOutputType[P]>
            : GetScalarType<T[P], ParametrosReajusteGroupByOutputType[P]>
        }
      >
    >


  export type ParametrosReajusteSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    indiceBase?: boolean
    percentualAdicional?: boolean
    intervaloParcelas?: boolean
    alertaAntecipadoDias?: boolean
  }, ExtArgs["result"]["parametrosReajuste"]>

  export type ParametrosReajusteSelectScalar = {
    id?: boolean
    indiceBase?: boolean
    percentualAdicional?: boolean
    intervaloParcelas?: boolean
    alertaAntecipadoDias?: boolean
  }


  type ParametrosReajusteGetPayload<S extends boolean | null | undefined | ParametrosReajusteArgs> = $Types.GetResult<ParametrosReajustePayload, S>

  type ParametrosReajusteCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ParametrosReajusteFindManyArgs, 'select' | 'include'> & {
      select?: ParametrosReajusteCountAggregateInputType | true
    }

  export interface ParametrosReajusteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ParametrosReajuste'], meta: { name: 'ParametrosReajuste' } }
    /**
     * Find zero or one ParametrosReajuste that matches the filter.
     * @param {ParametrosReajusteFindUniqueArgs} args - Arguments to find a ParametrosReajuste
     * @example
     * // Get one ParametrosReajuste
     * const parametrosReajuste = await prisma.parametrosReajuste.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ParametrosReajusteFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ParametrosReajusteFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ParametrosReajuste'> extends True ? Prisma__ParametrosReajusteClient<$Types.GetResult<ParametrosReajustePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ParametrosReajusteClient<$Types.GetResult<ParametrosReajustePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ParametrosReajuste that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ParametrosReajusteFindUniqueOrThrowArgs} args - Arguments to find a ParametrosReajuste
     * @example
     * // Get one ParametrosReajuste
     * const parametrosReajuste = await prisma.parametrosReajuste.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ParametrosReajusteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ParametrosReajusteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ParametrosReajusteClient<$Types.GetResult<ParametrosReajustePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ParametrosReajuste that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametrosReajusteFindFirstArgs} args - Arguments to find a ParametrosReajuste
     * @example
     * // Get one ParametrosReajuste
     * const parametrosReajuste = await prisma.parametrosReajuste.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ParametrosReajusteFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ParametrosReajusteFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ParametrosReajuste'> extends True ? Prisma__ParametrosReajusteClient<$Types.GetResult<ParametrosReajustePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ParametrosReajusteClient<$Types.GetResult<ParametrosReajustePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ParametrosReajuste that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametrosReajusteFindFirstOrThrowArgs} args - Arguments to find a ParametrosReajuste
     * @example
     * // Get one ParametrosReajuste
     * const parametrosReajuste = await prisma.parametrosReajuste.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ParametrosReajusteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ParametrosReajusteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ParametrosReajusteClient<$Types.GetResult<ParametrosReajustePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ParametrosReajustes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametrosReajusteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ParametrosReajustes
     * const parametrosReajustes = await prisma.parametrosReajuste.findMany()
     * 
     * // Get first 10 ParametrosReajustes
     * const parametrosReajustes = await prisma.parametrosReajuste.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parametrosReajusteWithIdOnly = await prisma.parametrosReajuste.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ParametrosReajusteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParametrosReajusteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ParametrosReajustePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ParametrosReajuste.
     * @param {ParametrosReajusteCreateArgs} args - Arguments to create a ParametrosReajuste.
     * @example
     * // Create one ParametrosReajuste
     * const ParametrosReajuste = await prisma.parametrosReajuste.create({
     *   data: {
     *     // ... data to create a ParametrosReajuste
     *   }
     * })
     * 
    **/
    create<T extends ParametrosReajusteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ParametrosReajusteCreateArgs<ExtArgs>>
    ): Prisma__ParametrosReajusteClient<$Types.GetResult<ParametrosReajustePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ParametrosReajustes.
     *     @param {ParametrosReajusteCreateManyArgs} args - Arguments to create many ParametrosReajustes.
     *     @example
     *     // Create many ParametrosReajustes
     *     const parametrosReajuste = await prisma.parametrosReajuste.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ParametrosReajusteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParametrosReajusteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ParametrosReajuste.
     * @param {ParametrosReajusteDeleteArgs} args - Arguments to delete one ParametrosReajuste.
     * @example
     * // Delete one ParametrosReajuste
     * const ParametrosReajuste = await prisma.parametrosReajuste.delete({
     *   where: {
     *     // ... filter to delete one ParametrosReajuste
     *   }
     * })
     * 
    **/
    delete<T extends ParametrosReajusteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ParametrosReajusteDeleteArgs<ExtArgs>>
    ): Prisma__ParametrosReajusteClient<$Types.GetResult<ParametrosReajustePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ParametrosReajuste.
     * @param {ParametrosReajusteUpdateArgs} args - Arguments to update one ParametrosReajuste.
     * @example
     * // Update one ParametrosReajuste
     * const parametrosReajuste = await prisma.parametrosReajuste.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ParametrosReajusteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ParametrosReajusteUpdateArgs<ExtArgs>>
    ): Prisma__ParametrosReajusteClient<$Types.GetResult<ParametrosReajustePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ParametrosReajustes.
     * @param {ParametrosReajusteDeleteManyArgs} args - Arguments to filter ParametrosReajustes to delete.
     * @example
     * // Delete a few ParametrosReajustes
     * const { count } = await prisma.parametrosReajuste.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ParametrosReajusteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParametrosReajusteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParametrosReajustes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametrosReajusteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ParametrosReajustes
     * const parametrosReajuste = await prisma.parametrosReajuste.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ParametrosReajusteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ParametrosReajusteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ParametrosReajuste.
     * @param {ParametrosReajusteUpsertArgs} args - Arguments to update or create a ParametrosReajuste.
     * @example
     * // Update or create a ParametrosReajuste
     * const parametrosReajuste = await prisma.parametrosReajuste.upsert({
     *   create: {
     *     // ... data to create a ParametrosReajuste
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ParametrosReajuste we want to update
     *   }
     * })
    **/
    upsert<T extends ParametrosReajusteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ParametrosReajusteUpsertArgs<ExtArgs>>
    ): Prisma__ParametrosReajusteClient<$Types.GetResult<ParametrosReajustePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ParametrosReajustes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametrosReajusteCountArgs} args - Arguments to filter ParametrosReajustes to count.
     * @example
     * // Count the number of ParametrosReajustes
     * const count = await prisma.parametrosReajuste.count({
     *   where: {
     *     // ... the filter for the ParametrosReajustes we want to count
     *   }
     * })
    **/
    count<T extends ParametrosReajusteCountArgs>(
      args?: Subset<T, ParametrosReajusteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParametrosReajusteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ParametrosReajuste.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametrosReajusteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParametrosReajusteAggregateArgs>(args: Subset<T, ParametrosReajusteAggregateArgs>): Prisma.PrismaPromise<GetParametrosReajusteAggregateType<T>>

    /**
     * Group by ParametrosReajuste.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametrosReajusteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParametrosReajusteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParametrosReajusteGroupByArgs['orderBy'] }
        : { orderBy?: ParametrosReajusteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParametrosReajusteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParametrosReajusteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ParametrosReajuste.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ParametrosReajusteClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ParametrosReajuste base type for findUnique actions
   */
  export type ParametrosReajusteFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametrosReajuste
     */
    select?: ParametrosReajusteSelect<ExtArgs> | null
    /**
     * Filter, which ParametrosReajuste to fetch.
     */
    where: ParametrosReajusteWhereUniqueInput
  }

  /**
   * ParametrosReajuste findUnique
   */
  export interface ParametrosReajusteFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ParametrosReajusteFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ParametrosReajuste findUniqueOrThrow
   */
  export type ParametrosReajusteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametrosReajuste
     */
    select?: ParametrosReajusteSelect<ExtArgs> | null
    /**
     * Filter, which ParametrosReajuste to fetch.
     */
    where: ParametrosReajusteWhereUniqueInput
  }


  /**
   * ParametrosReajuste base type for findFirst actions
   */
  export type ParametrosReajusteFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametrosReajuste
     */
    select?: ParametrosReajusteSelect<ExtArgs> | null
    /**
     * Filter, which ParametrosReajuste to fetch.
     */
    where?: ParametrosReajusteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParametrosReajustes to fetch.
     */
    orderBy?: Enumerable<ParametrosReajusteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParametrosReajustes.
     */
    cursor?: ParametrosReajusteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParametrosReajustes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParametrosReajustes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParametrosReajustes.
     */
    distinct?: Enumerable<ParametrosReajusteScalarFieldEnum>
  }

  /**
   * ParametrosReajuste findFirst
   */
  export interface ParametrosReajusteFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ParametrosReajusteFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ParametrosReajuste findFirstOrThrow
   */
  export type ParametrosReajusteFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametrosReajuste
     */
    select?: ParametrosReajusteSelect<ExtArgs> | null
    /**
     * Filter, which ParametrosReajuste to fetch.
     */
    where?: ParametrosReajusteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParametrosReajustes to fetch.
     */
    orderBy?: Enumerable<ParametrosReajusteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParametrosReajustes.
     */
    cursor?: ParametrosReajusteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParametrosReajustes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParametrosReajustes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParametrosReajustes.
     */
    distinct?: Enumerable<ParametrosReajusteScalarFieldEnum>
  }


  /**
   * ParametrosReajuste findMany
   */
  export type ParametrosReajusteFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametrosReajuste
     */
    select?: ParametrosReajusteSelect<ExtArgs> | null
    /**
     * Filter, which ParametrosReajustes to fetch.
     */
    where?: ParametrosReajusteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParametrosReajustes to fetch.
     */
    orderBy?: Enumerable<ParametrosReajusteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ParametrosReajustes.
     */
    cursor?: ParametrosReajusteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParametrosReajustes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParametrosReajustes.
     */
    skip?: number
    distinct?: Enumerable<ParametrosReajusteScalarFieldEnum>
  }


  /**
   * ParametrosReajuste create
   */
  export type ParametrosReajusteCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametrosReajuste
     */
    select?: ParametrosReajusteSelect<ExtArgs> | null
    /**
     * The data needed to create a ParametrosReajuste.
     */
    data: XOR<ParametrosReajusteCreateInput, ParametrosReajusteUncheckedCreateInput>
  }


  /**
   * ParametrosReajuste createMany
   */
  export type ParametrosReajusteCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ParametrosReajustes.
     */
    data: Enumerable<ParametrosReajusteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ParametrosReajuste update
   */
  export type ParametrosReajusteUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametrosReajuste
     */
    select?: ParametrosReajusteSelect<ExtArgs> | null
    /**
     * The data needed to update a ParametrosReajuste.
     */
    data: XOR<ParametrosReajusteUpdateInput, ParametrosReajusteUncheckedUpdateInput>
    /**
     * Choose, which ParametrosReajuste to update.
     */
    where: ParametrosReajusteWhereUniqueInput
  }


  /**
   * ParametrosReajuste updateMany
   */
  export type ParametrosReajusteUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ParametrosReajustes.
     */
    data: XOR<ParametrosReajusteUpdateManyMutationInput, ParametrosReajusteUncheckedUpdateManyInput>
    /**
     * Filter which ParametrosReajustes to update
     */
    where?: ParametrosReajusteWhereInput
  }


  /**
   * ParametrosReajuste upsert
   */
  export type ParametrosReajusteUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametrosReajuste
     */
    select?: ParametrosReajusteSelect<ExtArgs> | null
    /**
     * The filter to search for the ParametrosReajuste to update in case it exists.
     */
    where: ParametrosReajusteWhereUniqueInput
    /**
     * In case the ParametrosReajuste found by the `where` argument doesn't exist, create a new ParametrosReajuste with this data.
     */
    create: XOR<ParametrosReajusteCreateInput, ParametrosReajusteUncheckedCreateInput>
    /**
     * In case the ParametrosReajuste was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParametrosReajusteUpdateInput, ParametrosReajusteUncheckedUpdateInput>
  }


  /**
   * ParametrosReajuste delete
   */
  export type ParametrosReajusteDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametrosReajuste
     */
    select?: ParametrosReajusteSelect<ExtArgs> | null
    /**
     * Filter which ParametrosReajuste to delete.
     */
    where: ParametrosReajusteWhereUniqueInput
  }


  /**
   * ParametrosReajuste deleteMany
   */
  export type ParametrosReajusteDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParametrosReajustes to delete
     */
    where?: ParametrosReajusteWhereInput
  }


  /**
   * ParametrosReajuste without action
   */
  export type ParametrosReajusteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametrosReajuste
     */
    select?: ParametrosReajusteSelect<ExtArgs> | null
  }



  /**
   * Model IndicesEconomicos
   */


  export type AggregateIndicesEconomicos = {
    _count: IndicesEconomicosCountAggregateOutputType | null
    _avg: IndicesEconomicosAvgAggregateOutputType | null
    _sum: IndicesEconomicosSumAggregateOutputType | null
    _min: IndicesEconomicosMinAggregateOutputType | null
    _max: IndicesEconomicosMaxAggregateOutputType | null
  }

  export type IndicesEconomicosAvgAggregateOutputType = {
    id: number | null
    IGPM: Decimal | null
    IPCA: Decimal | null
    INPC: Decimal | null
  }

  export type IndicesEconomicosSumAggregateOutputType = {
    id: number | null
    IGPM: Decimal | null
    IPCA: Decimal | null
    INPC: Decimal | null
  }

  export type IndicesEconomicosMinAggregateOutputType = {
    id: number | null
    IGPM: Decimal | null
    IPCA: Decimal | null
    INPC: Decimal | null
    data: Date | null
  }

  export type IndicesEconomicosMaxAggregateOutputType = {
    id: number | null
    IGPM: Decimal | null
    IPCA: Decimal | null
    INPC: Decimal | null
    data: Date | null
  }

  export type IndicesEconomicosCountAggregateOutputType = {
    id: number
    IGPM: number
    IPCA: number
    INPC: number
    data: number
    _all: number
  }


  export type IndicesEconomicosAvgAggregateInputType = {
    id?: true
    IGPM?: true
    IPCA?: true
    INPC?: true
  }

  export type IndicesEconomicosSumAggregateInputType = {
    id?: true
    IGPM?: true
    IPCA?: true
    INPC?: true
  }

  export type IndicesEconomicosMinAggregateInputType = {
    id?: true
    IGPM?: true
    IPCA?: true
    INPC?: true
    data?: true
  }

  export type IndicesEconomicosMaxAggregateInputType = {
    id?: true
    IGPM?: true
    IPCA?: true
    INPC?: true
    data?: true
  }

  export type IndicesEconomicosCountAggregateInputType = {
    id?: true
    IGPM?: true
    IPCA?: true
    INPC?: true
    data?: true
    _all?: true
  }

  export type IndicesEconomicosAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which IndicesEconomicos to aggregate.
     */
    where?: IndicesEconomicosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IndicesEconomicos to fetch.
     */
    orderBy?: Enumerable<IndicesEconomicosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IndicesEconomicosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IndicesEconomicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IndicesEconomicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IndicesEconomicos
    **/
    _count?: true | IndicesEconomicosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IndicesEconomicosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IndicesEconomicosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IndicesEconomicosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IndicesEconomicosMaxAggregateInputType
  }

  export type GetIndicesEconomicosAggregateType<T extends IndicesEconomicosAggregateArgs> = {
        [P in keyof T & keyof AggregateIndicesEconomicos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIndicesEconomicos[P]>
      : GetScalarType<T[P], AggregateIndicesEconomicos[P]>
  }




  export type IndicesEconomicosGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: IndicesEconomicosWhereInput
    orderBy?: Enumerable<IndicesEconomicosOrderByWithAggregationInput>
    by: IndicesEconomicosScalarFieldEnum[]
    having?: IndicesEconomicosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IndicesEconomicosCountAggregateInputType | true
    _avg?: IndicesEconomicosAvgAggregateInputType
    _sum?: IndicesEconomicosSumAggregateInputType
    _min?: IndicesEconomicosMinAggregateInputType
    _max?: IndicesEconomicosMaxAggregateInputType
  }


  export type IndicesEconomicosGroupByOutputType = {
    id: number
    IGPM: Decimal
    IPCA: Decimal
    INPC: Decimal
    data: Date
    _count: IndicesEconomicosCountAggregateOutputType | null
    _avg: IndicesEconomicosAvgAggregateOutputType | null
    _sum: IndicesEconomicosSumAggregateOutputType | null
    _min: IndicesEconomicosMinAggregateOutputType | null
    _max: IndicesEconomicosMaxAggregateOutputType | null
  }

  type GetIndicesEconomicosGroupByPayload<T extends IndicesEconomicosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<IndicesEconomicosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IndicesEconomicosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IndicesEconomicosGroupByOutputType[P]>
            : GetScalarType<T[P], IndicesEconomicosGroupByOutputType[P]>
        }
      >
    >


  export type IndicesEconomicosSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    IGPM?: boolean
    IPCA?: boolean
    INPC?: boolean
    data?: boolean
  }, ExtArgs["result"]["indicesEconomicos"]>

  export type IndicesEconomicosSelectScalar = {
    id?: boolean
    IGPM?: boolean
    IPCA?: boolean
    INPC?: boolean
    data?: boolean
  }


  type IndicesEconomicosGetPayload<S extends boolean | null | undefined | IndicesEconomicosArgs> = $Types.GetResult<IndicesEconomicosPayload, S>

  type IndicesEconomicosCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<IndicesEconomicosFindManyArgs, 'select' | 'include'> & {
      select?: IndicesEconomicosCountAggregateInputType | true
    }

  export interface IndicesEconomicosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IndicesEconomicos'], meta: { name: 'IndicesEconomicos' } }
    /**
     * Find zero or one IndicesEconomicos that matches the filter.
     * @param {IndicesEconomicosFindUniqueArgs} args - Arguments to find a IndicesEconomicos
     * @example
     * // Get one IndicesEconomicos
     * const indicesEconomicos = await prisma.indicesEconomicos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends IndicesEconomicosFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, IndicesEconomicosFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'IndicesEconomicos'> extends True ? Prisma__IndicesEconomicosClient<$Types.GetResult<IndicesEconomicosPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__IndicesEconomicosClient<$Types.GetResult<IndicesEconomicosPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one IndicesEconomicos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {IndicesEconomicosFindUniqueOrThrowArgs} args - Arguments to find a IndicesEconomicos
     * @example
     * // Get one IndicesEconomicos
     * const indicesEconomicos = await prisma.indicesEconomicos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends IndicesEconomicosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, IndicesEconomicosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__IndicesEconomicosClient<$Types.GetResult<IndicesEconomicosPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first IndicesEconomicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndicesEconomicosFindFirstArgs} args - Arguments to find a IndicesEconomicos
     * @example
     * // Get one IndicesEconomicos
     * const indicesEconomicos = await prisma.indicesEconomicos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends IndicesEconomicosFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, IndicesEconomicosFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'IndicesEconomicos'> extends True ? Prisma__IndicesEconomicosClient<$Types.GetResult<IndicesEconomicosPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__IndicesEconomicosClient<$Types.GetResult<IndicesEconomicosPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first IndicesEconomicos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndicesEconomicosFindFirstOrThrowArgs} args - Arguments to find a IndicesEconomicos
     * @example
     * // Get one IndicesEconomicos
     * const indicesEconomicos = await prisma.indicesEconomicos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends IndicesEconomicosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, IndicesEconomicosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__IndicesEconomicosClient<$Types.GetResult<IndicesEconomicosPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more IndicesEconomicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndicesEconomicosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IndicesEconomicos
     * const indicesEconomicos = await prisma.indicesEconomicos.findMany()
     * 
     * // Get first 10 IndicesEconomicos
     * const indicesEconomicos = await prisma.indicesEconomicos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const indicesEconomicosWithIdOnly = await prisma.indicesEconomicos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends IndicesEconomicosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, IndicesEconomicosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<IndicesEconomicosPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a IndicesEconomicos.
     * @param {IndicesEconomicosCreateArgs} args - Arguments to create a IndicesEconomicos.
     * @example
     * // Create one IndicesEconomicos
     * const IndicesEconomicos = await prisma.indicesEconomicos.create({
     *   data: {
     *     // ... data to create a IndicesEconomicos
     *   }
     * })
     * 
    **/
    create<T extends IndicesEconomicosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, IndicesEconomicosCreateArgs<ExtArgs>>
    ): Prisma__IndicesEconomicosClient<$Types.GetResult<IndicesEconomicosPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many IndicesEconomicos.
     *     @param {IndicesEconomicosCreateManyArgs} args - Arguments to create many IndicesEconomicos.
     *     @example
     *     // Create many IndicesEconomicos
     *     const indicesEconomicos = await prisma.indicesEconomicos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends IndicesEconomicosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, IndicesEconomicosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a IndicesEconomicos.
     * @param {IndicesEconomicosDeleteArgs} args - Arguments to delete one IndicesEconomicos.
     * @example
     * // Delete one IndicesEconomicos
     * const IndicesEconomicos = await prisma.indicesEconomicos.delete({
     *   where: {
     *     // ... filter to delete one IndicesEconomicos
     *   }
     * })
     * 
    **/
    delete<T extends IndicesEconomicosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, IndicesEconomicosDeleteArgs<ExtArgs>>
    ): Prisma__IndicesEconomicosClient<$Types.GetResult<IndicesEconomicosPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one IndicesEconomicos.
     * @param {IndicesEconomicosUpdateArgs} args - Arguments to update one IndicesEconomicos.
     * @example
     * // Update one IndicesEconomicos
     * const indicesEconomicos = await prisma.indicesEconomicos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends IndicesEconomicosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, IndicesEconomicosUpdateArgs<ExtArgs>>
    ): Prisma__IndicesEconomicosClient<$Types.GetResult<IndicesEconomicosPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more IndicesEconomicos.
     * @param {IndicesEconomicosDeleteManyArgs} args - Arguments to filter IndicesEconomicos to delete.
     * @example
     * // Delete a few IndicesEconomicos
     * const { count } = await prisma.indicesEconomicos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends IndicesEconomicosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, IndicesEconomicosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IndicesEconomicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndicesEconomicosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IndicesEconomicos
     * const indicesEconomicos = await prisma.indicesEconomicos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends IndicesEconomicosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, IndicesEconomicosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one IndicesEconomicos.
     * @param {IndicesEconomicosUpsertArgs} args - Arguments to update or create a IndicesEconomicos.
     * @example
     * // Update or create a IndicesEconomicos
     * const indicesEconomicos = await prisma.indicesEconomicos.upsert({
     *   create: {
     *     // ... data to create a IndicesEconomicos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IndicesEconomicos we want to update
     *   }
     * })
    **/
    upsert<T extends IndicesEconomicosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, IndicesEconomicosUpsertArgs<ExtArgs>>
    ): Prisma__IndicesEconomicosClient<$Types.GetResult<IndicesEconomicosPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of IndicesEconomicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndicesEconomicosCountArgs} args - Arguments to filter IndicesEconomicos to count.
     * @example
     * // Count the number of IndicesEconomicos
     * const count = await prisma.indicesEconomicos.count({
     *   where: {
     *     // ... the filter for the IndicesEconomicos we want to count
     *   }
     * })
    **/
    count<T extends IndicesEconomicosCountArgs>(
      args?: Subset<T, IndicesEconomicosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IndicesEconomicosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IndicesEconomicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndicesEconomicosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IndicesEconomicosAggregateArgs>(args: Subset<T, IndicesEconomicosAggregateArgs>): Prisma.PrismaPromise<GetIndicesEconomicosAggregateType<T>>

    /**
     * Group by IndicesEconomicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndicesEconomicosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IndicesEconomicosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IndicesEconomicosGroupByArgs['orderBy'] }
        : { orderBy?: IndicesEconomicosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IndicesEconomicosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIndicesEconomicosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for IndicesEconomicos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__IndicesEconomicosClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * IndicesEconomicos base type for findUnique actions
   */
  export type IndicesEconomicosFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndicesEconomicos
     */
    select?: IndicesEconomicosSelect<ExtArgs> | null
    /**
     * Filter, which IndicesEconomicos to fetch.
     */
    where: IndicesEconomicosWhereUniqueInput
  }

  /**
   * IndicesEconomicos findUnique
   */
  export interface IndicesEconomicosFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends IndicesEconomicosFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * IndicesEconomicos findUniqueOrThrow
   */
  export type IndicesEconomicosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndicesEconomicos
     */
    select?: IndicesEconomicosSelect<ExtArgs> | null
    /**
     * Filter, which IndicesEconomicos to fetch.
     */
    where: IndicesEconomicosWhereUniqueInput
  }


  /**
   * IndicesEconomicos base type for findFirst actions
   */
  export type IndicesEconomicosFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndicesEconomicos
     */
    select?: IndicesEconomicosSelect<ExtArgs> | null
    /**
     * Filter, which IndicesEconomicos to fetch.
     */
    where?: IndicesEconomicosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IndicesEconomicos to fetch.
     */
    orderBy?: Enumerable<IndicesEconomicosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IndicesEconomicos.
     */
    cursor?: IndicesEconomicosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IndicesEconomicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IndicesEconomicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IndicesEconomicos.
     */
    distinct?: Enumerable<IndicesEconomicosScalarFieldEnum>
  }

  /**
   * IndicesEconomicos findFirst
   */
  export interface IndicesEconomicosFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends IndicesEconomicosFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * IndicesEconomicos findFirstOrThrow
   */
  export type IndicesEconomicosFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndicesEconomicos
     */
    select?: IndicesEconomicosSelect<ExtArgs> | null
    /**
     * Filter, which IndicesEconomicos to fetch.
     */
    where?: IndicesEconomicosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IndicesEconomicos to fetch.
     */
    orderBy?: Enumerable<IndicesEconomicosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IndicesEconomicos.
     */
    cursor?: IndicesEconomicosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IndicesEconomicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IndicesEconomicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IndicesEconomicos.
     */
    distinct?: Enumerable<IndicesEconomicosScalarFieldEnum>
  }


  /**
   * IndicesEconomicos findMany
   */
  export type IndicesEconomicosFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndicesEconomicos
     */
    select?: IndicesEconomicosSelect<ExtArgs> | null
    /**
     * Filter, which IndicesEconomicos to fetch.
     */
    where?: IndicesEconomicosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IndicesEconomicos to fetch.
     */
    orderBy?: Enumerable<IndicesEconomicosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IndicesEconomicos.
     */
    cursor?: IndicesEconomicosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IndicesEconomicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IndicesEconomicos.
     */
    skip?: number
    distinct?: Enumerable<IndicesEconomicosScalarFieldEnum>
  }


  /**
   * IndicesEconomicos create
   */
  export type IndicesEconomicosCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndicesEconomicos
     */
    select?: IndicesEconomicosSelect<ExtArgs> | null
    /**
     * The data needed to create a IndicesEconomicos.
     */
    data: XOR<IndicesEconomicosCreateInput, IndicesEconomicosUncheckedCreateInput>
  }


  /**
   * IndicesEconomicos createMany
   */
  export type IndicesEconomicosCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many IndicesEconomicos.
     */
    data: Enumerable<IndicesEconomicosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * IndicesEconomicos update
   */
  export type IndicesEconomicosUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndicesEconomicos
     */
    select?: IndicesEconomicosSelect<ExtArgs> | null
    /**
     * The data needed to update a IndicesEconomicos.
     */
    data: XOR<IndicesEconomicosUpdateInput, IndicesEconomicosUncheckedUpdateInput>
    /**
     * Choose, which IndicesEconomicos to update.
     */
    where: IndicesEconomicosWhereUniqueInput
  }


  /**
   * IndicesEconomicos updateMany
   */
  export type IndicesEconomicosUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update IndicesEconomicos.
     */
    data: XOR<IndicesEconomicosUpdateManyMutationInput, IndicesEconomicosUncheckedUpdateManyInput>
    /**
     * Filter which IndicesEconomicos to update
     */
    where?: IndicesEconomicosWhereInput
  }


  /**
   * IndicesEconomicos upsert
   */
  export type IndicesEconomicosUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndicesEconomicos
     */
    select?: IndicesEconomicosSelect<ExtArgs> | null
    /**
     * The filter to search for the IndicesEconomicos to update in case it exists.
     */
    where: IndicesEconomicosWhereUniqueInput
    /**
     * In case the IndicesEconomicos found by the `where` argument doesn't exist, create a new IndicesEconomicos with this data.
     */
    create: XOR<IndicesEconomicosCreateInput, IndicesEconomicosUncheckedCreateInput>
    /**
     * In case the IndicesEconomicos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IndicesEconomicosUpdateInput, IndicesEconomicosUncheckedUpdateInput>
  }


  /**
   * IndicesEconomicos delete
   */
  export type IndicesEconomicosDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndicesEconomicos
     */
    select?: IndicesEconomicosSelect<ExtArgs> | null
    /**
     * Filter which IndicesEconomicos to delete.
     */
    where: IndicesEconomicosWhereUniqueInput
  }


  /**
   * IndicesEconomicos deleteMany
   */
  export type IndicesEconomicosDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which IndicesEconomicos to delete
     */
    where?: IndicesEconomicosWhereInput
  }


  /**
   * IndicesEconomicos without action
   */
  export type IndicesEconomicosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndicesEconomicos
     */
    select?: IndicesEconomicosSelect<ExtArgs> | null
  }



  /**
   * Model ClienteInadimplente
   */


  export type AggregateClienteInadimplente = {
    _count: ClienteInadimplenteCountAggregateOutputType | null
    _avg: ClienteInadimplenteAvgAggregateOutputType | null
    _sum: ClienteInadimplenteSumAggregateOutputType | null
    _min: ClienteInadimplenteMinAggregateOutputType | null
    _max: ClienteInadimplenteMaxAggregateOutputType | null
  }

  export type ClienteInadimplenteAvgAggregateOutputType = {
    id: number | null
    clienteId: number | null
    contratoId: number | null
    valorEmAberto: Decimal | null
    diasAtraso: number | null
  }

  export type ClienteInadimplenteSumAggregateOutputType = {
    id: number | null
    clienteId: number | null
    contratoId: number | null
    valorEmAberto: Decimal | null
    diasAtraso: number | null
  }

  export type ClienteInadimplenteMinAggregateOutputType = {
    id: number | null
    clienteId: number | null
    contratoId: number | null
    valorEmAberto: Decimal | null
    diasAtraso: number | null
    ultimaCobranca: Date | null
    status: string | null
  }

  export type ClienteInadimplenteMaxAggregateOutputType = {
    id: number | null
    clienteId: number | null
    contratoId: number | null
    valorEmAberto: Decimal | null
    diasAtraso: number | null
    ultimaCobranca: Date | null
    status: string | null
  }

  export type ClienteInadimplenteCountAggregateOutputType = {
    id: number
    clienteId: number
    contratoId: number
    valorEmAberto: number
    diasAtraso: number
    ultimaCobranca: number
    status: number
    _all: number
  }


  export type ClienteInadimplenteAvgAggregateInputType = {
    id?: true
    clienteId?: true
    contratoId?: true
    valorEmAberto?: true
    diasAtraso?: true
  }

  export type ClienteInadimplenteSumAggregateInputType = {
    id?: true
    clienteId?: true
    contratoId?: true
    valorEmAberto?: true
    diasAtraso?: true
  }

  export type ClienteInadimplenteMinAggregateInputType = {
    id?: true
    clienteId?: true
    contratoId?: true
    valorEmAberto?: true
    diasAtraso?: true
    ultimaCobranca?: true
    status?: true
  }

  export type ClienteInadimplenteMaxAggregateInputType = {
    id?: true
    clienteId?: true
    contratoId?: true
    valorEmAberto?: true
    diasAtraso?: true
    ultimaCobranca?: true
    status?: true
  }

  export type ClienteInadimplenteCountAggregateInputType = {
    id?: true
    clienteId?: true
    contratoId?: true
    valorEmAberto?: true
    diasAtraso?: true
    ultimaCobranca?: true
    status?: true
    _all?: true
  }

  export type ClienteInadimplenteAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClienteInadimplente to aggregate.
     */
    where?: ClienteInadimplenteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteInadimplentes to fetch.
     */
    orderBy?: Enumerable<ClienteInadimplenteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteInadimplenteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteInadimplentes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteInadimplentes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClienteInadimplentes
    **/
    _count?: true | ClienteInadimplenteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteInadimplenteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteInadimplenteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteInadimplenteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteInadimplenteMaxAggregateInputType
  }

  export type GetClienteInadimplenteAggregateType<T extends ClienteInadimplenteAggregateArgs> = {
        [P in keyof T & keyof AggregateClienteInadimplente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClienteInadimplente[P]>
      : GetScalarType<T[P], AggregateClienteInadimplente[P]>
  }




  export type ClienteInadimplenteGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ClienteInadimplenteWhereInput
    orderBy?: Enumerable<ClienteInadimplenteOrderByWithAggregationInput>
    by: ClienteInadimplenteScalarFieldEnum[]
    having?: ClienteInadimplenteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteInadimplenteCountAggregateInputType | true
    _avg?: ClienteInadimplenteAvgAggregateInputType
    _sum?: ClienteInadimplenteSumAggregateInputType
    _min?: ClienteInadimplenteMinAggregateInputType
    _max?: ClienteInadimplenteMaxAggregateInputType
  }


  export type ClienteInadimplenteGroupByOutputType = {
    id: number
    clienteId: number
    contratoId: number
    valorEmAberto: Decimal
    diasAtraso: number
    ultimaCobranca: Date | null
    status: string
    _count: ClienteInadimplenteCountAggregateOutputType | null
    _avg: ClienteInadimplenteAvgAggregateOutputType | null
    _sum: ClienteInadimplenteSumAggregateOutputType | null
    _min: ClienteInadimplenteMinAggregateOutputType | null
    _max: ClienteInadimplenteMaxAggregateOutputType | null
  }

  type GetClienteInadimplenteGroupByPayload<T extends ClienteInadimplenteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ClienteInadimplenteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteInadimplenteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteInadimplenteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteInadimplenteGroupByOutputType[P]>
        }
      >
    >


  export type ClienteInadimplenteSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteId?: boolean
    contratoId?: boolean
    valorEmAberto?: boolean
    diasAtraso?: boolean
    ultimaCobranca?: boolean
    status?: boolean
    cliente?: boolean | ClienteArgs<ExtArgs>
    parcelas?: boolean | ClienteInadimplente$parcelasArgs<ExtArgs>
    _count?: boolean | ClienteInadimplenteCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["clienteInadimplente"]>

  export type ClienteInadimplenteSelectScalar = {
    id?: boolean
    clienteId?: boolean
    contratoId?: boolean
    valorEmAberto?: boolean
    diasAtraso?: boolean
    ultimaCobranca?: boolean
    status?: boolean
  }

  export type ClienteInadimplenteInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteArgs<ExtArgs>
    parcelas?: boolean | ClienteInadimplente$parcelasArgs<ExtArgs>
    _count?: boolean | ClienteInadimplenteCountOutputTypeArgs<ExtArgs>
  }


  type ClienteInadimplenteGetPayload<S extends boolean | null | undefined | ClienteInadimplenteArgs> = $Types.GetResult<ClienteInadimplentePayload, S>

  type ClienteInadimplenteCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ClienteInadimplenteFindManyArgs, 'select' | 'include'> & {
      select?: ClienteInadimplenteCountAggregateInputType | true
    }

  export interface ClienteInadimplenteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClienteInadimplente'], meta: { name: 'ClienteInadimplente' } }
    /**
     * Find zero or one ClienteInadimplente that matches the filter.
     * @param {ClienteInadimplenteFindUniqueArgs} args - Arguments to find a ClienteInadimplente
     * @example
     * // Get one ClienteInadimplente
     * const clienteInadimplente = await prisma.clienteInadimplente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClienteInadimplenteFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClienteInadimplenteFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ClienteInadimplente'> extends True ? Prisma__ClienteInadimplenteClient<$Types.GetResult<ClienteInadimplentePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ClienteInadimplenteClient<$Types.GetResult<ClienteInadimplentePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ClienteInadimplente that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClienteInadimplenteFindUniqueOrThrowArgs} args - Arguments to find a ClienteInadimplente
     * @example
     * // Get one ClienteInadimplente
     * const clienteInadimplente = await prisma.clienteInadimplente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClienteInadimplenteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteInadimplenteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ClienteInadimplenteClient<$Types.GetResult<ClienteInadimplentePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ClienteInadimplente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteInadimplenteFindFirstArgs} args - Arguments to find a ClienteInadimplente
     * @example
     * // Get one ClienteInadimplente
     * const clienteInadimplente = await prisma.clienteInadimplente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClienteInadimplenteFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClienteInadimplenteFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ClienteInadimplente'> extends True ? Prisma__ClienteInadimplenteClient<$Types.GetResult<ClienteInadimplentePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ClienteInadimplenteClient<$Types.GetResult<ClienteInadimplentePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ClienteInadimplente that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteInadimplenteFindFirstOrThrowArgs} args - Arguments to find a ClienteInadimplente
     * @example
     * // Get one ClienteInadimplente
     * const clienteInadimplente = await prisma.clienteInadimplente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClienteInadimplenteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteInadimplenteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ClienteInadimplenteClient<$Types.GetResult<ClienteInadimplentePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ClienteInadimplentes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteInadimplenteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClienteInadimplentes
     * const clienteInadimplentes = await prisma.clienteInadimplente.findMany()
     * 
     * // Get first 10 ClienteInadimplentes
     * const clienteInadimplentes = await prisma.clienteInadimplente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteInadimplenteWithIdOnly = await prisma.clienteInadimplente.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClienteInadimplenteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteInadimplenteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ClienteInadimplentePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ClienteInadimplente.
     * @param {ClienteInadimplenteCreateArgs} args - Arguments to create a ClienteInadimplente.
     * @example
     * // Create one ClienteInadimplente
     * const ClienteInadimplente = await prisma.clienteInadimplente.create({
     *   data: {
     *     // ... data to create a ClienteInadimplente
     *   }
     * })
     * 
    **/
    create<T extends ClienteInadimplenteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteInadimplenteCreateArgs<ExtArgs>>
    ): Prisma__ClienteInadimplenteClient<$Types.GetResult<ClienteInadimplentePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ClienteInadimplentes.
     *     @param {ClienteInadimplenteCreateManyArgs} args - Arguments to create many ClienteInadimplentes.
     *     @example
     *     // Create many ClienteInadimplentes
     *     const clienteInadimplente = await prisma.clienteInadimplente.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClienteInadimplenteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteInadimplenteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ClienteInadimplente.
     * @param {ClienteInadimplenteDeleteArgs} args - Arguments to delete one ClienteInadimplente.
     * @example
     * // Delete one ClienteInadimplente
     * const ClienteInadimplente = await prisma.clienteInadimplente.delete({
     *   where: {
     *     // ... filter to delete one ClienteInadimplente
     *   }
     * })
     * 
    **/
    delete<T extends ClienteInadimplenteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteInadimplenteDeleteArgs<ExtArgs>>
    ): Prisma__ClienteInadimplenteClient<$Types.GetResult<ClienteInadimplentePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ClienteInadimplente.
     * @param {ClienteInadimplenteUpdateArgs} args - Arguments to update one ClienteInadimplente.
     * @example
     * // Update one ClienteInadimplente
     * const clienteInadimplente = await prisma.clienteInadimplente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClienteInadimplenteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteInadimplenteUpdateArgs<ExtArgs>>
    ): Prisma__ClienteInadimplenteClient<$Types.GetResult<ClienteInadimplentePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ClienteInadimplentes.
     * @param {ClienteInadimplenteDeleteManyArgs} args - Arguments to filter ClienteInadimplentes to delete.
     * @example
     * // Delete a few ClienteInadimplentes
     * const { count } = await prisma.clienteInadimplente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClienteInadimplenteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteInadimplenteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClienteInadimplentes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteInadimplenteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClienteInadimplentes
     * const clienteInadimplente = await prisma.clienteInadimplente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClienteInadimplenteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteInadimplenteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClienteInadimplente.
     * @param {ClienteInadimplenteUpsertArgs} args - Arguments to update or create a ClienteInadimplente.
     * @example
     * // Update or create a ClienteInadimplente
     * const clienteInadimplente = await prisma.clienteInadimplente.upsert({
     *   create: {
     *     // ... data to create a ClienteInadimplente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClienteInadimplente we want to update
     *   }
     * })
    **/
    upsert<T extends ClienteInadimplenteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteInadimplenteUpsertArgs<ExtArgs>>
    ): Prisma__ClienteInadimplenteClient<$Types.GetResult<ClienteInadimplentePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ClienteInadimplentes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteInadimplenteCountArgs} args - Arguments to filter ClienteInadimplentes to count.
     * @example
     * // Count the number of ClienteInadimplentes
     * const count = await prisma.clienteInadimplente.count({
     *   where: {
     *     // ... the filter for the ClienteInadimplentes we want to count
     *   }
     * })
    **/
    count<T extends ClienteInadimplenteCountArgs>(
      args?: Subset<T, ClienteInadimplenteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteInadimplenteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClienteInadimplente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteInadimplenteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteInadimplenteAggregateArgs>(args: Subset<T, ClienteInadimplenteAggregateArgs>): Prisma.PrismaPromise<GetClienteInadimplenteAggregateType<T>>

    /**
     * Group by ClienteInadimplente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteInadimplenteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteInadimplenteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteInadimplenteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteInadimplenteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteInadimplenteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteInadimplenteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ClienteInadimplente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClienteInadimplenteClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    cliente<T extends ClienteArgs<ExtArgs> = {}>(args?: Subset<T, ClienteArgs<ExtArgs>>): Prisma__ClienteClient<$Types.GetResult<ClientePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    parcelas<T extends ClienteInadimplente$parcelasArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInadimplente$parcelasArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ParcelaInadimplentePayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ClienteInadimplente base type for findUnique actions
   */
  export type ClienteInadimplenteFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInadimplente
     */
    select?: ClienteInadimplenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInadimplenteInclude<ExtArgs> | null
    /**
     * Filter, which ClienteInadimplente to fetch.
     */
    where: ClienteInadimplenteWhereUniqueInput
  }

  /**
   * ClienteInadimplente findUnique
   */
  export interface ClienteInadimplenteFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ClienteInadimplenteFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ClienteInadimplente findUniqueOrThrow
   */
  export type ClienteInadimplenteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInadimplente
     */
    select?: ClienteInadimplenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInadimplenteInclude<ExtArgs> | null
    /**
     * Filter, which ClienteInadimplente to fetch.
     */
    where: ClienteInadimplenteWhereUniqueInput
  }


  /**
   * ClienteInadimplente base type for findFirst actions
   */
  export type ClienteInadimplenteFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInadimplente
     */
    select?: ClienteInadimplenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInadimplenteInclude<ExtArgs> | null
    /**
     * Filter, which ClienteInadimplente to fetch.
     */
    where?: ClienteInadimplenteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteInadimplentes to fetch.
     */
    orderBy?: Enumerable<ClienteInadimplenteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClienteInadimplentes.
     */
    cursor?: ClienteInadimplenteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteInadimplentes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteInadimplentes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClienteInadimplentes.
     */
    distinct?: Enumerable<ClienteInadimplenteScalarFieldEnum>
  }

  /**
   * ClienteInadimplente findFirst
   */
  export interface ClienteInadimplenteFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ClienteInadimplenteFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ClienteInadimplente findFirstOrThrow
   */
  export type ClienteInadimplenteFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInadimplente
     */
    select?: ClienteInadimplenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInadimplenteInclude<ExtArgs> | null
    /**
     * Filter, which ClienteInadimplente to fetch.
     */
    where?: ClienteInadimplenteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteInadimplentes to fetch.
     */
    orderBy?: Enumerable<ClienteInadimplenteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClienteInadimplentes.
     */
    cursor?: ClienteInadimplenteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteInadimplentes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteInadimplentes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClienteInadimplentes.
     */
    distinct?: Enumerable<ClienteInadimplenteScalarFieldEnum>
  }


  /**
   * ClienteInadimplente findMany
   */
  export type ClienteInadimplenteFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInadimplente
     */
    select?: ClienteInadimplenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInadimplenteInclude<ExtArgs> | null
    /**
     * Filter, which ClienteInadimplentes to fetch.
     */
    where?: ClienteInadimplenteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteInadimplentes to fetch.
     */
    orderBy?: Enumerable<ClienteInadimplenteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClienteInadimplentes.
     */
    cursor?: ClienteInadimplenteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteInadimplentes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteInadimplentes.
     */
    skip?: number
    distinct?: Enumerable<ClienteInadimplenteScalarFieldEnum>
  }


  /**
   * ClienteInadimplente create
   */
  export type ClienteInadimplenteCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInadimplente
     */
    select?: ClienteInadimplenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInadimplenteInclude<ExtArgs> | null
    /**
     * The data needed to create a ClienteInadimplente.
     */
    data: XOR<ClienteInadimplenteCreateInput, ClienteInadimplenteUncheckedCreateInput>
  }


  /**
   * ClienteInadimplente createMany
   */
  export type ClienteInadimplenteCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClienteInadimplentes.
     */
    data: Enumerable<ClienteInadimplenteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ClienteInadimplente update
   */
  export type ClienteInadimplenteUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInadimplente
     */
    select?: ClienteInadimplenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInadimplenteInclude<ExtArgs> | null
    /**
     * The data needed to update a ClienteInadimplente.
     */
    data: XOR<ClienteInadimplenteUpdateInput, ClienteInadimplenteUncheckedUpdateInput>
    /**
     * Choose, which ClienteInadimplente to update.
     */
    where: ClienteInadimplenteWhereUniqueInput
  }


  /**
   * ClienteInadimplente updateMany
   */
  export type ClienteInadimplenteUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClienteInadimplentes.
     */
    data: XOR<ClienteInadimplenteUpdateManyMutationInput, ClienteInadimplenteUncheckedUpdateManyInput>
    /**
     * Filter which ClienteInadimplentes to update
     */
    where?: ClienteInadimplenteWhereInput
  }


  /**
   * ClienteInadimplente upsert
   */
  export type ClienteInadimplenteUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInadimplente
     */
    select?: ClienteInadimplenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInadimplenteInclude<ExtArgs> | null
    /**
     * The filter to search for the ClienteInadimplente to update in case it exists.
     */
    where: ClienteInadimplenteWhereUniqueInput
    /**
     * In case the ClienteInadimplente found by the `where` argument doesn't exist, create a new ClienteInadimplente with this data.
     */
    create: XOR<ClienteInadimplenteCreateInput, ClienteInadimplenteUncheckedCreateInput>
    /**
     * In case the ClienteInadimplente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteInadimplenteUpdateInput, ClienteInadimplenteUncheckedUpdateInput>
  }


  /**
   * ClienteInadimplente delete
   */
  export type ClienteInadimplenteDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInadimplente
     */
    select?: ClienteInadimplenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInadimplenteInclude<ExtArgs> | null
    /**
     * Filter which ClienteInadimplente to delete.
     */
    where: ClienteInadimplenteWhereUniqueInput
  }


  /**
   * ClienteInadimplente deleteMany
   */
  export type ClienteInadimplenteDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClienteInadimplentes to delete
     */
    where?: ClienteInadimplenteWhereInput
  }


  /**
   * ClienteInadimplente.parcelas
   */
  export type ClienteInadimplente$parcelasArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParcelaInadimplente
     */
    select?: ParcelaInadimplenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParcelaInadimplenteInclude<ExtArgs> | null
    where?: ParcelaInadimplenteWhereInput
    orderBy?: Enumerable<ParcelaInadimplenteOrderByWithRelationInput>
    cursor?: ParcelaInadimplenteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ParcelaInadimplenteScalarFieldEnum>
  }


  /**
   * ClienteInadimplente without action
   */
  export type ClienteInadimplenteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteInadimplente
     */
    select?: ClienteInadimplenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClienteInadimplenteInclude<ExtArgs> | null
  }



  /**
   * Model ParcelaInadimplente
   */


  export type AggregateParcelaInadimplente = {
    _count: ParcelaInadimplenteCountAggregateOutputType | null
    _avg: ParcelaInadimplenteAvgAggregateOutputType | null
    _sum: ParcelaInadimplenteSumAggregateOutputType | null
    _min: ParcelaInadimplenteMinAggregateOutputType | null
    _max: ParcelaInadimplenteMaxAggregateOutputType | null
  }

  export type ParcelaInadimplenteAvgAggregateOutputType = {
    id: number | null
    clienteInadimplente_id: number | null
    numero: number | null
    valor: Decimal | null
    valorAtualizado: Decimal | null
  }

  export type ParcelaInadimplenteSumAggregateOutputType = {
    id: number | null
    clienteInadimplente_id: number | null
    numero: number | null
    valor: Decimal | null
    valorAtualizado: Decimal | null
  }

  export type ParcelaInadimplenteMinAggregateOutputType = {
    id: number | null
    clienteInadimplente_id: number | null
    numero: number | null
    dataVencimento: Date | null
    valor: Decimal | null
    valorAtualizado: Decimal | null
    status: string | null
  }

  export type ParcelaInadimplenteMaxAggregateOutputType = {
    id: number | null
    clienteInadimplente_id: number | null
    numero: number | null
    dataVencimento: Date | null
    valor: Decimal | null
    valorAtualizado: Decimal | null
    status: string | null
  }

  export type ParcelaInadimplenteCountAggregateOutputType = {
    id: number
    clienteInadimplente_id: number
    numero: number
    dataVencimento: number
    valor: number
    valorAtualizado: number
    status: number
    _all: number
  }


  export type ParcelaInadimplenteAvgAggregateInputType = {
    id?: true
    clienteInadimplente_id?: true
    numero?: true
    valor?: true
    valorAtualizado?: true
  }

  export type ParcelaInadimplenteSumAggregateInputType = {
    id?: true
    clienteInadimplente_id?: true
    numero?: true
    valor?: true
    valorAtualizado?: true
  }

  export type ParcelaInadimplenteMinAggregateInputType = {
    id?: true
    clienteInadimplente_id?: true
    numero?: true
    dataVencimento?: true
    valor?: true
    valorAtualizado?: true
    status?: true
  }

  export type ParcelaInadimplenteMaxAggregateInputType = {
    id?: true
    clienteInadimplente_id?: true
    numero?: true
    dataVencimento?: true
    valor?: true
    valorAtualizado?: true
    status?: true
  }

  export type ParcelaInadimplenteCountAggregateInputType = {
    id?: true
    clienteInadimplente_id?: true
    numero?: true
    dataVencimento?: true
    valor?: true
    valorAtualizado?: true
    status?: true
    _all?: true
  }

  export type ParcelaInadimplenteAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParcelaInadimplente to aggregate.
     */
    where?: ParcelaInadimplenteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParcelaInadimplentes to fetch.
     */
    orderBy?: Enumerable<ParcelaInadimplenteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParcelaInadimplenteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParcelaInadimplentes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParcelaInadimplentes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ParcelaInadimplentes
    **/
    _count?: true | ParcelaInadimplenteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParcelaInadimplenteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParcelaInadimplenteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParcelaInadimplenteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParcelaInadimplenteMaxAggregateInputType
  }

  export type GetParcelaInadimplenteAggregateType<T extends ParcelaInadimplenteAggregateArgs> = {
        [P in keyof T & keyof AggregateParcelaInadimplente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParcelaInadimplente[P]>
      : GetScalarType<T[P], AggregateParcelaInadimplente[P]>
  }




  export type ParcelaInadimplenteGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ParcelaInadimplenteWhereInput
    orderBy?: Enumerable<ParcelaInadimplenteOrderByWithAggregationInput>
    by: ParcelaInadimplenteScalarFieldEnum[]
    having?: ParcelaInadimplenteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParcelaInadimplenteCountAggregateInputType | true
    _avg?: ParcelaInadimplenteAvgAggregateInputType
    _sum?: ParcelaInadimplenteSumAggregateInputType
    _min?: ParcelaInadimplenteMinAggregateInputType
    _max?: ParcelaInadimplenteMaxAggregateInputType
  }


  export type ParcelaInadimplenteGroupByOutputType = {
    id: number
    clienteInadimplente_id: number
    numero: number
    dataVencimento: Date
    valor: Decimal
    valorAtualizado: Decimal
    status: string
    _count: ParcelaInadimplenteCountAggregateOutputType | null
    _avg: ParcelaInadimplenteAvgAggregateOutputType | null
    _sum: ParcelaInadimplenteSumAggregateOutputType | null
    _min: ParcelaInadimplenteMinAggregateOutputType | null
    _max: ParcelaInadimplenteMaxAggregateOutputType | null
  }

  type GetParcelaInadimplenteGroupByPayload<T extends ParcelaInadimplenteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ParcelaInadimplenteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParcelaInadimplenteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParcelaInadimplenteGroupByOutputType[P]>
            : GetScalarType<T[P], ParcelaInadimplenteGroupByOutputType[P]>
        }
      >
    >


  export type ParcelaInadimplenteSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteInadimplente_id?: boolean
    numero?: boolean
    dataVencimento?: boolean
    valor?: boolean
    valorAtualizado?: boolean
    status?: boolean
    clienteInadimplente?: boolean | ClienteInadimplenteArgs<ExtArgs>
  }, ExtArgs["result"]["parcelaInadimplente"]>

  export type ParcelaInadimplenteSelectScalar = {
    id?: boolean
    clienteInadimplente_id?: boolean
    numero?: boolean
    dataVencimento?: boolean
    valor?: boolean
    valorAtualizado?: boolean
    status?: boolean
  }

  export type ParcelaInadimplenteInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    clienteInadimplente?: boolean | ClienteInadimplenteArgs<ExtArgs>
  }


  type ParcelaInadimplenteGetPayload<S extends boolean | null | undefined | ParcelaInadimplenteArgs> = $Types.GetResult<ParcelaInadimplentePayload, S>

  type ParcelaInadimplenteCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ParcelaInadimplenteFindManyArgs, 'select' | 'include'> & {
      select?: ParcelaInadimplenteCountAggregateInputType | true
    }

  export interface ParcelaInadimplenteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ParcelaInadimplente'], meta: { name: 'ParcelaInadimplente' } }
    /**
     * Find zero or one ParcelaInadimplente that matches the filter.
     * @param {ParcelaInadimplenteFindUniqueArgs} args - Arguments to find a ParcelaInadimplente
     * @example
     * // Get one ParcelaInadimplente
     * const parcelaInadimplente = await prisma.parcelaInadimplente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ParcelaInadimplenteFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ParcelaInadimplenteFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ParcelaInadimplente'> extends True ? Prisma__ParcelaInadimplenteClient<$Types.GetResult<ParcelaInadimplentePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ParcelaInadimplenteClient<$Types.GetResult<ParcelaInadimplentePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ParcelaInadimplente that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ParcelaInadimplenteFindUniqueOrThrowArgs} args - Arguments to find a ParcelaInadimplente
     * @example
     * // Get one ParcelaInadimplente
     * const parcelaInadimplente = await prisma.parcelaInadimplente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ParcelaInadimplenteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ParcelaInadimplenteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ParcelaInadimplenteClient<$Types.GetResult<ParcelaInadimplentePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ParcelaInadimplente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelaInadimplenteFindFirstArgs} args - Arguments to find a ParcelaInadimplente
     * @example
     * // Get one ParcelaInadimplente
     * const parcelaInadimplente = await prisma.parcelaInadimplente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ParcelaInadimplenteFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ParcelaInadimplenteFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ParcelaInadimplente'> extends True ? Prisma__ParcelaInadimplenteClient<$Types.GetResult<ParcelaInadimplentePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ParcelaInadimplenteClient<$Types.GetResult<ParcelaInadimplentePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ParcelaInadimplente that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelaInadimplenteFindFirstOrThrowArgs} args - Arguments to find a ParcelaInadimplente
     * @example
     * // Get one ParcelaInadimplente
     * const parcelaInadimplente = await prisma.parcelaInadimplente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ParcelaInadimplenteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ParcelaInadimplenteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ParcelaInadimplenteClient<$Types.GetResult<ParcelaInadimplentePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ParcelaInadimplentes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelaInadimplenteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ParcelaInadimplentes
     * const parcelaInadimplentes = await prisma.parcelaInadimplente.findMany()
     * 
     * // Get first 10 ParcelaInadimplentes
     * const parcelaInadimplentes = await prisma.parcelaInadimplente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parcelaInadimplenteWithIdOnly = await prisma.parcelaInadimplente.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ParcelaInadimplenteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParcelaInadimplenteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ParcelaInadimplentePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ParcelaInadimplente.
     * @param {ParcelaInadimplenteCreateArgs} args - Arguments to create a ParcelaInadimplente.
     * @example
     * // Create one ParcelaInadimplente
     * const ParcelaInadimplente = await prisma.parcelaInadimplente.create({
     *   data: {
     *     // ... data to create a ParcelaInadimplente
     *   }
     * })
     * 
    **/
    create<T extends ParcelaInadimplenteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ParcelaInadimplenteCreateArgs<ExtArgs>>
    ): Prisma__ParcelaInadimplenteClient<$Types.GetResult<ParcelaInadimplentePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ParcelaInadimplentes.
     *     @param {ParcelaInadimplenteCreateManyArgs} args - Arguments to create many ParcelaInadimplentes.
     *     @example
     *     // Create many ParcelaInadimplentes
     *     const parcelaInadimplente = await prisma.parcelaInadimplente.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ParcelaInadimplenteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParcelaInadimplenteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ParcelaInadimplente.
     * @param {ParcelaInadimplenteDeleteArgs} args - Arguments to delete one ParcelaInadimplente.
     * @example
     * // Delete one ParcelaInadimplente
     * const ParcelaInadimplente = await prisma.parcelaInadimplente.delete({
     *   where: {
     *     // ... filter to delete one ParcelaInadimplente
     *   }
     * })
     * 
    **/
    delete<T extends ParcelaInadimplenteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ParcelaInadimplenteDeleteArgs<ExtArgs>>
    ): Prisma__ParcelaInadimplenteClient<$Types.GetResult<ParcelaInadimplentePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ParcelaInadimplente.
     * @param {ParcelaInadimplenteUpdateArgs} args - Arguments to update one ParcelaInadimplente.
     * @example
     * // Update one ParcelaInadimplente
     * const parcelaInadimplente = await prisma.parcelaInadimplente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ParcelaInadimplenteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ParcelaInadimplenteUpdateArgs<ExtArgs>>
    ): Prisma__ParcelaInadimplenteClient<$Types.GetResult<ParcelaInadimplentePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ParcelaInadimplentes.
     * @param {ParcelaInadimplenteDeleteManyArgs} args - Arguments to filter ParcelaInadimplentes to delete.
     * @example
     * // Delete a few ParcelaInadimplentes
     * const { count } = await prisma.parcelaInadimplente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ParcelaInadimplenteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParcelaInadimplenteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParcelaInadimplentes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelaInadimplenteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ParcelaInadimplentes
     * const parcelaInadimplente = await prisma.parcelaInadimplente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ParcelaInadimplenteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ParcelaInadimplenteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ParcelaInadimplente.
     * @param {ParcelaInadimplenteUpsertArgs} args - Arguments to update or create a ParcelaInadimplente.
     * @example
     * // Update or create a ParcelaInadimplente
     * const parcelaInadimplente = await prisma.parcelaInadimplente.upsert({
     *   create: {
     *     // ... data to create a ParcelaInadimplente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ParcelaInadimplente we want to update
     *   }
     * })
    **/
    upsert<T extends ParcelaInadimplenteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ParcelaInadimplenteUpsertArgs<ExtArgs>>
    ): Prisma__ParcelaInadimplenteClient<$Types.GetResult<ParcelaInadimplentePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ParcelaInadimplentes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelaInadimplenteCountArgs} args - Arguments to filter ParcelaInadimplentes to count.
     * @example
     * // Count the number of ParcelaInadimplentes
     * const count = await prisma.parcelaInadimplente.count({
     *   where: {
     *     // ... the filter for the ParcelaInadimplentes we want to count
     *   }
     * })
    **/
    count<T extends ParcelaInadimplenteCountArgs>(
      args?: Subset<T, ParcelaInadimplenteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParcelaInadimplenteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ParcelaInadimplente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelaInadimplenteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParcelaInadimplenteAggregateArgs>(args: Subset<T, ParcelaInadimplenteAggregateArgs>): Prisma.PrismaPromise<GetParcelaInadimplenteAggregateType<T>>

    /**
     * Group by ParcelaInadimplente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelaInadimplenteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParcelaInadimplenteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParcelaInadimplenteGroupByArgs['orderBy'] }
        : { orderBy?: ParcelaInadimplenteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParcelaInadimplenteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParcelaInadimplenteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ParcelaInadimplente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ParcelaInadimplenteClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    clienteInadimplente<T extends ClienteInadimplenteArgs<ExtArgs> = {}>(args?: Subset<T, ClienteInadimplenteArgs<ExtArgs>>): Prisma__ClienteInadimplenteClient<$Types.GetResult<ClienteInadimplentePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ParcelaInadimplente base type for findUnique actions
   */
  export type ParcelaInadimplenteFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParcelaInadimplente
     */
    select?: ParcelaInadimplenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParcelaInadimplenteInclude<ExtArgs> | null
    /**
     * Filter, which ParcelaInadimplente to fetch.
     */
    where: ParcelaInadimplenteWhereUniqueInput
  }

  /**
   * ParcelaInadimplente findUnique
   */
  export interface ParcelaInadimplenteFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ParcelaInadimplenteFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ParcelaInadimplente findUniqueOrThrow
   */
  export type ParcelaInadimplenteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParcelaInadimplente
     */
    select?: ParcelaInadimplenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParcelaInadimplenteInclude<ExtArgs> | null
    /**
     * Filter, which ParcelaInadimplente to fetch.
     */
    where: ParcelaInadimplenteWhereUniqueInput
  }


  /**
   * ParcelaInadimplente base type for findFirst actions
   */
  export type ParcelaInadimplenteFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParcelaInadimplente
     */
    select?: ParcelaInadimplenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParcelaInadimplenteInclude<ExtArgs> | null
    /**
     * Filter, which ParcelaInadimplente to fetch.
     */
    where?: ParcelaInadimplenteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParcelaInadimplentes to fetch.
     */
    orderBy?: Enumerable<ParcelaInadimplenteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParcelaInadimplentes.
     */
    cursor?: ParcelaInadimplenteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParcelaInadimplentes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParcelaInadimplentes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParcelaInadimplentes.
     */
    distinct?: Enumerable<ParcelaInadimplenteScalarFieldEnum>
  }

  /**
   * ParcelaInadimplente findFirst
   */
  export interface ParcelaInadimplenteFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ParcelaInadimplenteFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ParcelaInadimplente findFirstOrThrow
   */
  export type ParcelaInadimplenteFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParcelaInadimplente
     */
    select?: ParcelaInadimplenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParcelaInadimplenteInclude<ExtArgs> | null
    /**
     * Filter, which ParcelaInadimplente to fetch.
     */
    where?: ParcelaInadimplenteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParcelaInadimplentes to fetch.
     */
    orderBy?: Enumerable<ParcelaInadimplenteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParcelaInadimplentes.
     */
    cursor?: ParcelaInadimplenteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParcelaInadimplentes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParcelaInadimplentes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParcelaInadimplentes.
     */
    distinct?: Enumerable<ParcelaInadimplenteScalarFieldEnum>
  }


  /**
   * ParcelaInadimplente findMany
   */
  export type ParcelaInadimplenteFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParcelaInadimplente
     */
    select?: ParcelaInadimplenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParcelaInadimplenteInclude<ExtArgs> | null
    /**
     * Filter, which ParcelaInadimplentes to fetch.
     */
    where?: ParcelaInadimplenteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParcelaInadimplentes to fetch.
     */
    orderBy?: Enumerable<ParcelaInadimplenteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ParcelaInadimplentes.
     */
    cursor?: ParcelaInadimplenteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParcelaInadimplentes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParcelaInadimplentes.
     */
    skip?: number
    distinct?: Enumerable<ParcelaInadimplenteScalarFieldEnum>
  }


  /**
   * ParcelaInadimplente create
   */
  export type ParcelaInadimplenteCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParcelaInadimplente
     */
    select?: ParcelaInadimplenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParcelaInadimplenteInclude<ExtArgs> | null
    /**
     * The data needed to create a ParcelaInadimplente.
     */
    data: XOR<ParcelaInadimplenteCreateInput, ParcelaInadimplenteUncheckedCreateInput>
  }


  /**
   * ParcelaInadimplente createMany
   */
  export type ParcelaInadimplenteCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ParcelaInadimplentes.
     */
    data: Enumerable<ParcelaInadimplenteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ParcelaInadimplente update
   */
  export type ParcelaInadimplenteUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParcelaInadimplente
     */
    select?: ParcelaInadimplenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParcelaInadimplenteInclude<ExtArgs> | null
    /**
     * The data needed to update a ParcelaInadimplente.
     */
    data: XOR<ParcelaInadimplenteUpdateInput, ParcelaInadimplenteUncheckedUpdateInput>
    /**
     * Choose, which ParcelaInadimplente to update.
     */
    where: ParcelaInadimplenteWhereUniqueInput
  }


  /**
   * ParcelaInadimplente updateMany
   */
  export type ParcelaInadimplenteUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ParcelaInadimplentes.
     */
    data: XOR<ParcelaInadimplenteUpdateManyMutationInput, ParcelaInadimplenteUncheckedUpdateManyInput>
    /**
     * Filter which ParcelaInadimplentes to update
     */
    where?: ParcelaInadimplenteWhereInput
  }


  /**
   * ParcelaInadimplente upsert
   */
  export type ParcelaInadimplenteUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParcelaInadimplente
     */
    select?: ParcelaInadimplenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParcelaInadimplenteInclude<ExtArgs> | null
    /**
     * The filter to search for the ParcelaInadimplente to update in case it exists.
     */
    where: ParcelaInadimplenteWhereUniqueInput
    /**
     * In case the ParcelaInadimplente found by the `where` argument doesn't exist, create a new ParcelaInadimplente with this data.
     */
    create: XOR<ParcelaInadimplenteCreateInput, ParcelaInadimplenteUncheckedCreateInput>
    /**
     * In case the ParcelaInadimplente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParcelaInadimplenteUpdateInput, ParcelaInadimplenteUncheckedUpdateInput>
  }


  /**
   * ParcelaInadimplente delete
   */
  export type ParcelaInadimplenteDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParcelaInadimplente
     */
    select?: ParcelaInadimplenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParcelaInadimplenteInclude<ExtArgs> | null
    /**
     * Filter which ParcelaInadimplente to delete.
     */
    where: ParcelaInadimplenteWhereUniqueInput
  }


  /**
   * ParcelaInadimplente deleteMany
   */
  export type ParcelaInadimplenteDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParcelaInadimplentes to delete
     */
    where?: ParcelaInadimplenteWhereInput
  }


  /**
   * ParcelaInadimplente without action
   */
  export type ParcelaInadimplenteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParcelaInadimplente
     */
    select?: ParcelaInadimplenteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParcelaInadimplenteInclude<ExtArgs> | null
  }



  /**
   * Model Interacao
   */


  export type AggregateInteracao = {
    _count: InteracaoCountAggregateOutputType | null
    _avg: InteracaoAvgAggregateOutputType | null
    _sum: InteracaoSumAggregateOutputType | null
    _min: InteracaoMinAggregateOutputType | null
    _max: InteracaoMaxAggregateOutputType | null
  }

  export type InteracaoAvgAggregateOutputType = {
    clienteId: number | null
  }

  export type InteracaoSumAggregateOutputType = {
    clienteId: number | null
  }

  export type InteracaoMinAggregateOutputType = {
    id: string | null
    clienteId: number | null
    tipo: string | null
    data: Date | null
    observacao: string | null
    usuario: string | null
    parcelaId: string | null
  }

  export type InteracaoMaxAggregateOutputType = {
    id: string | null
    clienteId: number | null
    tipo: string | null
    data: Date | null
    observacao: string | null
    usuario: string | null
    parcelaId: string | null
  }

  export type InteracaoCountAggregateOutputType = {
    id: number
    clienteId: number
    tipo: number
    data: number
    observacao: number
    usuario: number
    parcelaId: number
    _all: number
  }


  export type InteracaoAvgAggregateInputType = {
    clienteId?: true
  }

  export type InteracaoSumAggregateInputType = {
    clienteId?: true
  }

  export type InteracaoMinAggregateInputType = {
    id?: true
    clienteId?: true
    tipo?: true
    data?: true
    observacao?: true
    usuario?: true
    parcelaId?: true
  }

  export type InteracaoMaxAggregateInputType = {
    id?: true
    clienteId?: true
    tipo?: true
    data?: true
    observacao?: true
    usuario?: true
    parcelaId?: true
  }

  export type InteracaoCountAggregateInputType = {
    id?: true
    clienteId?: true
    tipo?: true
    data?: true
    observacao?: true
    usuario?: true
    parcelaId?: true
    _all?: true
  }

  export type InteracaoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Interacao to aggregate.
     */
    where?: InteracaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interacaos to fetch.
     */
    orderBy?: Enumerable<InteracaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InteracaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Interacaos
    **/
    _count?: true | InteracaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InteracaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InteracaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InteracaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InteracaoMaxAggregateInputType
  }

  export type GetInteracaoAggregateType<T extends InteracaoAggregateArgs> = {
        [P in keyof T & keyof AggregateInteracao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInteracao[P]>
      : GetScalarType<T[P], AggregateInteracao[P]>
  }




  export type InteracaoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: InteracaoWhereInput
    orderBy?: Enumerable<InteracaoOrderByWithAggregationInput>
    by: InteracaoScalarFieldEnum[]
    having?: InteracaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InteracaoCountAggregateInputType | true
    _avg?: InteracaoAvgAggregateInputType
    _sum?: InteracaoSumAggregateInputType
    _min?: InteracaoMinAggregateInputType
    _max?: InteracaoMaxAggregateInputType
  }


  export type InteracaoGroupByOutputType = {
    id: string
    clienteId: number
    tipo: string
    data: Date
    observacao: string
    usuario: string
    parcelaId: string | null
    _count: InteracaoCountAggregateOutputType | null
    _avg: InteracaoAvgAggregateOutputType | null
    _sum: InteracaoSumAggregateOutputType | null
    _min: InteracaoMinAggregateOutputType | null
    _max: InteracaoMaxAggregateOutputType | null
  }

  type GetInteracaoGroupByPayload<T extends InteracaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<InteracaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InteracaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InteracaoGroupByOutputType[P]>
            : GetScalarType<T[P], InteracaoGroupByOutputType[P]>
        }
      >
    >


  export type InteracaoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteId?: boolean
    tipo?: boolean
    data?: boolean
    observacao?: boolean
    usuario?: boolean
    parcelaId?: boolean
    cliente?: boolean | ClienteArgs<ExtArgs>
  }, ExtArgs["result"]["interacao"]>

  export type InteracaoSelectScalar = {
    id?: boolean
    clienteId?: boolean
    tipo?: boolean
    data?: boolean
    observacao?: boolean
    usuario?: boolean
    parcelaId?: boolean
  }

  export type InteracaoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteArgs<ExtArgs>
  }


  type InteracaoGetPayload<S extends boolean | null | undefined | InteracaoArgs> = $Types.GetResult<InteracaoPayload, S>

  type InteracaoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<InteracaoFindManyArgs, 'select' | 'include'> & {
      select?: InteracaoCountAggregateInputType | true
    }

  export interface InteracaoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Interacao'], meta: { name: 'Interacao' } }
    /**
     * Find zero or one Interacao that matches the filter.
     * @param {InteracaoFindUniqueArgs} args - Arguments to find a Interacao
     * @example
     * // Get one Interacao
     * const interacao = await prisma.interacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InteracaoFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InteracaoFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Interacao'> extends True ? Prisma__InteracaoClient<$Types.GetResult<InteracaoPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__InteracaoClient<$Types.GetResult<InteracaoPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Interacao that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {InteracaoFindUniqueOrThrowArgs} args - Arguments to find a Interacao
     * @example
     * // Get one Interacao
     * const interacao = await prisma.interacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InteracaoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InteracaoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__InteracaoClient<$Types.GetResult<InteracaoPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Interacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteracaoFindFirstArgs} args - Arguments to find a Interacao
     * @example
     * // Get one Interacao
     * const interacao = await prisma.interacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InteracaoFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InteracaoFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Interacao'> extends True ? Prisma__InteracaoClient<$Types.GetResult<InteracaoPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__InteracaoClient<$Types.GetResult<InteracaoPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Interacao that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteracaoFindFirstOrThrowArgs} args - Arguments to find a Interacao
     * @example
     * // Get one Interacao
     * const interacao = await prisma.interacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InteracaoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InteracaoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__InteracaoClient<$Types.GetResult<InteracaoPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Interacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteracaoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Interacaos
     * const interacaos = await prisma.interacao.findMany()
     * 
     * // Get first 10 Interacaos
     * const interacaos = await prisma.interacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const interacaoWithIdOnly = await prisma.interacao.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InteracaoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InteracaoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<InteracaoPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Interacao.
     * @param {InteracaoCreateArgs} args - Arguments to create a Interacao.
     * @example
     * // Create one Interacao
     * const Interacao = await prisma.interacao.create({
     *   data: {
     *     // ... data to create a Interacao
     *   }
     * })
     * 
    **/
    create<T extends InteracaoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, InteracaoCreateArgs<ExtArgs>>
    ): Prisma__InteracaoClient<$Types.GetResult<InteracaoPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Interacaos.
     *     @param {InteracaoCreateManyArgs} args - Arguments to create many Interacaos.
     *     @example
     *     // Create many Interacaos
     *     const interacao = await prisma.interacao.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InteracaoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InteracaoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Interacao.
     * @param {InteracaoDeleteArgs} args - Arguments to delete one Interacao.
     * @example
     * // Delete one Interacao
     * const Interacao = await prisma.interacao.delete({
     *   where: {
     *     // ... filter to delete one Interacao
     *   }
     * })
     * 
    **/
    delete<T extends InteracaoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, InteracaoDeleteArgs<ExtArgs>>
    ): Prisma__InteracaoClient<$Types.GetResult<InteracaoPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Interacao.
     * @param {InteracaoUpdateArgs} args - Arguments to update one Interacao.
     * @example
     * // Update one Interacao
     * const interacao = await prisma.interacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InteracaoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, InteracaoUpdateArgs<ExtArgs>>
    ): Prisma__InteracaoClient<$Types.GetResult<InteracaoPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Interacaos.
     * @param {InteracaoDeleteManyArgs} args - Arguments to filter Interacaos to delete.
     * @example
     * // Delete a few Interacaos
     * const { count } = await prisma.interacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InteracaoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InteracaoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Interacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteracaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Interacaos
     * const interacao = await prisma.interacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InteracaoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, InteracaoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Interacao.
     * @param {InteracaoUpsertArgs} args - Arguments to update or create a Interacao.
     * @example
     * // Update or create a Interacao
     * const interacao = await prisma.interacao.upsert({
     *   create: {
     *     // ... data to create a Interacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Interacao we want to update
     *   }
     * })
    **/
    upsert<T extends InteracaoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, InteracaoUpsertArgs<ExtArgs>>
    ): Prisma__InteracaoClient<$Types.GetResult<InteracaoPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Interacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteracaoCountArgs} args - Arguments to filter Interacaos to count.
     * @example
     * // Count the number of Interacaos
     * const count = await prisma.interacao.count({
     *   where: {
     *     // ... the filter for the Interacaos we want to count
     *   }
     * })
    **/
    count<T extends InteracaoCountArgs>(
      args?: Subset<T, InteracaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InteracaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Interacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteracaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InteracaoAggregateArgs>(args: Subset<T, InteracaoAggregateArgs>): Prisma.PrismaPromise<GetInteracaoAggregateType<T>>

    /**
     * Group by Interacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteracaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InteracaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InteracaoGroupByArgs['orderBy'] }
        : { orderBy?: InteracaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InteracaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInteracaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Interacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InteracaoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    cliente<T extends ClienteArgs<ExtArgs> = {}>(args?: Subset<T, ClienteArgs<ExtArgs>>): Prisma__ClienteClient<$Types.GetResult<ClientePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Interacao base type for findUnique actions
   */
  export type InteracaoFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interacao
     */
    select?: InteracaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InteracaoInclude<ExtArgs> | null
    /**
     * Filter, which Interacao to fetch.
     */
    where: InteracaoWhereUniqueInput
  }

  /**
   * Interacao findUnique
   */
  export interface InteracaoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends InteracaoFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Interacao findUniqueOrThrow
   */
  export type InteracaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interacao
     */
    select?: InteracaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InteracaoInclude<ExtArgs> | null
    /**
     * Filter, which Interacao to fetch.
     */
    where: InteracaoWhereUniqueInput
  }


  /**
   * Interacao base type for findFirst actions
   */
  export type InteracaoFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interacao
     */
    select?: InteracaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InteracaoInclude<ExtArgs> | null
    /**
     * Filter, which Interacao to fetch.
     */
    where?: InteracaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interacaos to fetch.
     */
    orderBy?: Enumerable<InteracaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Interacaos.
     */
    cursor?: InteracaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Interacaos.
     */
    distinct?: Enumerable<InteracaoScalarFieldEnum>
  }

  /**
   * Interacao findFirst
   */
  export interface InteracaoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends InteracaoFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Interacao findFirstOrThrow
   */
  export type InteracaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interacao
     */
    select?: InteracaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InteracaoInclude<ExtArgs> | null
    /**
     * Filter, which Interacao to fetch.
     */
    where?: InteracaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interacaos to fetch.
     */
    orderBy?: Enumerable<InteracaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Interacaos.
     */
    cursor?: InteracaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Interacaos.
     */
    distinct?: Enumerable<InteracaoScalarFieldEnum>
  }


  /**
   * Interacao findMany
   */
  export type InteracaoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interacao
     */
    select?: InteracaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InteracaoInclude<ExtArgs> | null
    /**
     * Filter, which Interacaos to fetch.
     */
    where?: InteracaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interacaos to fetch.
     */
    orderBy?: Enumerable<InteracaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Interacaos.
     */
    cursor?: InteracaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interacaos.
     */
    skip?: number
    distinct?: Enumerable<InteracaoScalarFieldEnum>
  }


  /**
   * Interacao create
   */
  export type InteracaoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interacao
     */
    select?: InteracaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InteracaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Interacao.
     */
    data: XOR<InteracaoCreateInput, InteracaoUncheckedCreateInput>
  }


  /**
   * Interacao createMany
   */
  export type InteracaoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Interacaos.
     */
    data: Enumerable<InteracaoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Interacao update
   */
  export type InteracaoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interacao
     */
    select?: InteracaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InteracaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Interacao.
     */
    data: XOR<InteracaoUpdateInput, InteracaoUncheckedUpdateInput>
    /**
     * Choose, which Interacao to update.
     */
    where: InteracaoWhereUniqueInput
  }


  /**
   * Interacao updateMany
   */
  export type InteracaoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Interacaos.
     */
    data: XOR<InteracaoUpdateManyMutationInput, InteracaoUncheckedUpdateManyInput>
    /**
     * Filter which Interacaos to update
     */
    where?: InteracaoWhereInput
  }


  /**
   * Interacao upsert
   */
  export type InteracaoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interacao
     */
    select?: InteracaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InteracaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Interacao to update in case it exists.
     */
    where: InteracaoWhereUniqueInput
    /**
     * In case the Interacao found by the `where` argument doesn't exist, create a new Interacao with this data.
     */
    create: XOR<InteracaoCreateInput, InteracaoUncheckedCreateInput>
    /**
     * In case the Interacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InteracaoUpdateInput, InteracaoUncheckedUpdateInput>
  }


  /**
   * Interacao delete
   */
  export type InteracaoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interacao
     */
    select?: InteracaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InteracaoInclude<ExtArgs> | null
    /**
     * Filter which Interacao to delete.
     */
    where: InteracaoWhereUniqueInput
  }


  /**
   * Interacao deleteMany
   */
  export type InteracaoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Interacaos to delete
     */
    where?: InteracaoWhereInput
  }


  /**
   * Interacao without action
   */
  export type InteracaoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interacao
     */
    select?: InteracaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InteracaoInclude<ExtArgs> | null
  }



  /**
   * Model Comunicacao
   */


  export type AggregateComunicacao = {
    _count: ComunicacaoCountAggregateOutputType | null
    _avg: ComunicacaoAvgAggregateOutputType | null
    _sum: ComunicacaoSumAggregateOutputType | null
    _min: ComunicacaoMinAggregateOutputType | null
    _max: ComunicacaoMaxAggregateOutputType | null
  }

  export type ComunicacaoAvgAggregateOutputType = {
    clienteId: number | null
  }

  export type ComunicacaoSumAggregateOutputType = {
    clienteId: number | null
  }

  export type ComunicacaoMinAggregateOutputType = {
    id: string | null
    clienteId: number | null
    tipo: string | null
    data: Date | null
    mensagem: string | null
    status: string | null
  }

  export type ComunicacaoMaxAggregateOutputType = {
    id: string | null
    clienteId: number | null
    tipo: string | null
    data: Date | null
    mensagem: string | null
    status: string | null
  }

  export type ComunicacaoCountAggregateOutputType = {
    id: number
    clienteId: number
    tipo: number
    data: number
    mensagem: number
    status: number
    parcelaInfo: number
    anexos: number
    _all: number
  }


  export type ComunicacaoAvgAggregateInputType = {
    clienteId?: true
  }

  export type ComunicacaoSumAggregateInputType = {
    clienteId?: true
  }

  export type ComunicacaoMinAggregateInputType = {
    id?: true
    clienteId?: true
    tipo?: true
    data?: true
    mensagem?: true
    status?: true
  }

  export type ComunicacaoMaxAggregateInputType = {
    id?: true
    clienteId?: true
    tipo?: true
    data?: true
    mensagem?: true
    status?: true
  }

  export type ComunicacaoCountAggregateInputType = {
    id?: true
    clienteId?: true
    tipo?: true
    data?: true
    mensagem?: true
    status?: true
    parcelaInfo?: true
    anexos?: true
    _all?: true
  }

  export type ComunicacaoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comunicacao to aggregate.
     */
    where?: ComunicacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comunicacaos to fetch.
     */
    orderBy?: Enumerable<ComunicacaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComunicacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comunicacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comunicacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comunicacaos
    **/
    _count?: true | ComunicacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComunicacaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComunicacaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComunicacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComunicacaoMaxAggregateInputType
  }

  export type GetComunicacaoAggregateType<T extends ComunicacaoAggregateArgs> = {
        [P in keyof T & keyof AggregateComunicacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComunicacao[P]>
      : GetScalarType<T[P], AggregateComunicacao[P]>
  }




  export type ComunicacaoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ComunicacaoWhereInput
    orderBy?: Enumerable<ComunicacaoOrderByWithAggregationInput>
    by: ComunicacaoScalarFieldEnum[]
    having?: ComunicacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComunicacaoCountAggregateInputType | true
    _avg?: ComunicacaoAvgAggregateInputType
    _sum?: ComunicacaoSumAggregateInputType
    _min?: ComunicacaoMinAggregateInputType
    _max?: ComunicacaoMaxAggregateInputType
  }


  export type ComunicacaoGroupByOutputType = {
    id: string
    clienteId: number
    tipo: string
    data: Date
    mensagem: string
    status: string
    parcelaInfo: JsonValue | null
    anexos: JsonValue | null
    _count: ComunicacaoCountAggregateOutputType | null
    _avg: ComunicacaoAvgAggregateOutputType | null
    _sum: ComunicacaoSumAggregateOutputType | null
    _min: ComunicacaoMinAggregateOutputType | null
    _max: ComunicacaoMaxAggregateOutputType | null
  }

  type GetComunicacaoGroupByPayload<T extends ComunicacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ComunicacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComunicacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComunicacaoGroupByOutputType[P]>
            : GetScalarType<T[P], ComunicacaoGroupByOutputType[P]>
        }
      >
    >


  export type ComunicacaoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteId?: boolean
    tipo?: boolean
    data?: boolean
    mensagem?: boolean
    status?: boolean
    parcelaInfo?: boolean
    anexos?: boolean
    cliente?: boolean | ClienteArgs<ExtArgs>
  }, ExtArgs["result"]["comunicacao"]>

  export type ComunicacaoSelectScalar = {
    id?: boolean
    clienteId?: boolean
    tipo?: boolean
    data?: boolean
    mensagem?: boolean
    status?: boolean
    parcelaInfo?: boolean
    anexos?: boolean
  }

  export type ComunicacaoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteArgs<ExtArgs>
  }


  type ComunicacaoGetPayload<S extends boolean | null | undefined | ComunicacaoArgs> = $Types.GetResult<ComunicacaoPayload, S>

  type ComunicacaoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ComunicacaoFindManyArgs, 'select' | 'include'> & {
      select?: ComunicacaoCountAggregateInputType | true
    }

  export interface ComunicacaoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comunicacao'], meta: { name: 'Comunicacao' } }
    /**
     * Find zero or one Comunicacao that matches the filter.
     * @param {ComunicacaoFindUniqueArgs} args - Arguments to find a Comunicacao
     * @example
     * // Get one Comunicacao
     * const comunicacao = await prisma.comunicacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ComunicacaoFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ComunicacaoFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Comunicacao'> extends True ? Prisma__ComunicacaoClient<$Types.GetResult<ComunicacaoPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ComunicacaoClient<$Types.GetResult<ComunicacaoPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Comunicacao that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ComunicacaoFindUniqueOrThrowArgs} args - Arguments to find a Comunicacao
     * @example
     * // Get one Comunicacao
     * const comunicacao = await prisma.comunicacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ComunicacaoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ComunicacaoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ComunicacaoClient<$Types.GetResult<ComunicacaoPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Comunicacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComunicacaoFindFirstArgs} args - Arguments to find a Comunicacao
     * @example
     * // Get one Comunicacao
     * const comunicacao = await prisma.comunicacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ComunicacaoFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ComunicacaoFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Comunicacao'> extends True ? Prisma__ComunicacaoClient<$Types.GetResult<ComunicacaoPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ComunicacaoClient<$Types.GetResult<ComunicacaoPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Comunicacao that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComunicacaoFindFirstOrThrowArgs} args - Arguments to find a Comunicacao
     * @example
     * // Get one Comunicacao
     * const comunicacao = await prisma.comunicacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ComunicacaoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ComunicacaoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ComunicacaoClient<$Types.GetResult<ComunicacaoPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Comunicacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComunicacaoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comunicacaos
     * const comunicacaos = await prisma.comunicacao.findMany()
     * 
     * // Get first 10 Comunicacaos
     * const comunicacaos = await prisma.comunicacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const comunicacaoWithIdOnly = await prisma.comunicacao.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ComunicacaoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ComunicacaoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ComunicacaoPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Comunicacao.
     * @param {ComunicacaoCreateArgs} args - Arguments to create a Comunicacao.
     * @example
     * // Create one Comunicacao
     * const Comunicacao = await prisma.comunicacao.create({
     *   data: {
     *     // ... data to create a Comunicacao
     *   }
     * })
     * 
    **/
    create<T extends ComunicacaoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ComunicacaoCreateArgs<ExtArgs>>
    ): Prisma__ComunicacaoClient<$Types.GetResult<ComunicacaoPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Comunicacaos.
     *     @param {ComunicacaoCreateManyArgs} args - Arguments to create many Comunicacaos.
     *     @example
     *     // Create many Comunicacaos
     *     const comunicacao = await prisma.comunicacao.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ComunicacaoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ComunicacaoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comunicacao.
     * @param {ComunicacaoDeleteArgs} args - Arguments to delete one Comunicacao.
     * @example
     * // Delete one Comunicacao
     * const Comunicacao = await prisma.comunicacao.delete({
     *   where: {
     *     // ... filter to delete one Comunicacao
     *   }
     * })
     * 
    **/
    delete<T extends ComunicacaoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ComunicacaoDeleteArgs<ExtArgs>>
    ): Prisma__ComunicacaoClient<$Types.GetResult<ComunicacaoPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Comunicacao.
     * @param {ComunicacaoUpdateArgs} args - Arguments to update one Comunicacao.
     * @example
     * // Update one Comunicacao
     * const comunicacao = await prisma.comunicacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ComunicacaoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ComunicacaoUpdateArgs<ExtArgs>>
    ): Prisma__ComunicacaoClient<$Types.GetResult<ComunicacaoPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Comunicacaos.
     * @param {ComunicacaoDeleteManyArgs} args - Arguments to filter Comunicacaos to delete.
     * @example
     * // Delete a few Comunicacaos
     * const { count } = await prisma.comunicacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ComunicacaoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ComunicacaoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comunicacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComunicacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comunicacaos
     * const comunicacao = await prisma.comunicacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ComunicacaoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ComunicacaoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comunicacao.
     * @param {ComunicacaoUpsertArgs} args - Arguments to update or create a Comunicacao.
     * @example
     * // Update or create a Comunicacao
     * const comunicacao = await prisma.comunicacao.upsert({
     *   create: {
     *     // ... data to create a Comunicacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comunicacao we want to update
     *   }
     * })
    **/
    upsert<T extends ComunicacaoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ComunicacaoUpsertArgs<ExtArgs>>
    ): Prisma__ComunicacaoClient<$Types.GetResult<ComunicacaoPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Comunicacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComunicacaoCountArgs} args - Arguments to filter Comunicacaos to count.
     * @example
     * // Count the number of Comunicacaos
     * const count = await prisma.comunicacao.count({
     *   where: {
     *     // ... the filter for the Comunicacaos we want to count
     *   }
     * })
    **/
    count<T extends ComunicacaoCountArgs>(
      args?: Subset<T, ComunicacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComunicacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comunicacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComunicacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComunicacaoAggregateArgs>(args: Subset<T, ComunicacaoAggregateArgs>): Prisma.PrismaPromise<GetComunicacaoAggregateType<T>>

    /**
     * Group by Comunicacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComunicacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComunicacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComunicacaoGroupByArgs['orderBy'] }
        : { orderBy?: ComunicacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComunicacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComunicacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Comunicacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ComunicacaoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    cliente<T extends ClienteArgs<ExtArgs> = {}>(args?: Subset<T, ClienteArgs<ExtArgs>>): Prisma__ClienteClient<$Types.GetResult<ClientePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Comunicacao base type for findUnique actions
   */
  export type ComunicacaoFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comunicacao
     */
    select?: ComunicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComunicacaoInclude<ExtArgs> | null
    /**
     * Filter, which Comunicacao to fetch.
     */
    where: ComunicacaoWhereUniqueInput
  }

  /**
   * Comunicacao findUnique
   */
  export interface ComunicacaoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ComunicacaoFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comunicacao findUniqueOrThrow
   */
  export type ComunicacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comunicacao
     */
    select?: ComunicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComunicacaoInclude<ExtArgs> | null
    /**
     * Filter, which Comunicacao to fetch.
     */
    where: ComunicacaoWhereUniqueInput
  }


  /**
   * Comunicacao base type for findFirst actions
   */
  export type ComunicacaoFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comunicacao
     */
    select?: ComunicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComunicacaoInclude<ExtArgs> | null
    /**
     * Filter, which Comunicacao to fetch.
     */
    where?: ComunicacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comunicacaos to fetch.
     */
    orderBy?: Enumerable<ComunicacaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comunicacaos.
     */
    cursor?: ComunicacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comunicacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comunicacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comunicacaos.
     */
    distinct?: Enumerable<ComunicacaoScalarFieldEnum>
  }

  /**
   * Comunicacao findFirst
   */
  export interface ComunicacaoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ComunicacaoFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comunicacao findFirstOrThrow
   */
  export type ComunicacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comunicacao
     */
    select?: ComunicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComunicacaoInclude<ExtArgs> | null
    /**
     * Filter, which Comunicacao to fetch.
     */
    where?: ComunicacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comunicacaos to fetch.
     */
    orderBy?: Enumerable<ComunicacaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comunicacaos.
     */
    cursor?: ComunicacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comunicacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comunicacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comunicacaos.
     */
    distinct?: Enumerable<ComunicacaoScalarFieldEnum>
  }


  /**
   * Comunicacao findMany
   */
  export type ComunicacaoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comunicacao
     */
    select?: ComunicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComunicacaoInclude<ExtArgs> | null
    /**
     * Filter, which Comunicacaos to fetch.
     */
    where?: ComunicacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comunicacaos to fetch.
     */
    orderBy?: Enumerable<ComunicacaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comunicacaos.
     */
    cursor?: ComunicacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comunicacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comunicacaos.
     */
    skip?: number
    distinct?: Enumerable<ComunicacaoScalarFieldEnum>
  }


  /**
   * Comunicacao create
   */
  export type ComunicacaoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comunicacao
     */
    select?: ComunicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComunicacaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Comunicacao.
     */
    data: XOR<ComunicacaoCreateInput, ComunicacaoUncheckedCreateInput>
  }


  /**
   * Comunicacao createMany
   */
  export type ComunicacaoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comunicacaos.
     */
    data: Enumerable<ComunicacaoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Comunicacao update
   */
  export type ComunicacaoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comunicacao
     */
    select?: ComunicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComunicacaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Comunicacao.
     */
    data: XOR<ComunicacaoUpdateInput, ComunicacaoUncheckedUpdateInput>
    /**
     * Choose, which Comunicacao to update.
     */
    where: ComunicacaoWhereUniqueInput
  }


  /**
   * Comunicacao updateMany
   */
  export type ComunicacaoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comunicacaos.
     */
    data: XOR<ComunicacaoUpdateManyMutationInput, ComunicacaoUncheckedUpdateManyInput>
    /**
     * Filter which Comunicacaos to update
     */
    where?: ComunicacaoWhereInput
  }


  /**
   * Comunicacao upsert
   */
  export type ComunicacaoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comunicacao
     */
    select?: ComunicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComunicacaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Comunicacao to update in case it exists.
     */
    where: ComunicacaoWhereUniqueInput
    /**
     * In case the Comunicacao found by the `where` argument doesn't exist, create a new Comunicacao with this data.
     */
    create: XOR<ComunicacaoCreateInput, ComunicacaoUncheckedCreateInput>
    /**
     * In case the Comunicacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComunicacaoUpdateInput, ComunicacaoUncheckedUpdateInput>
  }


  /**
   * Comunicacao delete
   */
  export type ComunicacaoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comunicacao
     */
    select?: ComunicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComunicacaoInclude<ExtArgs> | null
    /**
     * Filter which Comunicacao to delete.
     */
    where: ComunicacaoWhereUniqueInput
  }


  /**
   * Comunicacao deleteMany
   */
  export type ComunicacaoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comunicacaos to delete
     */
    where?: ComunicacaoWhereInput
  }


  /**
   * Comunicacao without action
   */
  export type ComunicacaoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comunicacao
     */
    select?: ComunicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ComunicacaoInclude<ExtArgs> | null
  }



  /**
   * Model ModeloMensagem
   */


  export type AggregateModeloMensagem = {
    _count: ModeloMensagemCountAggregateOutputType | null
    _min: ModeloMensagemMinAggregateOutputType | null
    _max: ModeloMensagemMaxAggregateOutputType | null
  }

  export type ModeloMensagemMinAggregateOutputType = {
    id: string | null
    nome: string | null
    tipo: string | null
    conteudo: string | null
  }

  export type ModeloMensagemMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    tipo: string | null
    conteudo: string | null
  }

  export type ModeloMensagemCountAggregateOutputType = {
    id: number
    nome: number
    tipo: number
    conteudo: number
    _all: number
  }


  export type ModeloMensagemMinAggregateInputType = {
    id?: true
    nome?: true
    tipo?: true
    conteudo?: true
  }

  export type ModeloMensagemMaxAggregateInputType = {
    id?: true
    nome?: true
    tipo?: true
    conteudo?: true
  }

  export type ModeloMensagemCountAggregateInputType = {
    id?: true
    nome?: true
    tipo?: true
    conteudo?: true
    _all?: true
  }

  export type ModeloMensagemAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ModeloMensagem to aggregate.
     */
    where?: ModeloMensagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ModeloMensagems to fetch.
     */
    orderBy?: Enumerable<ModeloMensagemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ModeloMensagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ModeloMensagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ModeloMensagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ModeloMensagems
    **/
    _count?: true | ModeloMensagemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ModeloMensagemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ModeloMensagemMaxAggregateInputType
  }

  export type GetModeloMensagemAggregateType<T extends ModeloMensagemAggregateArgs> = {
        [P in keyof T & keyof AggregateModeloMensagem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateModeloMensagem[P]>
      : GetScalarType<T[P], AggregateModeloMensagem[P]>
  }




  export type ModeloMensagemGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ModeloMensagemWhereInput
    orderBy?: Enumerable<ModeloMensagemOrderByWithAggregationInput>
    by: ModeloMensagemScalarFieldEnum[]
    having?: ModeloMensagemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ModeloMensagemCountAggregateInputType | true
    _min?: ModeloMensagemMinAggregateInputType
    _max?: ModeloMensagemMaxAggregateInputType
  }


  export type ModeloMensagemGroupByOutputType = {
    id: string
    nome: string
    tipo: string
    conteudo: string
    _count: ModeloMensagemCountAggregateOutputType | null
    _min: ModeloMensagemMinAggregateOutputType | null
    _max: ModeloMensagemMaxAggregateOutputType | null
  }

  type GetModeloMensagemGroupByPayload<T extends ModeloMensagemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ModeloMensagemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ModeloMensagemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ModeloMensagemGroupByOutputType[P]>
            : GetScalarType<T[P], ModeloMensagemGroupByOutputType[P]>
        }
      >
    >


  export type ModeloMensagemSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    tipo?: boolean
    conteudo?: boolean
  }, ExtArgs["result"]["modeloMensagem"]>

  export type ModeloMensagemSelectScalar = {
    id?: boolean
    nome?: boolean
    tipo?: boolean
    conteudo?: boolean
  }


  type ModeloMensagemGetPayload<S extends boolean | null | undefined | ModeloMensagemArgs> = $Types.GetResult<ModeloMensagemPayload, S>

  type ModeloMensagemCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ModeloMensagemFindManyArgs, 'select' | 'include'> & {
      select?: ModeloMensagemCountAggregateInputType | true
    }

  export interface ModeloMensagemDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ModeloMensagem'], meta: { name: 'ModeloMensagem' } }
    /**
     * Find zero or one ModeloMensagem that matches the filter.
     * @param {ModeloMensagemFindUniqueArgs} args - Arguments to find a ModeloMensagem
     * @example
     * // Get one ModeloMensagem
     * const modeloMensagem = await prisma.modeloMensagem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ModeloMensagemFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ModeloMensagemFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ModeloMensagem'> extends True ? Prisma__ModeloMensagemClient<$Types.GetResult<ModeloMensagemPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ModeloMensagemClient<$Types.GetResult<ModeloMensagemPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ModeloMensagem that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ModeloMensagemFindUniqueOrThrowArgs} args - Arguments to find a ModeloMensagem
     * @example
     * // Get one ModeloMensagem
     * const modeloMensagem = await prisma.modeloMensagem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ModeloMensagemFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ModeloMensagemFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ModeloMensagemClient<$Types.GetResult<ModeloMensagemPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ModeloMensagem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloMensagemFindFirstArgs} args - Arguments to find a ModeloMensagem
     * @example
     * // Get one ModeloMensagem
     * const modeloMensagem = await prisma.modeloMensagem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ModeloMensagemFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ModeloMensagemFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ModeloMensagem'> extends True ? Prisma__ModeloMensagemClient<$Types.GetResult<ModeloMensagemPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ModeloMensagemClient<$Types.GetResult<ModeloMensagemPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ModeloMensagem that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloMensagemFindFirstOrThrowArgs} args - Arguments to find a ModeloMensagem
     * @example
     * // Get one ModeloMensagem
     * const modeloMensagem = await prisma.modeloMensagem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ModeloMensagemFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ModeloMensagemFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ModeloMensagemClient<$Types.GetResult<ModeloMensagemPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ModeloMensagems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloMensagemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ModeloMensagems
     * const modeloMensagems = await prisma.modeloMensagem.findMany()
     * 
     * // Get first 10 ModeloMensagems
     * const modeloMensagems = await prisma.modeloMensagem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const modeloMensagemWithIdOnly = await prisma.modeloMensagem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ModeloMensagemFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ModeloMensagemFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ModeloMensagemPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ModeloMensagem.
     * @param {ModeloMensagemCreateArgs} args - Arguments to create a ModeloMensagem.
     * @example
     * // Create one ModeloMensagem
     * const ModeloMensagem = await prisma.modeloMensagem.create({
     *   data: {
     *     // ... data to create a ModeloMensagem
     *   }
     * })
     * 
    **/
    create<T extends ModeloMensagemCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ModeloMensagemCreateArgs<ExtArgs>>
    ): Prisma__ModeloMensagemClient<$Types.GetResult<ModeloMensagemPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ModeloMensagems.
     *     @param {ModeloMensagemCreateManyArgs} args - Arguments to create many ModeloMensagems.
     *     @example
     *     // Create many ModeloMensagems
     *     const modeloMensagem = await prisma.modeloMensagem.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ModeloMensagemCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ModeloMensagemCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ModeloMensagem.
     * @param {ModeloMensagemDeleteArgs} args - Arguments to delete one ModeloMensagem.
     * @example
     * // Delete one ModeloMensagem
     * const ModeloMensagem = await prisma.modeloMensagem.delete({
     *   where: {
     *     // ... filter to delete one ModeloMensagem
     *   }
     * })
     * 
    **/
    delete<T extends ModeloMensagemDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ModeloMensagemDeleteArgs<ExtArgs>>
    ): Prisma__ModeloMensagemClient<$Types.GetResult<ModeloMensagemPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ModeloMensagem.
     * @param {ModeloMensagemUpdateArgs} args - Arguments to update one ModeloMensagem.
     * @example
     * // Update one ModeloMensagem
     * const modeloMensagem = await prisma.modeloMensagem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ModeloMensagemUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ModeloMensagemUpdateArgs<ExtArgs>>
    ): Prisma__ModeloMensagemClient<$Types.GetResult<ModeloMensagemPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ModeloMensagems.
     * @param {ModeloMensagemDeleteManyArgs} args - Arguments to filter ModeloMensagems to delete.
     * @example
     * // Delete a few ModeloMensagems
     * const { count } = await prisma.modeloMensagem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ModeloMensagemDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ModeloMensagemDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ModeloMensagems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloMensagemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ModeloMensagems
     * const modeloMensagem = await prisma.modeloMensagem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ModeloMensagemUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ModeloMensagemUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ModeloMensagem.
     * @param {ModeloMensagemUpsertArgs} args - Arguments to update or create a ModeloMensagem.
     * @example
     * // Update or create a ModeloMensagem
     * const modeloMensagem = await prisma.modeloMensagem.upsert({
     *   create: {
     *     // ... data to create a ModeloMensagem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ModeloMensagem we want to update
     *   }
     * })
    **/
    upsert<T extends ModeloMensagemUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ModeloMensagemUpsertArgs<ExtArgs>>
    ): Prisma__ModeloMensagemClient<$Types.GetResult<ModeloMensagemPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ModeloMensagems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloMensagemCountArgs} args - Arguments to filter ModeloMensagems to count.
     * @example
     * // Count the number of ModeloMensagems
     * const count = await prisma.modeloMensagem.count({
     *   where: {
     *     // ... the filter for the ModeloMensagems we want to count
     *   }
     * })
    **/
    count<T extends ModeloMensagemCountArgs>(
      args?: Subset<T, ModeloMensagemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ModeloMensagemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ModeloMensagem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloMensagemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ModeloMensagemAggregateArgs>(args: Subset<T, ModeloMensagemAggregateArgs>): Prisma.PrismaPromise<GetModeloMensagemAggregateType<T>>

    /**
     * Group by ModeloMensagem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloMensagemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ModeloMensagemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ModeloMensagemGroupByArgs['orderBy'] }
        : { orderBy?: ModeloMensagemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ModeloMensagemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetModeloMensagemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ModeloMensagem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ModeloMensagemClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ModeloMensagem base type for findUnique actions
   */
  export type ModeloMensagemFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloMensagem
     */
    select?: ModeloMensagemSelect<ExtArgs> | null
    /**
     * Filter, which ModeloMensagem to fetch.
     */
    where: ModeloMensagemWhereUniqueInput
  }

  /**
   * ModeloMensagem findUnique
   */
  export interface ModeloMensagemFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ModeloMensagemFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ModeloMensagem findUniqueOrThrow
   */
  export type ModeloMensagemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloMensagem
     */
    select?: ModeloMensagemSelect<ExtArgs> | null
    /**
     * Filter, which ModeloMensagem to fetch.
     */
    where: ModeloMensagemWhereUniqueInput
  }


  /**
   * ModeloMensagem base type for findFirst actions
   */
  export type ModeloMensagemFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloMensagem
     */
    select?: ModeloMensagemSelect<ExtArgs> | null
    /**
     * Filter, which ModeloMensagem to fetch.
     */
    where?: ModeloMensagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ModeloMensagems to fetch.
     */
    orderBy?: Enumerable<ModeloMensagemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ModeloMensagems.
     */
    cursor?: ModeloMensagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ModeloMensagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ModeloMensagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ModeloMensagems.
     */
    distinct?: Enumerable<ModeloMensagemScalarFieldEnum>
  }

  /**
   * ModeloMensagem findFirst
   */
  export interface ModeloMensagemFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ModeloMensagemFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ModeloMensagem findFirstOrThrow
   */
  export type ModeloMensagemFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloMensagem
     */
    select?: ModeloMensagemSelect<ExtArgs> | null
    /**
     * Filter, which ModeloMensagem to fetch.
     */
    where?: ModeloMensagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ModeloMensagems to fetch.
     */
    orderBy?: Enumerable<ModeloMensagemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ModeloMensagems.
     */
    cursor?: ModeloMensagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ModeloMensagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ModeloMensagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ModeloMensagems.
     */
    distinct?: Enumerable<ModeloMensagemScalarFieldEnum>
  }


  /**
   * ModeloMensagem findMany
   */
  export type ModeloMensagemFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloMensagem
     */
    select?: ModeloMensagemSelect<ExtArgs> | null
    /**
     * Filter, which ModeloMensagems to fetch.
     */
    where?: ModeloMensagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ModeloMensagems to fetch.
     */
    orderBy?: Enumerable<ModeloMensagemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ModeloMensagems.
     */
    cursor?: ModeloMensagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ModeloMensagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ModeloMensagems.
     */
    skip?: number
    distinct?: Enumerable<ModeloMensagemScalarFieldEnum>
  }


  /**
   * ModeloMensagem create
   */
  export type ModeloMensagemCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloMensagem
     */
    select?: ModeloMensagemSelect<ExtArgs> | null
    /**
     * The data needed to create a ModeloMensagem.
     */
    data: XOR<ModeloMensagemCreateInput, ModeloMensagemUncheckedCreateInput>
  }


  /**
   * ModeloMensagem createMany
   */
  export type ModeloMensagemCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ModeloMensagems.
     */
    data: Enumerable<ModeloMensagemCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ModeloMensagem update
   */
  export type ModeloMensagemUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloMensagem
     */
    select?: ModeloMensagemSelect<ExtArgs> | null
    /**
     * The data needed to update a ModeloMensagem.
     */
    data: XOR<ModeloMensagemUpdateInput, ModeloMensagemUncheckedUpdateInput>
    /**
     * Choose, which ModeloMensagem to update.
     */
    where: ModeloMensagemWhereUniqueInput
  }


  /**
   * ModeloMensagem updateMany
   */
  export type ModeloMensagemUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ModeloMensagems.
     */
    data: XOR<ModeloMensagemUpdateManyMutationInput, ModeloMensagemUncheckedUpdateManyInput>
    /**
     * Filter which ModeloMensagems to update
     */
    where?: ModeloMensagemWhereInput
  }


  /**
   * ModeloMensagem upsert
   */
  export type ModeloMensagemUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloMensagem
     */
    select?: ModeloMensagemSelect<ExtArgs> | null
    /**
     * The filter to search for the ModeloMensagem to update in case it exists.
     */
    where: ModeloMensagemWhereUniqueInput
    /**
     * In case the ModeloMensagem found by the `where` argument doesn't exist, create a new ModeloMensagem with this data.
     */
    create: XOR<ModeloMensagemCreateInput, ModeloMensagemUncheckedCreateInput>
    /**
     * In case the ModeloMensagem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ModeloMensagemUpdateInput, ModeloMensagemUncheckedUpdateInput>
  }


  /**
   * ModeloMensagem delete
   */
  export type ModeloMensagemDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloMensagem
     */
    select?: ModeloMensagemSelect<ExtArgs> | null
    /**
     * Filter which ModeloMensagem to delete.
     */
    where: ModeloMensagemWhereUniqueInput
  }


  /**
   * ModeloMensagem deleteMany
   */
  export type ModeloMensagemDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ModeloMensagems to delete
     */
    where?: ModeloMensagemWhereInput
  }


  /**
   * ModeloMensagem without action
   */
  export type ModeloMensagemArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloMensagem
     */
    select?: ModeloMensagemSelect<ExtArgs> | null
  }



  /**
   * Model ConfiguracaoGatilhos
   */


  export type AggregateConfiguracaoGatilhos = {
    _count: ConfiguracaoGatilhosCountAggregateOutputType | null
    _avg: ConfiguracaoGatilhosAvgAggregateOutputType | null
    _sum: ConfiguracaoGatilhosSumAggregateOutputType | null
    _min: ConfiguracaoGatilhosMinAggregateOutputType | null
    _max: ConfiguracaoGatilhosMaxAggregateOutputType | null
  }

  export type ConfiguracaoGatilhosAvgAggregateOutputType = {
    id: number | null
    intervaloRepeticao: number | null
    limiteRepeticoes: number | null
  }

  export type ConfiguracaoGatilhosSumAggregateOutputType = {
    id: number | null
    intervaloRepeticao: number | null
    limiteRepeticoes: number | null
  }

  export type ConfiguracaoGatilhosMinAggregateOutputType = {
    id: number | null
    executarAutomaticamente: boolean | null
    horarioExecucao: string | null
    repetirCobrancas: boolean | null
    intervaloRepeticao: number | null
    limitarRepeticoes: boolean | null
    limiteRepeticoes: number | null
    gerarLog: boolean | null
  }

  export type ConfiguracaoGatilhosMaxAggregateOutputType = {
    id: number | null
    executarAutomaticamente: boolean | null
    horarioExecucao: string | null
    repetirCobrancas: boolean | null
    intervaloRepeticao: number | null
    limitarRepeticoes: boolean | null
    limiteRepeticoes: number | null
    gerarLog: boolean | null
  }

  export type ConfiguracaoGatilhosCountAggregateOutputType = {
    id: number
    executarAutomaticamente: number
    horarioExecucao: number
    diasExecucao: number
    repetirCobrancas: number
    intervaloRepeticao: number
    limitarRepeticoes: number
    limiteRepeticoes: number
    gerarLog: number
    gatilhos: number
    _all: number
  }


  export type ConfiguracaoGatilhosAvgAggregateInputType = {
    id?: true
    intervaloRepeticao?: true
    limiteRepeticoes?: true
  }

  export type ConfiguracaoGatilhosSumAggregateInputType = {
    id?: true
    intervaloRepeticao?: true
    limiteRepeticoes?: true
  }

  export type ConfiguracaoGatilhosMinAggregateInputType = {
    id?: true
    executarAutomaticamente?: true
    horarioExecucao?: true
    repetirCobrancas?: true
    intervaloRepeticao?: true
    limitarRepeticoes?: true
    limiteRepeticoes?: true
    gerarLog?: true
  }

  export type ConfiguracaoGatilhosMaxAggregateInputType = {
    id?: true
    executarAutomaticamente?: true
    horarioExecucao?: true
    repetirCobrancas?: true
    intervaloRepeticao?: true
    limitarRepeticoes?: true
    limiteRepeticoes?: true
    gerarLog?: true
  }

  export type ConfiguracaoGatilhosCountAggregateInputType = {
    id?: true
    executarAutomaticamente?: true
    horarioExecucao?: true
    diasExecucao?: true
    repetirCobrancas?: true
    intervaloRepeticao?: true
    limitarRepeticoes?: true
    limiteRepeticoes?: true
    gerarLog?: true
    gatilhos?: true
    _all?: true
  }

  export type ConfiguracaoGatilhosAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConfiguracaoGatilhos to aggregate.
     */
    where?: ConfiguracaoGatilhosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConfiguracaoGatilhos to fetch.
     */
    orderBy?: Enumerable<ConfiguracaoGatilhosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConfiguracaoGatilhosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConfiguracaoGatilhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConfiguracaoGatilhos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConfiguracaoGatilhos
    **/
    _count?: true | ConfiguracaoGatilhosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConfiguracaoGatilhosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConfiguracaoGatilhosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConfiguracaoGatilhosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConfiguracaoGatilhosMaxAggregateInputType
  }

  export type GetConfiguracaoGatilhosAggregateType<T extends ConfiguracaoGatilhosAggregateArgs> = {
        [P in keyof T & keyof AggregateConfiguracaoGatilhos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConfiguracaoGatilhos[P]>
      : GetScalarType<T[P], AggregateConfiguracaoGatilhos[P]>
  }




  export type ConfiguracaoGatilhosGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ConfiguracaoGatilhosWhereInput
    orderBy?: Enumerable<ConfiguracaoGatilhosOrderByWithAggregationInput>
    by: ConfiguracaoGatilhosScalarFieldEnum[]
    having?: ConfiguracaoGatilhosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConfiguracaoGatilhosCountAggregateInputType | true
    _avg?: ConfiguracaoGatilhosAvgAggregateInputType
    _sum?: ConfiguracaoGatilhosSumAggregateInputType
    _min?: ConfiguracaoGatilhosMinAggregateInputType
    _max?: ConfiguracaoGatilhosMaxAggregateInputType
  }


  export type ConfiguracaoGatilhosGroupByOutputType = {
    id: number
    executarAutomaticamente: boolean
    horarioExecucao: string
    diasExecucao: string[]
    repetirCobrancas: boolean
    intervaloRepeticao: number
    limitarRepeticoes: boolean
    limiteRepeticoes: number
    gerarLog: boolean
    gatilhos: JsonValue
    _count: ConfiguracaoGatilhosCountAggregateOutputType | null
    _avg: ConfiguracaoGatilhosAvgAggregateOutputType | null
    _sum: ConfiguracaoGatilhosSumAggregateOutputType | null
    _min: ConfiguracaoGatilhosMinAggregateOutputType | null
    _max: ConfiguracaoGatilhosMaxAggregateOutputType | null
  }

  type GetConfiguracaoGatilhosGroupByPayload<T extends ConfiguracaoGatilhosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ConfiguracaoGatilhosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConfiguracaoGatilhosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConfiguracaoGatilhosGroupByOutputType[P]>
            : GetScalarType<T[P], ConfiguracaoGatilhosGroupByOutputType[P]>
        }
      >
    >


  export type ConfiguracaoGatilhosSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    executarAutomaticamente?: boolean
    horarioExecucao?: boolean
    diasExecucao?: boolean
    repetirCobrancas?: boolean
    intervaloRepeticao?: boolean
    limitarRepeticoes?: boolean
    limiteRepeticoes?: boolean
    gerarLog?: boolean
    gatilhos?: boolean
  }, ExtArgs["result"]["configuracaoGatilhos"]>

  export type ConfiguracaoGatilhosSelectScalar = {
    id?: boolean
    executarAutomaticamente?: boolean
    horarioExecucao?: boolean
    diasExecucao?: boolean
    repetirCobrancas?: boolean
    intervaloRepeticao?: boolean
    limitarRepeticoes?: boolean
    limiteRepeticoes?: boolean
    gerarLog?: boolean
    gatilhos?: boolean
  }


  type ConfiguracaoGatilhosGetPayload<S extends boolean | null | undefined | ConfiguracaoGatilhosArgs> = $Types.GetResult<ConfiguracaoGatilhosPayload, S>

  type ConfiguracaoGatilhosCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ConfiguracaoGatilhosFindManyArgs, 'select' | 'include'> & {
      select?: ConfiguracaoGatilhosCountAggregateInputType | true
    }

  export interface ConfiguracaoGatilhosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConfiguracaoGatilhos'], meta: { name: 'ConfiguracaoGatilhos' } }
    /**
     * Find zero or one ConfiguracaoGatilhos that matches the filter.
     * @param {ConfiguracaoGatilhosFindUniqueArgs} args - Arguments to find a ConfiguracaoGatilhos
     * @example
     * // Get one ConfiguracaoGatilhos
     * const configuracaoGatilhos = await prisma.configuracaoGatilhos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ConfiguracaoGatilhosFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ConfiguracaoGatilhosFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ConfiguracaoGatilhos'> extends True ? Prisma__ConfiguracaoGatilhosClient<$Types.GetResult<ConfiguracaoGatilhosPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ConfiguracaoGatilhosClient<$Types.GetResult<ConfiguracaoGatilhosPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ConfiguracaoGatilhos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ConfiguracaoGatilhosFindUniqueOrThrowArgs} args - Arguments to find a ConfiguracaoGatilhos
     * @example
     * // Get one ConfiguracaoGatilhos
     * const configuracaoGatilhos = await prisma.configuracaoGatilhos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ConfiguracaoGatilhosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ConfiguracaoGatilhosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ConfiguracaoGatilhosClient<$Types.GetResult<ConfiguracaoGatilhosPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ConfiguracaoGatilhos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfiguracaoGatilhosFindFirstArgs} args - Arguments to find a ConfiguracaoGatilhos
     * @example
     * // Get one ConfiguracaoGatilhos
     * const configuracaoGatilhos = await prisma.configuracaoGatilhos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ConfiguracaoGatilhosFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ConfiguracaoGatilhosFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ConfiguracaoGatilhos'> extends True ? Prisma__ConfiguracaoGatilhosClient<$Types.GetResult<ConfiguracaoGatilhosPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ConfiguracaoGatilhosClient<$Types.GetResult<ConfiguracaoGatilhosPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ConfiguracaoGatilhos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfiguracaoGatilhosFindFirstOrThrowArgs} args - Arguments to find a ConfiguracaoGatilhos
     * @example
     * // Get one ConfiguracaoGatilhos
     * const configuracaoGatilhos = await prisma.configuracaoGatilhos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ConfiguracaoGatilhosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ConfiguracaoGatilhosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ConfiguracaoGatilhosClient<$Types.GetResult<ConfiguracaoGatilhosPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ConfiguracaoGatilhos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfiguracaoGatilhosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConfiguracaoGatilhos
     * const configuracaoGatilhos = await prisma.configuracaoGatilhos.findMany()
     * 
     * // Get first 10 ConfiguracaoGatilhos
     * const configuracaoGatilhos = await prisma.configuracaoGatilhos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const configuracaoGatilhosWithIdOnly = await prisma.configuracaoGatilhos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ConfiguracaoGatilhosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConfiguracaoGatilhosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ConfiguracaoGatilhosPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ConfiguracaoGatilhos.
     * @param {ConfiguracaoGatilhosCreateArgs} args - Arguments to create a ConfiguracaoGatilhos.
     * @example
     * // Create one ConfiguracaoGatilhos
     * const ConfiguracaoGatilhos = await prisma.configuracaoGatilhos.create({
     *   data: {
     *     // ... data to create a ConfiguracaoGatilhos
     *   }
     * })
     * 
    **/
    create<T extends ConfiguracaoGatilhosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ConfiguracaoGatilhosCreateArgs<ExtArgs>>
    ): Prisma__ConfiguracaoGatilhosClient<$Types.GetResult<ConfiguracaoGatilhosPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ConfiguracaoGatilhos.
     *     @param {ConfiguracaoGatilhosCreateManyArgs} args - Arguments to create many ConfiguracaoGatilhos.
     *     @example
     *     // Create many ConfiguracaoGatilhos
     *     const configuracaoGatilhos = await prisma.configuracaoGatilhos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ConfiguracaoGatilhosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConfiguracaoGatilhosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ConfiguracaoGatilhos.
     * @param {ConfiguracaoGatilhosDeleteArgs} args - Arguments to delete one ConfiguracaoGatilhos.
     * @example
     * // Delete one ConfiguracaoGatilhos
     * const ConfiguracaoGatilhos = await prisma.configuracaoGatilhos.delete({
     *   where: {
     *     // ... filter to delete one ConfiguracaoGatilhos
     *   }
     * })
     * 
    **/
    delete<T extends ConfiguracaoGatilhosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ConfiguracaoGatilhosDeleteArgs<ExtArgs>>
    ): Prisma__ConfiguracaoGatilhosClient<$Types.GetResult<ConfiguracaoGatilhosPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ConfiguracaoGatilhos.
     * @param {ConfiguracaoGatilhosUpdateArgs} args - Arguments to update one ConfiguracaoGatilhos.
     * @example
     * // Update one ConfiguracaoGatilhos
     * const configuracaoGatilhos = await prisma.configuracaoGatilhos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ConfiguracaoGatilhosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ConfiguracaoGatilhosUpdateArgs<ExtArgs>>
    ): Prisma__ConfiguracaoGatilhosClient<$Types.GetResult<ConfiguracaoGatilhosPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ConfiguracaoGatilhos.
     * @param {ConfiguracaoGatilhosDeleteManyArgs} args - Arguments to filter ConfiguracaoGatilhos to delete.
     * @example
     * // Delete a few ConfiguracaoGatilhos
     * const { count } = await prisma.configuracaoGatilhos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ConfiguracaoGatilhosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConfiguracaoGatilhosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConfiguracaoGatilhos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfiguracaoGatilhosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConfiguracaoGatilhos
     * const configuracaoGatilhos = await prisma.configuracaoGatilhos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ConfiguracaoGatilhosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ConfiguracaoGatilhosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ConfiguracaoGatilhos.
     * @param {ConfiguracaoGatilhosUpsertArgs} args - Arguments to update or create a ConfiguracaoGatilhos.
     * @example
     * // Update or create a ConfiguracaoGatilhos
     * const configuracaoGatilhos = await prisma.configuracaoGatilhos.upsert({
     *   create: {
     *     // ... data to create a ConfiguracaoGatilhos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConfiguracaoGatilhos we want to update
     *   }
     * })
    **/
    upsert<T extends ConfiguracaoGatilhosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ConfiguracaoGatilhosUpsertArgs<ExtArgs>>
    ): Prisma__ConfiguracaoGatilhosClient<$Types.GetResult<ConfiguracaoGatilhosPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ConfiguracaoGatilhos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfiguracaoGatilhosCountArgs} args - Arguments to filter ConfiguracaoGatilhos to count.
     * @example
     * // Count the number of ConfiguracaoGatilhos
     * const count = await prisma.configuracaoGatilhos.count({
     *   where: {
     *     // ... the filter for the ConfiguracaoGatilhos we want to count
     *   }
     * })
    **/
    count<T extends ConfiguracaoGatilhosCountArgs>(
      args?: Subset<T, ConfiguracaoGatilhosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConfiguracaoGatilhosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConfiguracaoGatilhos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfiguracaoGatilhosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConfiguracaoGatilhosAggregateArgs>(args: Subset<T, ConfiguracaoGatilhosAggregateArgs>): Prisma.PrismaPromise<GetConfiguracaoGatilhosAggregateType<T>>

    /**
     * Group by ConfiguracaoGatilhos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfiguracaoGatilhosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConfiguracaoGatilhosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConfiguracaoGatilhosGroupByArgs['orderBy'] }
        : { orderBy?: ConfiguracaoGatilhosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConfiguracaoGatilhosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConfiguracaoGatilhosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ConfiguracaoGatilhos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ConfiguracaoGatilhosClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ConfiguracaoGatilhos base type for findUnique actions
   */
  export type ConfiguracaoGatilhosFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConfiguracaoGatilhos
     */
    select?: ConfiguracaoGatilhosSelect<ExtArgs> | null
    /**
     * Filter, which ConfiguracaoGatilhos to fetch.
     */
    where: ConfiguracaoGatilhosWhereUniqueInput
  }

  /**
   * ConfiguracaoGatilhos findUnique
   */
  export interface ConfiguracaoGatilhosFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ConfiguracaoGatilhosFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ConfiguracaoGatilhos findUniqueOrThrow
   */
  export type ConfiguracaoGatilhosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConfiguracaoGatilhos
     */
    select?: ConfiguracaoGatilhosSelect<ExtArgs> | null
    /**
     * Filter, which ConfiguracaoGatilhos to fetch.
     */
    where: ConfiguracaoGatilhosWhereUniqueInput
  }


  /**
   * ConfiguracaoGatilhos base type for findFirst actions
   */
  export type ConfiguracaoGatilhosFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConfiguracaoGatilhos
     */
    select?: ConfiguracaoGatilhosSelect<ExtArgs> | null
    /**
     * Filter, which ConfiguracaoGatilhos to fetch.
     */
    where?: ConfiguracaoGatilhosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConfiguracaoGatilhos to fetch.
     */
    orderBy?: Enumerable<ConfiguracaoGatilhosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConfiguracaoGatilhos.
     */
    cursor?: ConfiguracaoGatilhosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConfiguracaoGatilhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConfiguracaoGatilhos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConfiguracaoGatilhos.
     */
    distinct?: Enumerable<ConfiguracaoGatilhosScalarFieldEnum>
  }

  /**
   * ConfiguracaoGatilhos findFirst
   */
  export interface ConfiguracaoGatilhosFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ConfiguracaoGatilhosFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ConfiguracaoGatilhos findFirstOrThrow
   */
  export type ConfiguracaoGatilhosFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConfiguracaoGatilhos
     */
    select?: ConfiguracaoGatilhosSelect<ExtArgs> | null
    /**
     * Filter, which ConfiguracaoGatilhos to fetch.
     */
    where?: ConfiguracaoGatilhosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConfiguracaoGatilhos to fetch.
     */
    orderBy?: Enumerable<ConfiguracaoGatilhosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConfiguracaoGatilhos.
     */
    cursor?: ConfiguracaoGatilhosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConfiguracaoGatilhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConfiguracaoGatilhos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConfiguracaoGatilhos.
     */
    distinct?: Enumerable<ConfiguracaoGatilhosScalarFieldEnum>
  }


  /**
   * ConfiguracaoGatilhos findMany
   */
  export type ConfiguracaoGatilhosFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConfiguracaoGatilhos
     */
    select?: ConfiguracaoGatilhosSelect<ExtArgs> | null
    /**
     * Filter, which ConfiguracaoGatilhos to fetch.
     */
    where?: ConfiguracaoGatilhosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConfiguracaoGatilhos to fetch.
     */
    orderBy?: Enumerable<ConfiguracaoGatilhosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConfiguracaoGatilhos.
     */
    cursor?: ConfiguracaoGatilhosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConfiguracaoGatilhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConfiguracaoGatilhos.
     */
    skip?: number
    distinct?: Enumerable<ConfiguracaoGatilhosScalarFieldEnum>
  }


  /**
   * ConfiguracaoGatilhos create
   */
  export type ConfiguracaoGatilhosCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConfiguracaoGatilhos
     */
    select?: ConfiguracaoGatilhosSelect<ExtArgs> | null
    /**
     * The data needed to create a ConfiguracaoGatilhos.
     */
    data: XOR<ConfiguracaoGatilhosCreateInput, ConfiguracaoGatilhosUncheckedCreateInput>
  }


  /**
   * ConfiguracaoGatilhos createMany
   */
  export type ConfiguracaoGatilhosCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConfiguracaoGatilhos.
     */
    data: Enumerable<ConfiguracaoGatilhosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ConfiguracaoGatilhos update
   */
  export type ConfiguracaoGatilhosUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConfiguracaoGatilhos
     */
    select?: ConfiguracaoGatilhosSelect<ExtArgs> | null
    /**
     * The data needed to update a ConfiguracaoGatilhos.
     */
    data: XOR<ConfiguracaoGatilhosUpdateInput, ConfiguracaoGatilhosUncheckedUpdateInput>
    /**
     * Choose, which ConfiguracaoGatilhos to update.
     */
    where: ConfiguracaoGatilhosWhereUniqueInput
  }


  /**
   * ConfiguracaoGatilhos updateMany
   */
  export type ConfiguracaoGatilhosUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConfiguracaoGatilhos.
     */
    data: XOR<ConfiguracaoGatilhosUpdateManyMutationInput, ConfiguracaoGatilhosUncheckedUpdateManyInput>
    /**
     * Filter which ConfiguracaoGatilhos to update
     */
    where?: ConfiguracaoGatilhosWhereInput
  }


  /**
   * ConfiguracaoGatilhos upsert
   */
  export type ConfiguracaoGatilhosUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConfiguracaoGatilhos
     */
    select?: ConfiguracaoGatilhosSelect<ExtArgs> | null
    /**
     * The filter to search for the ConfiguracaoGatilhos to update in case it exists.
     */
    where: ConfiguracaoGatilhosWhereUniqueInput
    /**
     * In case the ConfiguracaoGatilhos found by the `where` argument doesn't exist, create a new ConfiguracaoGatilhos with this data.
     */
    create: XOR<ConfiguracaoGatilhosCreateInput, ConfiguracaoGatilhosUncheckedCreateInput>
    /**
     * In case the ConfiguracaoGatilhos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConfiguracaoGatilhosUpdateInput, ConfiguracaoGatilhosUncheckedUpdateInput>
  }


  /**
   * ConfiguracaoGatilhos delete
   */
  export type ConfiguracaoGatilhosDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConfiguracaoGatilhos
     */
    select?: ConfiguracaoGatilhosSelect<ExtArgs> | null
    /**
     * Filter which ConfiguracaoGatilhos to delete.
     */
    where: ConfiguracaoGatilhosWhereUniqueInput
  }


  /**
   * ConfiguracaoGatilhos deleteMany
   */
  export type ConfiguracaoGatilhosDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConfiguracaoGatilhos to delete
     */
    where?: ConfiguracaoGatilhosWhereInput
  }


  /**
   * ConfiguracaoGatilhos without action
   */
  export type ConfiguracaoGatilhosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConfiguracaoGatilhos
     */
    select?: ConfiguracaoGatilhosSelect<ExtArgs> | null
  }



  /**
   * Model Aditivo
   */


  export type AggregateAditivo = {
    _count: AditivoCountAggregateOutputType | null
    _avg: AditivoAvgAggregateOutputType | null
    _sum: AditivoSumAggregateOutputType | null
    _min: AditivoMinAggregateOutputType | null
    _max: AditivoMaxAggregateOutputType | null
  }

  export type AditivoAvgAggregateOutputType = {
    id: number | null
    contratoId: number | null
    novoValor: Decimal | null
  }

  export type AditivoSumAggregateOutputType = {
    id: number | null
    contratoId: number | null
    novoValor: Decimal | null
  }

  export type AditivoMinAggregateOutputType = {
    id: number | null
    contratoId: number | null
    tipo: string | null
    dataAssinatura: Date | null
    motivoAditivo: string | null
    novoValor: Decimal | null
    novaDataFim: Date | null
    documentoUrl: string | null
    status: string | null
  }

  export type AditivoMaxAggregateOutputType = {
    id: number | null
    contratoId: number | null
    tipo: string | null
    dataAssinatura: Date | null
    motivoAditivo: string | null
    novoValor: Decimal | null
    novaDataFim: Date | null
    documentoUrl: string | null
    status: string | null
  }

  export type AditivoCountAggregateOutputType = {
    id: number
    contratoId: number
    tipo: number
    dataAssinatura: number
    motivoAditivo: number
    novoValor: number
    novaDataFim: number
    documentoUrl: number
    status: number
    _all: number
  }


  export type AditivoAvgAggregateInputType = {
    id?: true
    contratoId?: true
    novoValor?: true
  }

  export type AditivoSumAggregateInputType = {
    id?: true
    contratoId?: true
    novoValor?: true
  }

  export type AditivoMinAggregateInputType = {
    id?: true
    contratoId?: true
    tipo?: true
    dataAssinatura?: true
    motivoAditivo?: true
    novoValor?: true
    novaDataFim?: true
    documentoUrl?: true
    status?: true
  }

  export type AditivoMaxAggregateInputType = {
    id?: true
    contratoId?: true
    tipo?: true
    dataAssinatura?: true
    motivoAditivo?: true
    novoValor?: true
    novaDataFim?: true
    documentoUrl?: true
    status?: true
  }

  export type AditivoCountAggregateInputType = {
    id?: true
    contratoId?: true
    tipo?: true
    dataAssinatura?: true
    motivoAditivo?: true
    novoValor?: true
    novaDataFim?: true
    documentoUrl?: true
    status?: true
    _all?: true
  }

  export type AditivoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Aditivo to aggregate.
     */
    where?: AditivoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aditivos to fetch.
     */
    orderBy?: Enumerable<AditivoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AditivoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aditivos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aditivos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Aditivos
    **/
    _count?: true | AditivoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AditivoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AditivoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AditivoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AditivoMaxAggregateInputType
  }

  export type GetAditivoAggregateType<T extends AditivoAggregateArgs> = {
        [P in keyof T & keyof AggregateAditivo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAditivo[P]>
      : GetScalarType<T[P], AggregateAditivo[P]>
  }




  export type AditivoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AditivoWhereInput
    orderBy?: Enumerable<AditivoOrderByWithAggregationInput>
    by: AditivoScalarFieldEnum[]
    having?: AditivoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AditivoCountAggregateInputType | true
    _avg?: AditivoAvgAggregateInputType
    _sum?: AditivoSumAggregateInputType
    _min?: AditivoMinAggregateInputType
    _max?: AditivoMaxAggregateInputType
  }


  export type AditivoGroupByOutputType = {
    id: number
    contratoId: number
    tipo: string
    dataAssinatura: Date
    motivoAditivo: string
    novoValor: Decimal | null
    novaDataFim: Date | null
    documentoUrl: string | null
    status: string
    _count: AditivoCountAggregateOutputType | null
    _avg: AditivoAvgAggregateOutputType | null
    _sum: AditivoSumAggregateOutputType | null
    _min: AditivoMinAggregateOutputType | null
    _max: AditivoMaxAggregateOutputType | null
  }

  type GetAditivoGroupByPayload<T extends AditivoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AditivoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AditivoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AditivoGroupByOutputType[P]>
            : GetScalarType<T[P], AditivoGroupByOutputType[P]>
        }
      >
    >


  export type AditivoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contratoId?: boolean
    tipo?: boolean
    dataAssinatura?: boolean
    motivoAditivo?: boolean
    novoValor?: boolean
    novaDataFim?: boolean
    documentoUrl?: boolean
    status?: boolean
    contrato?: boolean | ContratoArgs<ExtArgs>
  }, ExtArgs["result"]["aditivo"]>

  export type AditivoSelectScalar = {
    id?: boolean
    contratoId?: boolean
    tipo?: boolean
    dataAssinatura?: boolean
    motivoAditivo?: boolean
    novoValor?: boolean
    novaDataFim?: boolean
    documentoUrl?: boolean
    status?: boolean
  }

  export type AditivoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    contrato?: boolean | ContratoArgs<ExtArgs>
  }


  type AditivoGetPayload<S extends boolean | null | undefined | AditivoArgs> = $Types.GetResult<AditivoPayload, S>

  type AditivoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AditivoFindManyArgs, 'select' | 'include'> & {
      select?: AditivoCountAggregateInputType | true
    }

  export interface AditivoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Aditivo'], meta: { name: 'Aditivo' } }
    /**
     * Find zero or one Aditivo that matches the filter.
     * @param {AditivoFindUniqueArgs} args - Arguments to find a Aditivo
     * @example
     * // Get one Aditivo
     * const aditivo = await prisma.aditivo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AditivoFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AditivoFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Aditivo'> extends True ? Prisma__AditivoClient<$Types.GetResult<AditivoPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AditivoClient<$Types.GetResult<AditivoPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Aditivo that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AditivoFindUniqueOrThrowArgs} args - Arguments to find a Aditivo
     * @example
     * // Get one Aditivo
     * const aditivo = await prisma.aditivo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AditivoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AditivoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AditivoClient<$Types.GetResult<AditivoPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Aditivo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AditivoFindFirstArgs} args - Arguments to find a Aditivo
     * @example
     * // Get one Aditivo
     * const aditivo = await prisma.aditivo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AditivoFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AditivoFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Aditivo'> extends True ? Prisma__AditivoClient<$Types.GetResult<AditivoPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AditivoClient<$Types.GetResult<AditivoPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Aditivo that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AditivoFindFirstOrThrowArgs} args - Arguments to find a Aditivo
     * @example
     * // Get one Aditivo
     * const aditivo = await prisma.aditivo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AditivoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AditivoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AditivoClient<$Types.GetResult<AditivoPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Aditivos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AditivoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Aditivos
     * const aditivos = await prisma.aditivo.findMany()
     * 
     * // Get first 10 Aditivos
     * const aditivos = await prisma.aditivo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aditivoWithIdOnly = await prisma.aditivo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AditivoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AditivoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AditivoPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Aditivo.
     * @param {AditivoCreateArgs} args - Arguments to create a Aditivo.
     * @example
     * // Create one Aditivo
     * const Aditivo = await prisma.aditivo.create({
     *   data: {
     *     // ... data to create a Aditivo
     *   }
     * })
     * 
    **/
    create<T extends AditivoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AditivoCreateArgs<ExtArgs>>
    ): Prisma__AditivoClient<$Types.GetResult<AditivoPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Aditivos.
     *     @param {AditivoCreateManyArgs} args - Arguments to create many Aditivos.
     *     @example
     *     // Create many Aditivos
     *     const aditivo = await prisma.aditivo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AditivoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AditivoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Aditivo.
     * @param {AditivoDeleteArgs} args - Arguments to delete one Aditivo.
     * @example
     * // Delete one Aditivo
     * const Aditivo = await prisma.aditivo.delete({
     *   where: {
     *     // ... filter to delete one Aditivo
     *   }
     * })
     * 
    **/
    delete<T extends AditivoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AditivoDeleteArgs<ExtArgs>>
    ): Prisma__AditivoClient<$Types.GetResult<AditivoPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Aditivo.
     * @param {AditivoUpdateArgs} args - Arguments to update one Aditivo.
     * @example
     * // Update one Aditivo
     * const aditivo = await prisma.aditivo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AditivoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AditivoUpdateArgs<ExtArgs>>
    ): Prisma__AditivoClient<$Types.GetResult<AditivoPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Aditivos.
     * @param {AditivoDeleteManyArgs} args - Arguments to filter Aditivos to delete.
     * @example
     * // Delete a few Aditivos
     * const { count } = await prisma.aditivo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AditivoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AditivoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Aditivos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AditivoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Aditivos
     * const aditivo = await prisma.aditivo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AditivoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AditivoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Aditivo.
     * @param {AditivoUpsertArgs} args - Arguments to update or create a Aditivo.
     * @example
     * // Update or create a Aditivo
     * const aditivo = await prisma.aditivo.upsert({
     *   create: {
     *     // ... data to create a Aditivo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Aditivo we want to update
     *   }
     * })
    **/
    upsert<T extends AditivoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AditivoUpsertArgs<ExtArgs>>
    ): Prisma__AditivoClient<$Types.GetResult<AditivoPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Aditivos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AditivoCountArgs} args - Arguments to filter Aditivos to count.
     * @example
     * // Count the number of Aditivos
     * const count = await prisma.aditivo.count({
     *   where: {
     *     // ... the filter for the Aditivos we want to count
     *   }
     * })
    **/
    count<T extends AditivoCountArgs>(
      args?: Subset<T, AditivoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AditivoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Aditivo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AditivoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AditivoAggregateArgs>(args: Subset<T, AditivoAggregateArgs>): Prisma.PrismaPromise<GetAditivoAggregateType<T>>

    /**
     * Group by Aditivo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AditivoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AditivoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AditivoGroupByArgs['orderBy'] }
        : { orderBy?: AditivoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AditivoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAditivoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Aditivo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AditivoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    contrato<T extends ContratoArgs<ExtArgs> = {}>(args?: Subset<T, ContratoArgs<ExtArgs>>): Prisma__ContratoClient<$Types.GetResult<ContratoPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Aditivo base type for findUnique actions
   */
  export type AditivoFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aditivo
     */
    select?: AditivoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AditivoInclude<ExtArgs> | null
    /**
     * Filter, which Aditivo to fetch.
     */
    where: AditivoWhereUniqueInput
  }

  /**
   * Aditivo findUnique
   */
  export interface AditivoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AditivoFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Aditivo findUniqueOrThrow
   */
  export type AditivoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aditivo
     */
    select?: AditivoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AditivoInclude<ExtArgs> | null
    /**
     * Filter, which Aditivo to fetch.
     */
    where: AditivoWhereUniqueInput
  }


  /**
   * Aditivo base type for findFirst actions
   */
  export type AditivoFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aditivo
     */
    select?: AditivoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AditivoInclude<ExtArgs> | null
    /**
     * Filter, which Aditivo to fetch.
     */
    where?: AditivoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aditivos to fetch.
     */
    orderBy?: Enumerable<AditivoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Aditivos.
     */
    cursor?: AditivoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aditivos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aditivos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Aditivos.
     */
    distinct?: Enumerable<AditivoScalarFieldEnum>
  }

  /**
   * Aditivo findFirst
   */
  export interface AditivoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AditivoFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Aditivo findFirstOrThrow
   */
  export type AditivoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aditivo
     */
    select?: AditivoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AditivoInclude<ExtArgs> | null
    /**
     * Filter, which Aditivo to fetch.
     */
    where?: AditivoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aditivos to fetch.
     */
    orderBy?: Enumerable<AditivoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Aditivos.
     */
    cursor?: AditivoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aditivos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aditivos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Aditivos.
     */
    distinct?: Enumerable<AditivoScalarFieldEnum>
  }


  /**
   * Aditivo findMany
   */
  export type AditivoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aditivo
     */
    select?: AditivoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AditivoInclude<ExtArgs> | null
    /**
     * Filter, which Aditivos to fetch.
     */
    where?: AditivoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aditivos to fetch.
     */
    orderBy?: Enumerable<AditivoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Aditivos.
     */
    cursor?: AditivoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aditivos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aditivos.
     */
    skip?: number
    distinct?: Enumerable<AditivoScalarFieldEnum>
  }


  /**
   * Aditivo create
   */
  export type AditivoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aditivo
     */
    select?: AditivoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AditivoInclude<ExtArgs> | null
    /**
     * The data needed to create a Aditivo.
     */
    data: XOR<AditivoCreateInput, AditivoUncheckedCreateInput>
  }


  /**
   * Aditivo createMany
   */
  export type AditivoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Aditivos.
     */
    data: Enumerable<AditivoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Aditivo update
   */
  export type AditivoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aditivo
     */
    select?: AditivoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AditivoInclude<ExtArgs> | null
    /**
     * The data needed to update a Aditivo.
     */
    data: XOR<AditivoUpdateInput, AditivoUncheckedUpdateInput>
    /**
     * Choose, which Aditivo to update.
     */
    where: AditivoWhereUniqueInput
  }


  /**
   * Aditivo updateMany
   */
  export type AditivoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Aditivos.
     */
    data: XOR<AditivoUpdateManyMutationInput, AditivoUncheckedUpdateManyInput>
    /**
     * Filter which Aditivos to update
     */
    where?: AditivoWhereInput
  }


  /**
   * Aditivo upsert
   */
  export type AditivoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aditivo
     */
    select?: AditivoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AditivoInclude<ExtArgs> | null
    /**
     * The filter to search for the Aditivo to update in case it exists.
     */
    where: AditivoWhereUniqueInput
    /**
     * In case the Aditivo found by the `where` argument doesn't exist, create a new Aditivo with this data.
     */
    create: XOR<AditivoCreateInput, AditivoUncheckedCreateInput>
    /**
     * In case the Aditivo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AditivoUpdateInput, AditivoUncheckedUpdateInput>
  }


  /**
   * Aditivo delete
   */
  export type AditivoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aditivo
     */
    select?: AditivoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AditivoInclude<ExtArgs> | null
    /**
     * Filter which Aditivo to delete.
     */
    where: AditivoWhereUniqueInput
  }


  /**
   * Aditivo deleteMany
   */
  export type AditivoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Aditivos to delete
     */
    where?: AditivoWhereInput
  }


  /**
   * Aditivo without action
   */
  export type AditivoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aditivo
     */
    select?: AditivoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AditivoInclude<ExtArgs> | null
  }



  /**
   * Model Distrato
   */


  export type AggregateDistrato = {
    _count: DistratoCountAggregateOutputType | null
    _avg: DistratoAvgAggregateOutputType | null
    _sum: DistratoSumAggregateOutputType | null
    _min: DistratoMinAggregateOutputType | null
    _max: DistratoMaxAggregateOutputType | null
  }

  export type DistratoAvgAggregateOutputType = {
    id: number | null
    contratoId: number | null
    valorDevolucao: Decimal | null
  }

  export type DistratoSumAggregateOutputType = {
    id: number | null
    contratoId: number | null
    valorDevolucao: Decimal | null
  }

  export type DistratoMinAggregateOutputType = {
    id: number | null
    contratoId: number | null
    dataDistrato: Date | null
    motivoDistrato: string | null
    valorDevolucao: Decimal | null
    documentoUrl: string | null
  }

  export type DistratoMaxAggregateOutputType = {
    id: number | null
    contratoId: number | null
    dataDistrato: Date | null
    motivoDistrato: string | null
    valorDevolucao: Decimal | null
    documentoUrl: string | null
  }

  export type DistratoCountAggregateOutputType = {
    id: number
    contratoId: number
    dataDistrato: number
    motivoDistrato: number
    valorDevolucao: number
    documentoUrl: number
    _all: number
  }


  export type DistratoAvgAggregateInputType = {
    id?: true
    contratoId?: true
    valorDevolucao?: true
  }

  export type DistratoSumAggregateInputType = {
    id?: true
    contratoId?: true
    valorDevolucao?: true
  }

  export type DistratoMinAggregateInputType = {
    id?: true
    contratoId?: true
    dataDistrato?: true
    motivoDistrato?: true
    valorDevolucao?: true
    documentoUrl?: true
  }

  export type DistratoMaxAggregateInputType = {
    id?: true
    contratoId?: true
    dataDistrato?: true
    motivoDistrato?: true
    valorDevolucao?: true
    documentoUrl?: true
  }

  export type DistratoCountAggregateInputType = {
    id?: true
    contratoId?: true
    dataDistrato?: true
    motivoDistrato?: true
    valorDevolucao?: true
    documentoUrl?: true
    _all?: true
  }

  export type DistratoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Distrato to aggregate.
     */
    where?: DistratoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Distratoes to fetch.
     */
    orderBy?: Enumerable<DistratoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DistratoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Distratoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Distratoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Distratoes
    **/
    _count?: true | DistratoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DistratoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DistratoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DistratoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DistratoMaxAggregateInputType
  }

  export type GetDistratoAggregateType<T extends DistratoAggregateArgs> = {
        [P in keyof T & keyof AggregateDistrato]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDistrato[P]>
      : GetScalarType<T[P], AggregateDistrato[P]>
  }




  export type DistratoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DistratoWhereInput
    orderBy?: Enumerable<DistratoOrderByWithAggregationInput>
    by: DistratoScalarFieldEnum[]
    having?: DistratoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DistratoCountAggregateInputType | true
    _avg?: DistratoAvgAggregateInputType
    _sum?: DistratoSumAggregateInputType
    _min?: DistratoMinAggregateInputType
    _max?: DistratoMaxAggregateInputType
  }


  export type DistratoGroupByOutputType = {
    id: number
    contratoId: number
    dataDistrato: Date
    motivoDistrato: string
    valorDevolucao: Decimal | null
    documentoUrl: string | null
    _count: DistratoCountAggregateOutputType | null
    _avg: DistratoAvgAggregateOutputType | null
    _sum: DistratoSumAggregateOutputType | null
    _min: DistratoMinAggregateOutputType | null
    _max: DistratoMaxAggregateOutputType | null
  }

  type GetDistratoGroupByPayload<T extends DistratoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DistratoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DistratoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DistratoGroupByOutputType[P]>
            : GetScalarType<T[P], DistratoGroupByOutputType[P]>
        }
      >
    >


  export type DistratoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contratoId?: boolean
    dataDistrato?: boolean
    motivoDistrato?: boolean
    valorDevolucao?: boolean
    documentoUrl?: boolean
    contrato?: boolean | ContratoArgs<ExtArgs>
  }, ExtArgs["result"]["distrato"]>

  export type DistratoSelectScalar = {
    id?: boolean
    contratoId?: boolean
    dataDistrato?: boolean
    motivoDistrato?: boolean
    valorDevolucao?: boolean
    documentoUrl?: boolean
  }

  export type DistratoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    contrato?: boolean | ContratoArgs<ExtArgs>
  }


  type DistratoGetPayload<S extends boolean | null | undefined | DistratoArgs> = $Types.GetResult<DistratoPayload, S>

  type DistratoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<DistratoFindManyArgs, 'select' | 'include'> & {
      select?: DistratoCountAggregateInputType | true
    }

  export interface DistratoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Distrato'], meta: { name: 'Distrato' } }
    /**
     * Find zero or one Distrato that matches the filter.
     * @param {DistratoFindUniqueArgs} args - Arguments to find a Distrato
     * @example
     * // Get one Distrato
     * const distrato = await prisma.distrato.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DistratoFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DistratoFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Distrato'> extends True ? Prisma__DistratoClient<$Types.GetResult<DistratoPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__DistratoClient<$Types.GetResult<DistratoPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Distrato that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DistratoFindUniqueOrThrowArgs} args - Arguments to find a Distrato
     * @example
     * // Get one Distrato
     * const distrato = await prisma.distrato.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DistratoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DistratoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DistratoClient<$Types.GetResult<DistratoPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Distrato that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistratoFindFirstArgs} args - Arguments to find a Distrato
     * @example
     * // Get one Distrato
     * const distrato = await prisma.distrato.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DistratoFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DistratoFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Distrato'> extends True ? Prisma__DistratoClient<$Types.GetResult<DistratoPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__DistratoClient<$Types.GetResult<DistratoPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Distrato that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistratoFindFirstOrThrowArgs} args - Arguments to find a Distrato
     * @example
     * // Get one Distrato
     * const distrato = await prisma.distrato.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DistratoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DistratoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DistratoClient<$Types.GetResult<DistratoPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Distratoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistratoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Distratoes
     * const distratoes = await prisma.distrato.findMany()
     * 
     * // Get first 10 Distratoes
     * const distratoes = await prisma.distrato.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const distratoWithIdOnly = await prisma.distrato.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DistratoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DistratoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<DistratoPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Distrato.
     * @param {DistratoCreateArgs} args - Arguments to create a Distrato.
     * @example
     * // Create one Distrato
     * const Distrato = await prisma.distrato.create({
     *   data: {
     *     // ... data to create a Distrato
     *   }
     * })
     * 
    **/
    create<T extends DistratoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DistratoCreateArgs<ExtArgs>>
    ): Prisma__DistratoClient<$Types.GetResult<DistratoPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Distratoes.
     *     @param {DistratoCreateManyArgs} args - Arguments to create many Distratoes.
     *     @example
     *     // Create many Distratoes
     *     const distrato = await prisma.distrato.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DistratoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DistratoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Distrato.
     * @param {DistratoDeleteArgs} args - Arguments to delete one Distrato.
     * @example
     * // Delete one Distrato
     * const Distrato = await prisma.distrato.delete({
     *   where: {
     *     // ... filter to delete one Distrato
     *   }
     * })
     * 
    **/
    delete<T extends DistratoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DistratoDeleteArgs<ExtArgs>>
    ): Prisma__DistratoClient<$Types.GetResult<DistratoPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Distrato.
     * @param {DistratoUpdateArgs} args - Arguments to update one Distrato.
     * @example
     * // Update one Distrato
     * const distrato = await prisma.distrato.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DistratoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DistratoUpdateArgs<ExtArgs>>
    ): Prisma__DistratoClient<$Types.GetResult<DistratoPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Distratoes.
     * @param {DistratoDeleteManyArgs} args - Arguments to filter Distratoes to delete.
     * @example
     * // Delete a few Distratoes
     * const { count } = await prisma.distrato.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DistratoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DistratoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Distratoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistratoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Distratoes
     * const distrato = await prisma.distrato.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DistratoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DistratoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Distrato.
     * @param {DistratoUpsertArgs} args - Arguments to update or create a Distrato.
     * @example
     * // Update or create a Distrato
     * const distrato = await prisma.distrato.upsert({
     *   create: {
     *     // ... data to create a Distrato
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Distrato we want to update
     *   }
     * })
    **/
    upsert<T extends DistratoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DistratoUpsertArgs<ExtArgs>>
    ): Prisma__DistratoClient<$Types.GetResult<DistratoPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Distratoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistratoCountArgs} args - Arguments to filter Distratoes to count.
     * @example
     * // Count the number of Distratoes
     * const count = await prisma.distrato.count({
     *   where: {
     *     // ... the filter for the Distratoes we want to count
     *   }
     * })
    **/
    count<T extends DistratoCountArgs>(
      args?: Subset<T, DistratoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DistratoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Distrato.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistratoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DistratoAggregateArgs>(args: Subset<T, DistratoAggregateArgs>): Prisma.PrismaPromise<GetDistratoAggregateType<T>>

    /**
     * Group by Distrato.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistratoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DistratoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DistratoGroupByArgs['orderBy'] }
        : { orderBy?: DistratoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DistratoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDistratoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Distrato.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DistratoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    contrato<T extends ContratoArgs<ExtArgs> = {}>(args?: Subset<T, ContratoArgs<ExtArgs>>): Prisma__ContratoClient<$Types.GetResult<ContratoPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Distrato base type for findUnique actions
   */
  export type DistratoFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Distrato
     */
    select?: DistratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DistratoInclude<ExtArgs> | null
    /**
     * Filter, which Distrato to fetch.
     */
    where: DistratoWhereUniqueInput
  }

  /**
   * Distrato findUnique
   */
  export interface DistratoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DistratoFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Distrato findUniqueOrThrow
   */
  export type DistratoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Distrato
     */
    select?: DistratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DistratoInclude<ExtArgs> | null
    /**
     * Filter, which Distrato to fetch.
     */
    where: DistratoWhereUniqueInput
  }


  /**
   * Distrato base type for findFirst actions
   */
  export type DistratoFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Distrato
     */
    select?: DistratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DistratoInclude<ExtArgs> | null
    /**
     * Filter, which Distrato to fetch.
     */
    where?: DistratoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Distratoes to fetch.
     */
    orderBy?: Enumerable<DistratoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Distratoes.
     */
    cursor?: DistratoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Distratoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Distratoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Distratoes.
     */
    distinct?: Enumerable<DistratoScalarFieldEnum>
  }

  /**
   * Distrato findFirst
   */
  export interface DistratoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DistratoFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Distrato findFirstOrThrow
   */
  export type DistratoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Distrato
     */
    select?: DistratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DistratoInclude<ExtArgs> | null
    /**
     * Filter, which Distrato to fetch.
     */
    where?: DistratoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Distratoes to fetch.
     */
    orderBy?: Enumerable<DistratoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Distratoes.
     */
    cursor?: DistratoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Distratoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Distratoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Distratoes.
     */
    distinct?: Enumerable<DistratoScalarFieldEnum>
  }


  /**
   * Distrato findMany
   */
  export type DistratoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Distrato
     */
    select?: DistratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DistratoInclude<ExtArgs> | null
    /**
     * Filter, which Distratoes to fetch.
     */
    where?: DistratoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Distratoes to fetch.
     */
    orderBy?: Enumerable<DistratoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Distratoes.
     */
    cursor?: DistratoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Distratoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Distratoes.
     */
    skip?: number
    distinct?: Enumerable<DistratoScalarFieldEnum>
  }


  /**
   * Distrato create
   */
  export type DistratoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Distrato
     */
    select?: DistratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DistratoInclude<ExtArgs> | null
    /**
     * The data needed to create a Distrato.
     */
    data: XOR<DistratoCreateInput, DistratoUncheckedCreateInput>
  }


  /**
   * Distrato createMany
   */
  export type DistratoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Distratoes.
     */
    data: Enumerable<DistratoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Distrato update
   */
  export type DistratoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Distrato
     */
    select?: DistratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DistratoInclude<ExtArgs> | null
    /**
     * The data needed to update a Distrato.
     */
    data: XOR<DistratoUpdateInput, DistratoUncheckedUpdateInput>
    /**
     * Choose, which Distrato to update.
     */
    where: DistratoWhereUniqueInput
  }


  /**
   * Distrato updateMany
   */
  export type DistratoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Distratoes.
     */
    data: XOR<DistratoUpdateManyMutationInput, DistratoUncheckedUpdateManyInput>
    /**
     * Filter which Distratoes to update
     */
    where?: DistratoWhereInput
  }


  /**
   * Distrato upsert
   */
  export type DistratoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Distrato
     */
    select?: DistratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DistratoInclude<ExtArgs> | null
    /**
     * The filter to search for the Distrato to update in case it exists.
     */
    where: DistratoWhereUniqueInput
    /**
     * In case the Distrato found by the `where` argument doesn't exist, create a new Distrato with this data.
     */
    create: XOR<DistratoCreateInput, DistratoUncheckedCreateInput>
    /**
     * In case the Distrato was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DistratoUpdateInput, DistratoUncheckedUpdateInput>
  }


  /**
   * Distrato delete
   */
  export type DistratoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Distrato
     */
    select?: DistratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DistratoInclude<ExtArgs> | null
    /**
     * Filter which Distrato to delete.
     */
    where: DistratoWhereUniqueInput
  }


  /**
   * Distrato deleteMany
   */
  export type DistratoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Distratoes to delete
     */
    where?: DistratoWhereInput
  }


  /**
   * Distrato without action
   */
  export type DistratoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Distrato
     */
    select?: DistratoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DistratoInclude<ExtArgs> | null
  }



  /**
   * Model Quitacao
   */


  export type AggregateQuitacao = {
    _count: QuitacaoCountAggregateOutputType | null
    _avg: QuitacaoAvgAggregateOutputType | null
    _sum: QuitacaoSumAggregateOutputType | null
    _min: QuitacaoMinAggregateOutputType | null
    _max: QuitacaoMaxAggregateOutputType | null
  }

  export type QuitacaoAvgAggregateOutputType = {
    id: number | null
    contratoId: number | null
    valorQuitacao: Decimal | null
  }

  export type QuitacaoSumAggregateOutputType = {
    id: number | null
    contratoId: number | null
    valorQuitacao: Decimal | null
  }

  export type QuitacaoMinAggregateOutputType = {
    id: number | null
    contratoId: number | null
    dataQuitacao: Date | null
    valorQuitacao: Decimal | null
    documentoUrl: string | null
  }

  export type QuitacaoMaxAggregateOutputType = {
    id: number | null
    contratoId: number | null
    dataQuitacao: Date | null
    valorQuitacao: Decimal | null
    documentoUrl: string | null
  }

  export type QuitacaoCountAggregateOutputType = {
    id: number
    contratoId: number
    dataQuitacao: number
    valorQuitacao: number
    documentoUrl: number
    _all: number
  }


  export type QuitacaoAvgAggregateInputType = {
    id?: true
    contratoId?: true
    valorQuitacao?: true
  }

  export type QuitacaoSumAggregateInputType = {
    id?: true
    contratoId?: true
    valorQuitacao?: true
  }

  export type QuitacaoMinAggregateInputType = {
    id?: true
    contratoId?: true
    dataQuitacao?: true
    valorQuitacao?: true
    documentoUrl?: true
  }

  export type QuitacaoMaxAggregateInputType = {
    id?: true
    contratoId?: true
    dataQuitacao?: true
    valorQuitacao?: true
    documentoUrl?: true
  }

  export type QuitacaoCountAggregateInputType = {
    id?: true
    contratoId?: true
    dataQuitacao?: true
    valorQuitacao?: true
    documentoUrl?: true
    _all?: true
  }

  export type QuitacaoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quitacao to aggregate.
     */
    where?: QuitacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quitacaos to fetch.
     */
    orderBy?: Enumerable<QuitacaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuitacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quitacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quitacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Quitacaos
    **/
    _count?: true | QuitacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuitacaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuitacaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuitacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuitacaoMaxAggregateInputType
  }

  export type GetQuitacaoAggregateType<T extends QuitacaoAggregateArgs> = {
        [P in keyof T & keyof AggregateQuitacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuitacao[P]>
      : GetScalarType<T[P], AggregateQuitacao[P]>
  }




  export type QuitacaoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: QuitacaoWhereInput
    orderBy?: Enumerable<QuitacaoOrderByWithAggregationInput>
    by: QuitacaoScalarFieldEnum[]
    having?: QuitacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuitacaoCountAggregateInputType | true
    _avg?: QuitacaoAvgAggregateInputType
    _sum?: QuitacaoSumAggregateInputType
    _min?: QuitacaoMinAggregateInputType
    _max?: QuitacaoMaxAggregateInputType
  }


  export type QuitacaoGroupByOutputType = {
    id: number
    contratoId: number
    dataQuitacao: Date
    valorQuitacao: Decimal
    documentoUrl: string | null
    _count: QuitacaoCountAggregateOutputType | null
    _avg: QuitacaoAvgAggregateOutputType | null
    _sum: QuitacaoSumAggregateOutputType | null
    _min: QuitacaoMinAggregateOutputType | null
    _max: QuitacaoMaxAggregateOutputType | null
  }

  type GetQuitacaoGroupByPayload<T extends QuitacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<QuitacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuitacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuitacaoGroupByOutputType[P]>
            : GetScalarType<T[P], QuitacaoGroupByOutputType[P]>
        }
      >
    >


  export type QuitacaoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contratoId?: boolean
    dataQuitacao?: boolean
    valorQuitacao?: boolean
    documentoUrl?: boolean
    contrato?: boolean | ContratoArgs<ExtArgs>
  }, ExtArgs["result"]["quitacao"]>

  export type QuitacaoSelectScalar = {
    id?: boolean
    contratoId?: boolean
    dataQuitacao?: boolean
    valorQuitacao?: boolean
    documentoUrl?: boolean
  }

  export type QuitacaoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    contrato?: boolean | ContratoArgs<ExtArgs>
  }


  type QuitacaoGetPayload<S extends boolean | null | undefined | QuitacaoArgs> = $Types.GetResult<QuitacaoPayload, S>

  type QuitacaoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<QuitacaoFindManyArgs, 'select' | 'include'> & {
      select?: QuitacaoCountAggregateInputType | true
    }

  export interface QuitacaoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Quitacao'], meta: { name: 'Quitacao' } }
    /**
     * Find zero or one Quitacao that matches the filter.
     * @param {QuitacaoFindUniqueArgs} args - Arguments to find a Quitacao
     * @example
     * // Get one Quitacao
     * const quitacao = await prisma.quitacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends QuitacaoFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, QuitacaoFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Quitacao'> extends True ? Prisma__QuitacaoClient<$Types.GetResult<QuitacaoPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__QuitacaoClient<$Types.GetResult<QuitacaoPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Quitacao that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {QuitacaoFindUniqueOrThrowArgs} args - Arguments to find a Quitacao
     * @example
     * // Get one Quitacao
     * const quitacao = await prisma.quitacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends QuitacaoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, QuitacaoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__QuitacaoClient<$Types.GetResult<QuitacaoPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Quitacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuitacaoFindFirstArgs} args - Arguments to find a Quitacao
     * @example
     * // Get one Quitacao
     * const quitacao = await prisma.quitacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends QuitacaoFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, QuitacaoFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Quitacao'> extends True ? Prisma__QuitacaoClient<$Types.GetResult<QuitacaoPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__QuitacaoClient<$Types.GetResult<QuitacaoPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Quitacao that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuitacaoFindFirstOrThrowArgs} args - Arguments to find a Quitacao
     * @example
     * // Get one Quitacao
     * const quitacao = await prisma.quitacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends QuitacaoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, QuitacaoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__QuitacaoClient<$Types.GetResult<QuitacaoPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Quitacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuitacaoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Quitacaos
     * const quitacaos = await prisma.quitacao.findMany()
     * 
     * // Get first 10 Quitacaos
     * const quitacaos = await prisma.quitacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quitacaoWithIdOnly = await prisma.quitacao.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends QuitacaoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuitacaoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<QuitacaoPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Quitacao.
     * @param {QuitacaoCreateArgs} args - Arguments to create a Quitacao.
     * @example
     * // Create one Quitacao
     * const Quitacao = await prisma.quitacao.create({
     *   data: {
     *     // ... data to create a Quitacao
     *   }
     * })
     * 
    **/
    create<T extends QuitacaoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, QuitacaoCreateArgs<ExtArgs>>
    ): Prisma__QuitacaoClient<$Types.GetResult<QuitacaoPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Quitacaos.
     *     @param {QuitacaoCreateManyArgs} args - Arguments to create many Quitacaos.
     *     @example
     *     // Create many Quitacaos
     *     const quitacao = await prisma.quitacao.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends QuitacaoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuitacaoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Quitacao.
     * @param {QuitacaoDeleteArgs} args - Arguments to delete one Quitacao.
     * @example
     * // Delete one Quitacao
     * const Quitacao = await prisma.quitacao.delete({
     *   where: {
     *     // ... filter to delete one Quitacao
     *   }
     * })
     * 
    **/
    delete<T extends QuitacaoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, QuitacaoDeleteArgs<ExtArgs>>
    ): Prisma__QuitacaoClient<$Types.GetResult<QuitacaoPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Quitacao.
     * @param {QuitacaoUpdateArgs} args - Arguments to update one Quitacao.
     * @example
     * // Update one Quitacao
     * const quitacao = await prisma.quitacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends QuitacaoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, QuitacaoUpdateArgs<ExtArgs>>
    ): Prisma__QuitacaoClient<$Types.GetResult<QuitacaoPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Quitacaos.
     * @param {QuitacaoDeleteManyArgs} args - Arguments to filter Quitacaos to delete.
     * @example
     * // Delete a few Quitacaos
     * const { count } = await prisma.quitacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends QuitacaoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuitacaoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quitacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuitacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Quitacaos
     * const quitacao = await prisma.quitacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends QuitacaoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, QuitacaoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Quitacao.
     * @param {QuitacaoUpsertArgs} args - Arguments to update or create a Quitacao.
     * @example
     * // Update or create a Quitacao
     * const quitacao = await prisma.quitacao.upsert({
     *   create: {
     *     // ... data to create a Quitacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Quitacao we want to update
     *   }
     * })
    **/
    upsert<T extends QuitacaoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, QuitacaoUpsertArgs<ExtArgs>>
    ): Prisma__QuitacaoClient<$Types.GetResult<QuitacaoPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Quitacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuitacaoCountArgs} args - Arguments to filter Quitacaos to count.
     * @example
     * // Count the number of Quitacaos
     * const count = await prisma.quitacao.count({
     *   where: {
     *     // ... the filter for the Quitacaos we want to count
     *   }
     * })
    **/
    count<T extends QuitacaoCountArgs>(
      args?: Subset<T, QuitacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuitacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Quitacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuitacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuitacaoAggregateArgs>(args: Subset<T, QuitacaoAggregateArgs>): Prisma.PrismaPromise<GetQuitacaoAggregateType<T>>

    /**
     * Group by Quitacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuitacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuitacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuitacaoGroupByArgs['orderBy'] }
        : { orderBy?: QuitacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuitacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuitacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Quitacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__QuitacaoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    contrato<T extends ContratoArgs<ExtArgs> = {}>(args?: Subset<T, ContratoArgs<ExtArgs>>): Prisma__ContratoClient<$Types.GetResult<ContratoPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Quitacao base type for findUnique actions
   */
  export type QuitacaoFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quitacao
     */
    select?: QuitacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuitacaoInclude<ExtArgs> | null
    /**
     * Filter, which Quitacao to fetch.
     */
    where: QuitacaoWhereUniqueInput
  }

  /**
   * Quitacao findUnique
   */
  export interface QuitacaoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends QuitacaoFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Quitacao findUniqueOrThrow
   */
  export type QuitacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quitacao
     */
    select?: QuitacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuitacaoInclude<ExtArgs> | null
    /**
     * Filter, which Quitacao to fetch.
     */
    where: QuitacaoWhereUniqueInput
  }


  /**
   * Quitacao base type for findFirst actions
   */
  export type QuitacaoFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quitacao
     */
    select?: QuitacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuitacaoInclude<ExtArgs> | null
    /**
     * Filter, which Quitacao to fetch.
     */
    where?: QuitacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quitacaos to fetch.
     */
    orderBy?: Enumerable<QuitacaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quitacaos.
     */
    cursor?: QuitacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quitacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quitacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quitacaos.
     */
    distinct?: Enumerable<QuitacaoScalarFieldEnum>
  }

  /**
   * Quitacao findFirst
   */
  export interface QuitacaoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends QuitacaoFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Quitacao findFirstOrThrow
   */
  export type QuitacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quitacao
     */
    select?: QuitacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuitacaoInclude<ExtArgs> | null
    /**
     * Filter, which Quitacao to fetch.
     */
    where?: QuitacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quitacaos to fetch.
     */
    orderBy?: Enumerable<QuitacaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quitacaos.
     */
    cursor?: QuitacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quitacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quitacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quitacaos.
     */
    distinct?: Enumerable<QuitacaoScalarFieldEnum>
  }


  /**
   * Quitacao findMany
   */
  export type QuitacaoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quitacao
     */
    select?: QuitacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuitacaoInclude<ExtArgs> | null
    /**
     * Filter, which Quitacaos to fetch.
     */
    where?: QuitacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quitacaos to fetch.
     */
    orderBy?: Enumerable<QuitacaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Quitacaos.
     */
    cursor?: QuitacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quitacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quitacaos.
     */
    skip?: number
    distinct?: Enumerable<QuitacaoScalarFieldEnum>
  }


  /**
   * Quitacao create
   */
  export type QuitacaoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quitacao
     */
    select?: QuitacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuitacaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Quitacao.
     */
    data: XOR<QuitacaoCreateInput, QuitacaoUncheckedCreateInput>
  }


  /**
   * Quitacao createMany
   */
  export type QuitacaoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Quitacaos.
     */
    data: Enumerable<QuitacaoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Quitacao update
   */
  export type QuitacaoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quitacao
     */
    select?: QuitacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuitacaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Quitacao.
     */
    data: XOR<QuitacaoUpdateInput, QuitacaoUncheckedUpdateInput>
    /**
     * Choose, which Quitacao to update.
     */
    where: QuitacaoWhereUniqueInput
  }


  /**
   * Quitacao updateMany
   */
  export type QuitacaoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Quitacaos.
     */
    data: XOR<QuitacaoUpdateManyMutationInput, QuitacaoUncheckedUpdateManyInput>
    /**
     * Filter which Quitacaos to update
     */
    where?: QuitacaoWhereInput
  }


  /**
   * Quitacao upsert
   */
  export type QuitacaoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quitacao
     */
    select?: QuitacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuitacaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Quitacao to update in case it exists.
     */
    where: QuitacaoWhereUniqueInput
    /**
     * In case the Quitacao found by the `where` argument doesn't exist, create a new Quitacao with this data.
     */
    create: XOR<QuitacaoCreateInput, QuitacaoUncheckedCreateInput>
    /**
     * In case the Quitacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuitacaoUpdateInput, QuitacaoUncheckedUpdateInput>
  }


  /**
   * Quitacao delete
   */
  export type QuitacaoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quitacao
     */
    select?: QuitacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuitacaoInclude<ExtArgs> | null
    /**
     * Filter which Quitacao to delete.
     */
    where: QuitacaoWhereUniqueInput
  }


  /**
   * Quitacao deleteMany
   */
  export type QuitacaoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quitacaos to delete
     */
    where?: QuitacaoWhereInput
  }


  /**
   * Quitacao without action
   */
  export type QuitacaoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quitacao
     */
    select?: QuitacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuitacaoInclude<ExtArgs> | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    role: string | null
    status: boolean | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    role: string | null
    status: boolean | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    role: number
    permissions: number
    status: number
    lastLogin: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    status?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    status?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    permissions?: true
    status?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    name: string
    role: string
    permissions: JsonValue | null
    status: boolean
    lastLogin: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    permissions?: boolean
    status?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    permissions?: boolean
    status?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  type UserGetPayload<S extends boolean | null | undefined | UserArgs> = $Types.GetResult<UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }



  /**
   * Model Parcela
   */


  export type AggregateParcela = {
    _count: ParcelaCountAggregateOutputType | null
    _avg: ParcelaAvgAggregateOutputType | null
    _sum: ParcelaSumAggregateOutputType | null
    _min: ParcelaMinAggregateOutputType | null
    _max: ParcelaMaxAggregateOutputType | null
  }

  export type ParcelaAvgAggregateOutputType = {
    id: number | null
    contratoId: number | null
    numero: number | null
    valor: Decimal | null
    valorPago: Decimal | null
    boletoId: number | null
  }

  export type ParcelaSumAggregateOutputType = {
    id: number | null
    contratoId: number | null
    numero: number | null
    valor: Decimal | null
    valorPago: Decimal | null
    boletoId: number | null
  }

  export type ParcelaMinAggregateOutputType = {
    id: number | null
    contratoId: number | null
    numero: number | null
    valor: Decimal | null
    dataVencimento: Date | null
    status: string | null
    dataPagamento: Date | null
    valorPago: Decimal | null
    formaPagamento: string | null
    observacoes: string | null
    dataCriacao: Date | null
    boletoId: number | null
  }

  export type ParcelaMaxAggregateOutputType = {
    id: number | null
    contratoId: number | null
    numero: number | null
    valor: Decimal | null
    dataVencimento: Date | null
    status: string | null
    dataPagamento: Date | null
    valorPago: Decimal | null
    formaPagamento: string | null
    observacoes: string | null
    dataCriacao: Date | null
    boletoId: number | null
  }

  export type ParcelaCountAggregateOutputType = {
    id: number
    contratoId: number
    numero: number
    valor: number
    dataVencimento: number
    status: number
    dataPagamento: number
    valorPago: number
    formaPagamento: number
    observacoes: number
    dataCriacao: number
    boletoId: number
    _all: number
  }


  export type ParcelaAvgAggregateInputType = {
    id?: true
    contratoId?: true
    numero?: true
    valor?: true
    valorPago?: true
    boletoId?: true
  }

  export type ParcelaSumAggregateInputType = {
    id?: true
    contratoId?: true
    numero?: true
    valor?: true
    valorPago?: true
    boletoId?: true
  }

  export type ParcelaMinAggregateInputType = {
    id?: true
    contratoId?: true
    numero?: true
    valor?: true
    dataVencimento?: true
    status?: true
    dataPagamento?: true
    valorPago?: true
    formaPagamento?: true
    observacoes?: true
    dataCriacao?: true
    boletoId?: true
  }

  export type ParcelaMaxAggregateInputType = {
    id?: true
    contratoId?: true
    numero?: true
    valor?: true
    dataVencimento?: true
    status?: true
    dataPagamento?: true
    valorPago?: true
    formaPagamento?: true
    observacoes?: true
    dataCriacao?: true
    boletoId?: true
  }

  export type ParcelaCountAggregateInputType = {
    id?: true
    contratoId?: true
    numero?: true
    valor?: true
    dataVencimento?: true
    status?: true
    dataPagamento?: true
    valorPago?: true
    formaPagamento?: true
    observacoes?: true
    dataCriacao?: true
    boletoId?: true
    _all?: true
  }

  export type ParcelaAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parcela to aggregate.
     */
    where?: ParcelaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parcelas to fetch.
     */
    orderBy?: Enumerable<ParcelaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParcelaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parcelas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parcelas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Parcelas
    **/
    _count?: true | ParcelaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParcelaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParcelaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParcelaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParcelaMaxAggregateInputType
  }

  export type GetParcelaAggregateType<T extends ParcelaAggregateArgs> = {
        [P in keyof T & keyof AggregateParcela]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParcela[P]>
      : GetScalarType<T[P], AggregateParcela[P]>
  }




  export type ParcelaGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ParcelaWhereInput
    orderBy?: Enumerable<ParcelaOrderByWithAggregationInput>
    by: ParcelaScalarFieldEnum[]
    having?: ParcelaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParcelaCountAggregateInputType | true
    _avg?: ParcelaAvgAggregateInputType
    _sum?: ParcelaSumAggregateInputType
    _min?: ParcelaMinAggregateInputType
    _max?: ParcelaMaxAggregateInputType
  }


  export type ParcelaGroupByOutputType = {
    id: number
    contratoId: number
    numero: number
    valor: Decimal
    dataVencimento: Date
    status: string
    dataPagamento: Date | null
    valorPago: Decimal | null
    formaPagamento: string | null
    observacoes: string | null
    dataCriacao: Date
    boletoId: number | null
    _count: ParcelaCountAggregateOutputType | null
    _avg: ParcelaAvgAggregateOutputType | null
    _sum: ParcelaSumAggregateOutputType | null
    _min: ParcelaMinAggregateOutputType | null
    _max: ParcelaMaxAggregateOutputType | null
  }

  type GetParcelaGroupByPayload<T extends ParcelaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ParcelaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParcelaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParcelaGroupByOutputType[P]>
            : GetScalarType<T[P], ParcelaGroupByOutputType[P]>
        }
      >
    >


  export type ParcelaSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contratoId?: boolean
    numero?: boolean
    valor?: boolean
    dataVencimento?: boolean
    status?: boolean
    dataPagamento?: boolean
    valorPago?: boolean
    formaPagamento?: boolean
    observacoes?: boolean
    dataCriacao?: boolean
    boletoId?: boolean
    contrato?: boolean | ContratoArgs<ExtArgs>
    boleto?: boolean | BoletoArgs<ExtArgs>
  }, ExtArgs["result"]["parcela"]>

  export type ParcelaSelectScalar = {
    id?: boolean
    contratoId?: boolean
    numero?: boolean
    valor?: boolean
    dataVencimento?: boolean
    status?: boolean
    dataPagamento?: boolean
    valorPago?: boolean
    formaPagamento?: boolean
    observacoes?: boolean
    dataCriacao?: boolean
    boletoId?: boolean
  }

  export type ParcelaInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    contrato?: boolean | ContratoArgs<ExtArgs>
    boleto?: boolean | BoletoArgs<ExtArgs>
  }


  type ParcelaGetPayload<S extends boolean | null | undefined | ParcelaArgs> = $Types.GetResult<ParcelaPayload, S>

  type ParcelaCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ParcelaFindManyArgs, 'select' | 'include'> & {
      select?: ParcelaCountAggregateInputType | true
    }

  export interface ParcelaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Parcela'], meta: { name: 'Parcela' } }
    /**
     * Find zero or one Parcela that matches the filter.
     * @param {ParcelaFindUniqueArgs} args - Arguments to find a Parcela
     * @example
     * // Get one Parcela
     * const parcela = await prisma.parcela.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ParcelaFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ParcelaFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Parcela'> extends True ? Prisma__ParcelaClient<$Types.GetResult<ParcelaPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ParcelaClient<$Types.GetResult<ParcelaPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Parcela that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ParcelaFindUniqueOrThrowArgs} args - Arguments to find a Parcela
     * @example
     * // Get one Parcela
     * const parcela = await prisma.parcela.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ParcelaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ParcelaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ParcelaClient<$Types.GetResult<ParcelaPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Parcela that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelaFindFirstArgs} args - Arguments to find a Parcela
     * @example
     * // Get one Parcela
     * const parcela = await prisma.parcela.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ParcelaFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ParcelaFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Parcela'> extends True ? Prisma__ParcelaClient<$Types.GetResult<ParcelaPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ParcelaClient<$Types.GetResult<ParcelaPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Parcela that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelaFindFirstOrThrowArgs} args - Arguments to find a Parcela
     * @example
     * // Get one Parcela
     * const parcela = await prisma.parcela.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ParcelaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ParcelaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ParcelaClient<$Types.GetResult<ParcelaPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Parcelas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Parcelas
     * const parcelas = await prisma.parcela.findMany()
     * 
     * // Get first 10 Parcelas
     * const parcelas = await prisma.parcela.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parcelaWithIdOnly = await prisma.parcela.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ParcelaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParcelaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ParcelaPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Parcela.
     * @param {ParcelaCreateArgs} args - Arguments to create a Parcela.
     * @example
     * // Create one Parcela
     * const Parcela = await prisma.parcela.create({
     *   data: {
     *     // ... data to create a Parcela
     *   }
     * })
     * 
    **/
    create<T extends ParcelaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ParcelaCreateArgs<ExtArgs>>
    ): Prisma__ParcelaClient<$Types.GetResult<ParcelaPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Parcelas.
     *     @param {ParcelaCreateManyArgs} args - Arguments to create many Parcelas.
     *     @example
     *     // Create many Parcelas
     *     const parcela = await prisma.parcela.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ParcelaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParcelaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Parcela.
     * @param {ParcelaDeleteArgs} args - Arguments to delete one Parcela.
     * @example
     * // Delete one Parcela
     * const Parcela = await prisma.parcela.delete({
     *   where: {
     *     // ... filter to delete one Parcela
     *   }
     * })
     * 
    **/
    delete<T extends ParcelaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ParcelaDeleteArgs<ExtArgs>>
    ): Prisma__ParcelaClient<$Types.GetResult<ParcelaPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Parcela.
     * @param {ParcelaUpdateArgs} args - Arguments to update one Parcela.
     * @example
     * // Update one Parcela
     * const parcela = await prisma.parcela.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ParcelaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ParcelaUpdateArgs<ExtArgs>>
    ): Prisma__ParcelaClient<$Types.GetResult<ParcelaPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Parcelas.
     * @param {ParcelaDeleteManyArgs} args - Arguments to filter Parcelas to delete.
     * @example
     * // Delete a few Parcelas
     * const { count } = await prisma.parcela.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ParcelaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParcelaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parcelas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Parcelas
     * const parcela = await prisma.parcela.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ParcelaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ParcelaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Parcela.
     * @param {ParcelaUpsertArgs} args - Arguments to update or create a Parcela.
     * @example
     * // Update or create a Parcela
     * const parcela = await prisma.parcela.upsert({
     *   create: {
     *     // ... data to create a Parcela
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Parcela we want to update
     *   }
     * })
    **/
    upsert<T extends ParcelaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ParcelaUpsertArgs<ExtArgs>>
    ): Prisma__ParcelaClient<$Types.GetResult<ParcelaPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Parcelas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelaCountArgs} args - Arguments to filter Parcelas to count.
     * @example
     * // Count the number of Parcelas
     * const count = await prisma.parcela.count({
     *   where: {
     *     // ... the filter for the Parcelas we want to count
     *   }
     * })
    **/
    count<T extends ParcelaCountArgs>(
      args?: Subset<T, ParcelaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParcelaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Parcela.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParcelaAggregateArgs>(args: Subset<T, ParcelaAggregateArgs>): Prisma.PrismaPromise<GetParcelaAggregateType<T>>

    /**
     * Group by Parcela.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParcelaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParcelaGroupByArgs['orderBy'] }
        : { orderBy?: ParcelaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParcelaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParcelaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Parcela.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ParcelaClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    contrato<T extends ContratoArgs<ExtArgs> = {}>(args?: Subset<T, ContratoArgs<ExtArgs>>): Prisma__ContratoClient<$Types.GetResult<ContratoPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    boleto<T extends BoletoArgs<ExtArgs> = {}>(args?: Subset<T, BoletoArgs<ExtArgs>>): Prisma__BoletoClient<$Types.GetResult<BoletoPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Parcela base type for findUnique actions
   */
  export type ParcelaFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParcelaInclude<ExtArgs> | null
    /**
     * Filter, which Parcela to fetch.
     */
    where: ParcelaWhereUniqueInput
  }

  /**
   * Parcela findUnique
   */
  export interface ParcelaFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ParcelaFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Parcela findUniqueOrThrow
   */
  export type ParcelaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParcelaInclude<ExtArgs> | null
    /**
     * Filter, which Parcela to fetch.
     */
    where: ParcelaWhereUniqueInput
  }


  /**
   * Parcela base type for findFirst actions
   */
  export type ParcelaFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParcelaInclude<ExtArgs> | null
    /**
     * Filter, which Parcela to fetch.
     */
    where?: ParcelaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parcelas to fetch.
     */
    orderBy?: Enumerable<ParcelaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parcelas.
     */
    cursor?: ParcelaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parcelas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parcelas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parcelas.
     */
    distinct?: Enumerable<ParcelaScalarFieldEnum>
  }

  /**
   * Parcela findFirst
   */
  export interface ParcelaFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ParcelaFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Parcela findFirstOrThrow
   */
  export type ParcelaFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParcelaInclude<ExtArgs> | null
    /**
     * Filter, which Parcela to fetch.
     */
    where?: ParcelaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parcelas to fetch.
     */
    orderBy?: Enumerable<ParcelaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parcelas.
     */
    cursor?: ParcelaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parcelas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parcelas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parcelas.
     */
    distinct?: Enumerable<ParcelaScalarFieldEnum>
  }


  /**
   * Parcela findMany
   */
  export type ParcelaFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParcelaInclude<ExtArgs> | null
    /**
     * Filter, which Parcelas to fetch.
     */
    where?: ParcelaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parcelas to fetch.
     */
    orderBy?: Enumerable<ParcelaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Parcelas.
     */
    cursor?: ParcelaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parcelas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parcelas.
     */
    skip?: number
    distinct?: Enumerable<ParcelaScalarFieldEnum>
  }


  /**
   * Parcela create
   */
  export type ParcelaCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParcelaInclude<ExtArgs> | null
    /**
     * The data needed to create a Parcela.
     */
    data: XOR<ParcelaCreateInput, ParcelaUncheckedCreateInput>
  }


  /**
   * Parcela createMany
   */
  export type ParcelaCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Parcelas.
     */
    data: Enumerable<ParcelaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Parcela update
   */
  export type ParcelaUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParcelaInclude<ExtArgs> | null
    /**
     * The data needed to update a Parcela.
     */
    data: XOR<ParcelaUpdateInput, ParcelaUncheckedUpdateInput>
    /**
     * Choose, which Parcela to update.
     */
    where: ParcelaWhereUniqueInput
  }


  /**
   * Parcela updateMany
   */
  export type ParcelaUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Parcelas.
     */
    data: XOR<ParcelaUpdateManyMutationInput, ParcelaUncheckedUpdateManyInput>
    /**
     * Filter which Parcelas to update
     */
    where?: ParcelaWhereInput
  }


  /**
   * Parcela upsert
   */
  export type ParcelaUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParcelaInclude<ExtArgs> | null
    /**
     * The filter to search for the Parcela to update in case it exists.
     */
    where: ParcelaWhereUniqueInput
    /**
     * In case the Parcela found by the `where` argument doesn't exist, create a new Parcela with this data.
     */
    create: XOR<ParcelaCreateInput, ParcelaUncheckedCreateInput>
    /**
     * In case the Parcela was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParcelaUpdateInput, ParcelaUncheckedUpdateInput>
  }


  /**
   * Parcela delete
   */
  export type ParcelaDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParcelaInclude<ExtArgs> | null
    /**
     * Filter which Parcela to delete.
     */
    where: ParcelaWhereUniqueInput
  }


  /**
   * Parcela deleteMany
   */
  export type ParcelaDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parcelas to delete
     */
    where?: ParcelaWhereInput
  }


  /**
   * Parcela without action
   */
  export type ParcelaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParcelaInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ClienteScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    nomeConjuge: 'nomeConjuge',
    profissao: 'profissao',
    cpfCnpj: 'cpfCnpj',
    dataNascimento: 'dataNascimento',
    dataCadastro: 'dataCadastro'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const EnderecoScalarFieldEnum: {
    id: 'id',
    clienteId: 'clienteId',
    cep: 'cep',
    logradouro: 'logradouro',
    numero: 'numero',
    complemento: 'complemento',
    bairro: 'bairro',
    cidade: 'cidade',
    estado: 'estado'
  };

  export type EnderecoScalarFieldEnum = (typeof EnderecoScalarFieldEnum)[keyof typeof EnderecoScalarFieldEnum]


  export const ContatoScalarFieldEnum: {
    id: 'id',
    clienteId: 'clienteId',
    telefones: 'telefones',
    emails: 'emails'
  };

  export type ContatoScalarFieldEnum = (typeof ContatoScalarFieldEnum)[keyof typeof ContatoScalarFieldEnum]


  export const DocumentoScalarFieldEnum: {
    id: 'id',
    clienteId: 'clienteId',
    tipo: 'tipo',
    nome: 'nome',
    arquivo: 'arquivo',
    dataUpload: 'dataUpload',
    s3Key: 's3Key'
  };

  export type DocumentoScalarFieldEnum = (typeof DocumentoScalarFieldEnum)[keyof typeof DocumentoScalarFieldEnum]


  export const LoteScalarFieldEnum: {
    id: 'id',
    numero: 'numero',
    quadra: 'quadra',
    loteamento: 'loteamento',
    area: 'area',
    valorBase: 'valorBase',
    status: 'status',
    chave: 'chave'
  };

  export type LoteScalarFieldEnum = (typeof LoteScalarFieldEnum)[keyof typeof LoteScalarFieldEnum]


  export const ContratoScalarFieldEnum: {
    id: 'id',
    clienteId: 'clienteId',
    loteId: 'loteId',
    chave: 'chave',
    numeroContrato: 'numeroContrato',
    dataEmissao: 'dataEmissao',
    dataPrimeiraPrestacao: 'dataPrimeiraPrestacao',
    valorPrestacao: 'valorPrestacao',
    dataInicio: 'dataInicio',
    dataFim: 'dataFim',
    valorTotal: 'valorTotal',
    valorEntrada: 'valorEntrada',
    numeroParcelas: 'numeroParcelas',
    dataVencimento: 'dataVencimento',
    clausulas: 'clausulas',
    status: 'status',
    dataCriacao: 'dataCriacao',
    parcelasPagas: 'parcelasPagas',
    ultimoReajuste: 'ultimoReajuste'
  };

  export type ContratoScalarFieldEnum = (typeof ContratoScalarFieldEnum)[keyof typeof ContratoScalarFieldEnum]


  export const BoletoScalarFieldEnum: {
    id: 'id',
    clienteId: 'clienteId',
    clienteNome: 'clienteNome',
    contratoId: 'contratoId',
    valor: 'valor',
    dataVencimento: 'dataVencimento',
    numeroParcela: 'numeroParcela',
    descricao: 'descricao',
    nossoNumero: 'nossoNumero',
    linhaDigitavel: 'linhaDigitavel',
    codigoBarras: 'codigoBarras',
    pdfUrl: 'pdfUrl',
    dataGeracao: 'dataGeracao',
    status: 'status',
    dataPagamento: 'dataPagamento',
    valorPago: 'valorPago',
    formaPagamento: 'formaPagamento',
    dataCancelamento: 'dataCancelamento',
    comprovante: 'comprovante',
    parcelaId: 'parcelaId'
  };

  export type BoletoScalarFieldEnum = (typeof BoletoScalarFieldEnum)[keyof typeof BoletoScalarFieldEnum]


  export const ReajusteScalarFieldEnum: {
    id: 'id',
    contratoId: 'contratoId',
    parcelaReferencia: 'parcelaReferencia',
    valorOriginal: 'valorOriginal',
    valorReajustado: 'valorReajustado',
    indiceAplicado: 'indiceAplicado',
    indiceBase: 'indiceBase',
    percentualAdicional: 'percentualAdicional',
    reajusteTotal: 'reajusteTotal',
    dataReferencia: 'dataReferencia',
    dataAplicacao: 'dataAplicacao',
    status: 'status',
    aplicado: 'aplicado'
  };

  export type ReajusteScalarFieldEnum = (typeof ReajusteScalarFieldEnum)[keyof typeof ReajusteScalarFieldEnum]


  export const ParametrosReajusteScalarFieldEnum: {
    id: 'id',
    indiceBase: 'indiceBase',
    percentualAdicional: 'percentualAdicional',
    intervaloParcelas: 'intervaloParcelas',
    alertaAntecipadoDias: 'alertaAntecipadoDias'
  };

  export type ParametrosReajusteScalarFieldEnum = (typeof ParametrosReajusteScalarFieldEnum)[keyof typeof ParametrosReajusteScalarFieldEnum]


  export const IndicesEconomicosScalarFieldEnum: {
    id: 'id',
    IGPM: 'IGPM',
    IPCA: 'IPCA',
    INPC: 'INPC',
    data: 'data'
  };

  export type IndicesEconomicosScalarFieldEnum = (typeof IndicesEconomicosScalarFieldEnum)[keyof typeof IndicesEconomicosScalarFieldEnum]


  export const ClienteInadimplenteScalarFieldEnum: {
    id: 'id',
    clienteId: 'clienteId',
    contratoId: 'contratoId',
    valorEmAberto: 'valorEmAberto',
    diasAtraso: 'diasAtraso',
    ultimaCobranca: 'ultimaCobranca',
    status: 'status'
  };

  export type ClienteInadimplenteScalarFieldEnum = (typeof ClienteInadimplenteScalarFieldEnum)[keyof typeof ClienteInadimplenteScalarFieldEnum]


  export const ParcelaInadimplenteScalarFieldEnum: {
    id: 'id',
    clienteInadimplente_id: 'clienteInadimplente_id',
    numero: 'numero',
    dataVencimento: 'dataVencimento',
    valor: 'valor',
    valorAtualizado: 'valorAtualizado',
    status: 'status'
  };

  export type ParcelaInadimplenteScalarFieldEnum = (typeof ParcelaInadimplenteScalarFieldEnum)[keyof typeof ParcelaInadimplenteScalarFieldEnum]


  export const InteracaoScalarFieldEnum: {
    id: 'id',
    clienteId: 'clienteId',
    tipo: 'tipo',
    data: 'data',
    observacao: 'observacao',
    usuario: 'usuario',
    parcelaId: 'parcelaId'
  };

  export type InteracaoScalarFieldEnum = (typeof InteracaoScalarFieldEnum)[keyof typeof InteracaoScalarFieldEnum]


  export const ComunicacaoScalarFieldEnum: {
    id: 'id',
    clienteId: 'clienteId',
    tipo: 'tipo',
    data: 'data',
    mensagem: 'mensagem',
    status: 'status',
    parcelaInfo: 'parcelaInfo',
    anexos: 'anexos'
  };

  export type ComunicacaoScalarFieldEnum = (typeof ComunicacaoScalarFieldEnum)[keyof typeof ComunicacaoScalarFieldEnum]


  export const ModeloMensagemScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    tipo: 'tipo',
    conteudo: 'conteudo'
  };

  export type ModeloMensagemScalarFieldEnum = (typeof ModeloMensagemScalarFieldEnum)[keyof typeof ModeloMensagemScalarFieldEnum]


  export const ConfiguracaoGatilhosScalarFieldEnum: {
    id: 'id',
    executarAutomaticamente: 'executarAutomaticamente',
    horarioExecucao: 'horarioExecucao',
    diasExecucao: 'diasExecucao',
    repetirCobrancas: 'repetirCobrancas',
    intervaloRepeticao: 'intervaloRepeticao',
    limitarRepeticoes: 'limitarRepeticoes',
    limiteRepeticoes: 'limiteRepeticoes',
    gerarLog: 'gerarLog',
    gatilhos: 'gatilhos'
  };

  export type ConfiguracaoGatilhosScalarFieldEnum = (typeof ConfiguracaoGatilhosScalarFieldEnum)[keyof typeof ConfiguracaoGatilhosScalarFieldEnum]


  export const AditivoScalarFieldEnum: {
    id: 'id',
    contratoId: 'contratoId',
    tipo: 'tipo',
    dataAssinatura: 'dataAssinatura',
    motivoAditivo: 'motivoAditivo',
    novoValor: 'novoValor',
    novaDataFim: 'novaDataFim',
    documentoUrl: 'documentoUrl',
    status: 'status'
  };

  export type AditivoScalarFieldEnum = (typeof AditivoScalarFieldEnum)[keyof typeof AditivoScalarFieldEnum]


  export const DistratoScalarFieldEnum: {
    id: 'id',
    contratoId: 'contratoId',
    dataDistrato: 'dataDistrato',
    motivoDistrato: 'motivoDistrato',
    valorDevolucao: 'valorDevolucao',
    documentoUrl: 'documentoUrl'
  };

  export type DistratoScalarFieldEnum = (typeof DistratoScalarFieldEnum)[keyof typeof DistratoScalarFieldEnum]


  export const QuitacaoScalarFieldEnum: {
    id: 'id',
    contratoId: 'contratoId',
    dataQuitacao: 'dataQuitacao',
    valorQuitacao: 'valorQuitacao',
    documentoUrl: 'documentoUrl'
  };

  export type QuitacaoScalarFieldEnum = (typeof QuitacaoScalarFieldEnum)[keyof typeof QuitacaoScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    role: 'role',
    permissions: 'permissions',
    status: 'status',
    lastLogin: 'lastLogin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ParcelaScalarFieldEnum: {
    id: 'id',
    contratoId: 'contratoId',
    numero: 'numero',
    valor: 'valor',
    dataVencimento: 'dataVencimento',
    status: 'status',
    dataPagamento: 'dataPagamento',
    valorPago: 'valorPago',
    formaPagamento: 'formaPagamento',
    observacoes: 'observacoes',
    dataCriacao: 'dataCriacao',
    boletoId: 'boletoId'
  };

  export type ParcelaScalarFieldEnum = (typeof ParcelaScalarFieldEnum)[keyof typeof ParcelaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Deep Input Types
   */


  export type ClienteWhereInput = {
    AND?: Enumerable<ClienteWhereInput>
    OR?: Enumerable<ClienteWhereInput>
    NOT?: Enumerable<ClienteWhereInput>
    id?: IntFilter | number
    nome?: StringFilter | string
    nomeConjuge?: StringNullableFilter | string | null
    profissao?: StringNullableFilter | string | null
    cpfCnpj?: StringFilter | string
    dataNascimento?: DateTimeNullableFilter | Date | string | null
    dataCadastro?: DateTimeFilter | Date | string
    endereco?: XOR<EnderecoRelationFilter, EnderecoWhereInput> | null
    contatos?: XOR<ContatoRelationFilter, ContatoWhereInput> | null
    documentos?: DocumentoListRelationFilter
    contratos?: ContratoListRelationFilter
    boletos?: BoletoListRelationFilter
    interacoes?: InteracaoListRelationFilter
    comunicacoes?: ComunicacaoListRelationFilter
    clientesInadimplentes?: ClienteInadimplenteListRelationFilter
  }

  export type ClienteOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    nomeConjuge?: SortOrderInput | SortOrder
    profissao?: SortOrderInput | SortOrder
    cpfCnpj?: SortOrder
    dataNascimento?: SortOrderInput | SortOrder
    dataCadastro?: SortOrder
    endereco?: EnderecoOrderByWithRelationInput
    contatos?: ContatoOrderByWithRelationInput
    documentos?: DocumentoOrderByRelationAggregateInput
    contratos?: ContratoOrderByRelationAggregateInput
    boletos?: BoletoOrderByRelationAggregateInput
    interacoes?: InteracaoOrderByRelationAggregateInput
    comunicacoes?: ComunicacaoOrderByRelationAggregateInput
    clientesInadimplentes?: ClienteInadimplenteOrderByRelationAggregateInput
  }

  export type ClienteWhereUniqueInput = {
    id?: number
    cpfCnpj?: string
  }

  export type ClienteOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    nomeConjuge?: SortOrderInput | SortOrder
    profissao?: SortOrderInput | SortOrder
    cpfCnpj?: SortOrder
    dataNascimento?: SortOrderInput | SortOrder
    dataCadastro?: SortOrder
    _count?: ClienteCountOrderByAggregateInput
    _avg?: ClienteAvgOrderByAggregateInput
    _max?: ClienteMaxOrderByAggregateInput
    _min?: ClienteMinOrderByAggregateInput
    _sum?: ClienteSumOrderByAggregateInput
  }

  export type ClienteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClienteScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClienteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClienteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nome?: StringWithAggregatesFilter | string
    nomeConjuge?: StringNullableWithAggregatesFilter | string | null
    profissao?: StringNullableWithAggregatesFilter | string | null
    cpfCnpj?: StringWithAggregatesFilter | string
    dataNascimento?: DateTimeNullableWithAggregatesFilter | Date | string | null
    dataCadastro?: DateTimeWithAggregatesFilter | Date | string
  }

  export type EnderecoWhereInput = {
    AND?: Enumerable<EnderecoWhereInput>
    OR?: Enumerable<EnderecoWhereInput>
    NOT?: Enumerable<EnderecoWhereInput>
    id?: IntFilter | number
    clienteId?: IntFilter | number
    cep?: StringFilter | string
    logradouro?: StringFilter | string
    numero?: StringFilter | string
    complemento?: StringNullableFilter | string | null
    bairro?: StringFilter | string
    cidade?: StringFilter | string
    estado?: StringFilter | string
    cliente?: XOR<ClienteRelationFilter, ClienteWhereInput>
  }

  export type EnderecoOrderByWithRelationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    cep?: SortOrder
    logradouro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrderInput | SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    cliente?: ClienteOrderByWithRelationInput
  }

  export type EnderecoWhereUniqueInput = {
    id?: number
    clienteId?: number
  }

  export type EnderecoOrderByWithAggregationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    cep?: SortOrder
    logradouro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrderInput | SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
    _count?: EnderecoCountOrderByAggregateInput
    _avg?: EnderecoAvgOrderByAggregateInput
    _max?: EnderecoMaxOrderByAggregateInput
    _min?: EnderecoMinOrderByAggregateInput
    _sum?: EnderecoSumOrderByAggregateInput
  }

  export type EnderecoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EnderecoScalarWhereWithAggregatesInput>
    OR?: Enumerable<EnderecoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EnderecoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    clienteId?: IntWithAggregatesFilter | number
    cep?: StringWithAggregatesFilter | string
    logradouro?: StringWithAggregatesFilter | string
    numero?: StringWithAggregatesFilter | string
    complemento?: StringNullableWithAggregatesFilter | string | null
    bairro?: StringWithAggregatesFilter | string
    cidade?: StringWithAggregatesFilter | string
    estado?: StringWithAggregatesFilter | string
  }

  export type ContatoWhereInput = {
    AND?: Enumerable<ContatoWhereInput>
    OR?: Enumerable<ContatoWhereInput>
    NOT?: Enumerable<ContatoWhereInput>
    id?: IntFilter | number
    clienteId?: IntFilter | number
    telefones?: StringNullableListFilter
    emails?: StringNullableListFilter
    cliente?: XOR<ClienteRelationFilter, ClienteWhereInput>
  }

  export type ContatoOrderByWithRelationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    telefones?: SortOrder
    emails?: SortOrder
    cliente?: ClienteOrderByWithRelationInput
  }

  export type ContatoWhereUniqueInput = {
    id?: number
    clienteId?: number
  }

  export type ContatoOrderByWithAggregationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    telefones?: SortOrder
    emails?: SortOrder
    _count?: ContatoCountOrderByAggregateInput
    _avg?: ContatoAvgOrderByAggregateInput
    _max?: ContatoMaxOrderByAggregateInput
    _min?: ContatoMinOrderByAggregateInput
    _sum?: ContatoSumOrderByAggregateInput
  }

  export type ContatoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ContatoScalarWhereWithAggregatesInput>
    OR?: Enumerable<ContatoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ContatoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    clienteId?: IntWithAggregatesFilter | number
    telefones?: StringNullableListFilter
    emails?: StringNullableListFilter
  }

  export type DocumentoWhereInput = {
    AND?: Enumerable<DocumentoWhereInput>
    OR?: Enumerable<DocumentoWhereInput>
    NOT?: Enumerable<DocumentoWhereInput>
    id?: IntFilter | number
    clienteId?: IntFilter | number
    tipo?: StringFilter | string
    nome?: StringFilter | string
    arquivo?: StringFilter | string
    dataUpload?: DateTimeFilter | Date | string
    s3Key?: StringNullableFilter | string | null
    cliente?: XOR<ClienteRelationFilter, ClienteWhereInput>
  }

  export type DocumentoOrderByWithRelationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    tipo?: SortOrder
    nome?: SortOrder
    arquivo?: SortOrder
    dataUpload?: SortOrder
    s3Key?: SortOrderInput | SortOrder
    cliente?: ClienteOrderByWithRelationInput
  }

  export type DocumentoWhereUniqueInput = {
    id?: number
  }

  export type DocumentoOrderByWithAggregationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    tipo?: SortOrder
    nome?: SortOrder
    arquivo?: SortOrder
    dataUpload?: SortOrder
    s3Key?: SortOrderInput | SortOrder
    _count?: DocumentoCountOrderByAggregateInput
    _avg?: DocumentoAvgOrderByAggregateInput
    _max?: DocumentoMaxOrderByAggregateInput
    _min?: DocumentoMinOrderByAggregateInput
    _sum?: DocumentoSumOrderByAggregateInput
  }

  export type DocumentoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DocumentoScalarWhereWithAggregatesInput>
    OR?: Enumerable<DocumentoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DocumentoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    clienteId?: IntWithAggregatesFilter | number
    tipo?: StringWithAggregatesFilter | string
    nome?: StringWithAggregatesFilter | string
    arquivo?: StringWithAggregatesFilter | string
    dataUpload?: DateTimeWithAggregatesFilter | Date | string
    s3Key?: StringNullableWithAggregatesFilter | string | null
  }

  export type LoteWhereInput = {
    AND?: Enumerable<LoteWhereInput>
    OR?: Enumerable<LoteWhereInput>
    NOT?: Enumerable<LoteWhereInput>
    id?: IntFilter | number
    numero?: StringFilter | string
    quadra?: StringFilter | string
    loteamento?: StringFilter | string
    area?: FloatFilter | number
    valorBase?: DecimalFilter | Decimal | DecimalJsLike | number | string
    status?: StringFilter | string
    chave?: StringNullableFilter | string | null
    contratos?: ContratoListRelationFilter
  }

  export type LoteOrderByWithRelationInput = {
    id?: SortOrder
    numero?: SortOrder
    quadra?: SortOrder
    loteamento?: SortOrder
    area?: SortOrder
    valorBase?: SortOrder
    status?: SortOrder
    chave?: SortOrderInput | SortOrder
    contratos?: ContratoOrderByRelationAggregateInput
  }

  export type LoteWhereUniqueInput = {
    id?: number
  }

  export type LoteOrderByWithAggregationInput = {
    id?: SortOrder
    numero?: SortOrder
    quadra?: SortOrder
    loteamento?: SortOrder
    area?: SortOrder
    valorBase?: SortOrder
    status?: SortOrder
    chave?: SortOrderInput | SortOrder
    _count?: LoteCountOrderByAggregateInput
    _avg?: LoteAvgOrderByAggregateInput
    _max?: LoteMaxOrderByAggregateInput
    _min?: LoteMinOrderByAggregateInput
    _sum?: LoteSumOrderByAggregateInput
  }

  export type LoteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LoteScalarWhereWithAggregatesInput>
    OR?: Enumerable<LoteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LoteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    numero?: StringWithAggregatesFilter | string
    quadra?: StringWithAggregatesFilter | string
    loteamento?: StringWithAggregatesFilter | string
    area?: FloatWithAggregatesFilter | number
    valorBase?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    status?: StringWithAggregatesFilter | string
    chave?: StringNullableWithAggregatesFilter | string | null
  }

  export type ContratoWhereInput = {
    AND?: Enumerable<ContratoWhereInput>
    OR?: Enumerable<ContratoWhereInput>
    NOT?: Enumerable<ContratoWhereInput>
    id?: IntFilter | number
    clienteId?: IntFilter | number
    loteId?: IntFilter | number
    chave?: StringNullableFilter | string | null
    numeroContrato?: StringNullableFilter | string | null
    dataEmissao?: DateTimeNullableFilter | Date | string | null
    dataPrimeiraPrestacao?: DateTimeNullableFilter | Date | string | null
    valorPrestacao?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFilter | Date | string
    dataFim?: DateTimeFilter | Date | string
    valorTotal?: DecimalFilter | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFilter | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFilter | number
    dataVencimento?: IntFilter | number
    clausulas?: StringFilter | string
    status?: StringFilter | string
    dataCriacao?: DateTimeFilter | Date | string
    parcelasPagas?: IntFilter | number
    ultimoReajuste?: JsonNullableFilter
    cliente?: XOR<ClienteRelationFilter, ClienteWhereInput>
    lote?: XOR<LoteRelationFilter, LoteWhereInput>
    boletos?: BoletoListRelationFilter
    reajustes?: ReajusteListRelationFilter
    aditivos?: AditivoListRelationFilter
    distratos?: DistratoListRelationFilter
    quitacoes?: QuitacaoListRelationFilter
    parcelas?: ParcelaListRelationFilter
  }

  export type ContratoOrderByWithRelationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    loteId?: SortOrder
    chave?: SortOrderInput | SortOrder
    numeroContrato?: SortOrderInput | SortOrder
    dataEmissao?: SortOrderInput | SortOrder
    dataPrimeiraPrestacao?: SortOrderInput | SortOrder
    valorPrestacao?: SortOrderInput | SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    valorTotal?: SortOrder
    valorEntrada?: SortOrder
    numeroParcelas?: SortOrder
    dataVencimento?: SortOrder
    clausulas?: SortOrder
    status?: SortOrder
    dataCriacao?: SortOrder
    parcelasPagas?: SortOrder
    ultimoReajuste?: SortOrderInput | SortOrder
    cliente?: ClienteOrderByWithRelationInput
    lote?: LoteOrderByWithRelationInput
    boletos?: BoletoOrderByRelationAggregateInput
    reajustes?: ReajusteOrderByRelationAggregateInput
    aditivos?: AditivoOrderByRelationAggregateInput
    distratos?: DistratoOrderByRelationAggregateInput
    quitacoes?: QuitacaoOrderByRelationAggregateInput
    parcelas?: ParcelaOrderByRelationAggregateInput
  }

  export type ContratoWhereUniqueInput = {
    id?: number
  }

  export type ContratoOrderByWithAggregationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    loteId?: SortOrder
    chave?: SortOrderInput | SortOrder
    numeroContrato?: SortOrderInput | SortOrder
    dataEmissao?: SortOrderInput | SortOrder
    dataPrimeiraPrestacao?: SortOrderInput | SortOrder
    valorPrestacao?: SortOrderInput | SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    valorTotal?: SortOrder
    valorEntrada?: SortOrder
    numeroParcelas?: SortOrder
    dataVencimento?: SortOrder
    clausulas?: SortOrder
    status?: SortOrder
    dataCriacao?: SortOrder
    parcelasPagas?: SortOrder
    ultimoReajuste?: SortOrderInput | SortOrder
    _count?: ContratoCountOrderByAggregateInput
    _avg?: ContratoAvgOrderByAggregateInput
    _max?: ContratoMaxOrderByAggregateInput
    _min?: ContratoMinOrderByAggregateInput
    _sum?: ContratoSumOrderByAggregateInput
  }

  export type ContratoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ContratoScalarWhereWithAggregatesInput>
    OR?: Enumerable<ContratoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ContratoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    clienteId?: IntWithAggregatesFilter | number
    loteId?: IntWithAggregatesFilter | number
    chave?: StringNullableWithAggregatesFilter | string | null
    numeroContrato?: StringNullableWithAggregatesFilter | string | null
    dataEmissao?: DateTimeNullableWithAggregatesFilter | Date | string | null
    dataPrimeiraPrestacao?: DateTimeNullableWithAggregatesFilter | Date | string | null
    valorPrestacao?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeWithAggregatesFilter | Date | string
    dataFim?: DateTimeWithAggregatesFilter | Date | string
    valorTotal?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntWithAggregatesFilter | number
    dataVencimento?: IntWithAggregatesFilter | number
    clausulas?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    dataCriacao?: DateTimeWithAggregatesFilter | Date | string
    parcelasPagas?: IntWithAggregatesFilter | number
    ultimoReajuste?: JsonNullableWithAggregatesFilter
  }

  export type BoletoWhereInput = {
    AND?: Enumerable<BoletoWhereInput>
    OR?: Enumerable<BoletoWhereInput>
    NOT?: Enumerable<BoletoWhereInput>
    id?: IntFilter | number
    clienteId?: IntFilter | number
    clienteNome?: StringFilter | string
    contratoId?: IntFilter | number
    valor?: DecimalFilter | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFilter | Date | string
    numeroParcela?: IntFilter | number
    descricao?: StringFilter | string
    nossoNumero?: StringFilter | string
    linhaDigitavel?: StringFilter | string
    codigoBarras?: StringFilter | string
    pdfUrl?: StringFilter | string
    dataGeracao?: DateTimeFilter | Date | string
    status?: StringFilter | string
    dataPagamento?: DateTimeNullableFilter | Date | string | null
    valorPago?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: StringNullableFilter | string | null
    dataCancelamento?: DateTimeNullableFilter | Date | string | null
    comprovante?: StringNullableFilter | string | null
    parcelaId?: IntNullableFilter | number | null
    cliente?: XOR<ClienteRelationFilter, ClienteWhereInput>
    contrato?: XOR<ContratoRelationFilter, ContratoWhereInput>
    parcela?: XOR<ParcelaRelationFilter, ParcelaWhereInput> | null
  }

  export type BoletoOrderByWithRelationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    clienteNome?: SortOrder
    contratoId?: SortOrder
    valor?: SortOrder
    dataVencimento?: SortOrder
    numeroParcela?: SortOrder
    descricao?: SortOrder
    nossoNumero?: SortOrder
    linhaDigitavel?: SortOrder
    codigoBarras?: SortOrder
    pdfUrl?: SortOrder
    dataGeracao?: SortOrder
    status?: SortOrder
    dataPagamento?: SortOrderInput | SortOrder
    valorPago?: SortOrderInput | SortOrder
    formaPagamento?: SortOrderInput | SortOrder
    dataCancelamento?: SortOrderInput | SortOrder
    comprovante?: SortOrderInput | SortOrder
    parcelaId?: SortOrderInput | SortOrder
    cliente?: ClienteOrderByWithRelationInput
    contrato?: ContratoOrderByWithRelationInput
    parcela?: ParcelaOrderByWithRelationInput
  }

  export type BoletoWhereUniqueInput = {
    id?: number
    nossoNumero?: string
    parcelaId?: number
  }

  export type BoletoOrderByWithAggregationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    clienteNome?: SortOrder
    contratoId?: SortOrder
    valor?: SortOrder
    dataVencimento?: SortOrder
    numeroParcela?: SortOrder
    descricao?: SortOrder
    nossoNumero?: SortOrder
    linhaDigitavel?: SortOrder
    codigoBarras?: SortOrder
    pdfUrl?: SortOrder
    dataGeracao?: SortOrder
    status?: SortOrder
    dataPagamento?: SortOrderInput | SortOrder
    valorPago?: SortOrderInput | SortOrder
    formaPagamento?: SortOrderInput | SortOrder
    dataCancelamento?: SortOrderInput | SortOrder
    comprovante?: SortOrderInput | SortOrder
    parcelaId?: SortOrderInput | SortOrder
    _count?: BoletoCountOrderByAggregateInput
    _avg?: BoletoAvgOrderByAggregateInput
    _max?: BoletoMaxOrderByAggregateInput
    _min?: BoletoMinOrderByAggregateInput
    _sum?: BoletoSumOrderByAggregateInput
  }

  export type BoletoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BoletoScalarWhereWithAggregatesInput>
    OR?: Enumerable<BoletoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BoletoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    clienteId?: IntWithAggregatesFilter | number
    clienteNome?: StringWithAggregatesFilter | string
    contratoId?: IntWithAggregatesFilter | number
    valor?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeWithAggregatesFilter | Date | string
    numeroParcela?: IntWithAggregatesFilter | number
    descricao?: StringWithAggregatesFilter | string
    nossoNumero?: StringWithAggregatesFilter | string
    linhaDigitavel?: StringWithAggregatesFilter | string
    codigoBarras?: StringWithAggregatesFilter | string
    pdfUrl?: StringWithAggregatesFilter | string
    dataGeracao?: DateTimeWithAggregatesFilter | Date | string
    status?: StringWithAggregatesFilter | string
    dataPagamento?: DateTimeNullableWithAggregatesFilter | Date | string | null
    valorPago?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: StringNullableWithAggregatesFilter | string | null
    dataCancelamento?: DateTimeNullableWithAggregatesFilter | Date | string | null
    comprovante?: StringNullableWithAggregatesFilter | string | null
    parcelaId?: IntNullableWithAggregatesFilter | number | null
  }

  export type ReajusteWhereInput = {
    AND?: Enumerable<ReajusteWhereInput>
    OR?: Enumerable<ReajusteWhereInput>
    NOT?: Enumerable<ReajusteWhereInput>
    id?: IntFilter | number
    contratoId?: IntFilter | number
    parcelaReferencia?: IntFilter | number
    valorOriginal?: DecimalFilter | Decimal | DecimalJsLike | number | string
    valorReajustado?: DecimalFilter | Decimal | DecimalJsLike | number | string
    indiceAplicado?: DecimalFilter | Decimal | DecimalJsLike | number | string
    indiceBase?: StringFilter | string
    percentualAdicional?: DecimalFilter | Decimal | DecimalJsLike | number | string
    reajusteTotal?: DecimalFilter | Decimal | DecimalJsLike | number | string
    dataReferencia?: DateTimeFilter | Date | string
    dataAplicacao?: DateTimeNullableFilter | Date | string | null
    status?: StringFilter | string
    aplicado?: BoolFilter | boolean
    contrato?: XOR<ContratoRelationFilter, ContratoWhereInput>
  }

  export type ReajusteOrderByWithRelationInput = {
    id?: SortOrder
    contratoId?: SortOrder
    parcelaReferencia?: SortOrder
    valorOriginal?: SortOrder
    valorReajustado?: SortOrder
    indiceAplicado?: SortOrder
    indiceBase?: SortOrder
    percentualAdicional?: SortOrder
    reajusteTotal?: SortOrder
    dataReferencia?: SortOrder
    dataAplicacao?: SortOrderInput | SortOrder
    status?: SortOrder
    aplicado?: SortOrder
    contrato?: ContratoOrderByWithRelationInput
  }

  export type ReajusteWhereUniqueInput = {
    id?: number
  }

  export type ReajusteOrderByWithAggregationInput = {
    id?: SortOrder
    contratoId?: SortOrder
    parcelaReferencia?: SortOrder
    valorOriginal?: SortOrder
    valorReajustado?: SortOrder
    indiceAplicado?: SortOrder
    indiceBase?: SortOrder
    percentualAdicional?: SortOrder
    reajusteTotal?: SortOrder
    dataReferencia?: SortOrder
    dataAplicacao?: SortOrderInput | SortOrder
    status?: SortOrder
    aplicado?: SortOrder
    _count?: ReajusteCountOrderByAggregateInput
    _avg?: ReajusteAvgOrderByAggregateInput
    _max?: ReajusteMaxOrderByAggregateInput
    _min?: ReajusteMinOrderByAggregateInput
    _sum?: ReajusteSumOrderByAggregateInput
  }

  export type ReajusteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReajusteScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReajusteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReajusteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    contratoId?: IntWithAggregatesFilter | number
    parcelaReferencia?: IntWithAggregatesFilter | number
    valorOriginal?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    valorReajustado?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    indiceAplicado?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    indiceBase?: StringWithAggregatesFilter | string
    percentualAdicional?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    reajusteTotal?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    dataReferencia?: DateTimeWithAggregatesFilter | Date | string
    dataAplicacao?: DateTimeNullableWithAggregatesFilter | Date | string | null
    status?: StringWithAggregatesFilter | string
    aplicado?: BoolWithAggregatesFilter | boolean
  }

  export type ParametrosReajusteWhereInput = {
    AND?: Enumerable<ParametrosReajusteWhereInput>
    OR?: Enumerable<ParametrosReajusteWhereInput>
    NOT?: Enumerable<ParametrosReajusteWhereInput>
    id?: IntFilter | number
    indiceBase?: StringFilter | string
    percentualAdicional?: DecimalFilter | Decimal | DecimalJsLike | number | string
    intervaloParcelas?: IntFilter | number
    alertaAntecipadoDias?: IntFilter | number
  }

  export type ParametrosReajusteOrderByWithRelationInput = {
    id?: SortOrder
    indiceBase?: SortOrder
    percentualAdicional?: SortOrder
    intervaloParcelas?: SortOrder
    alertaAntecipadoDias?: SortOrder
  }

  export type ParametrosReajusteWhereUniqueInput = {
    id?: number
  }

  export type ParametrosReajusteOrderByWithAggregationInput = {
    id?: SortOrder
    indiceBase?: SortOrder
    percentualAdicional?: SortOrder
    intervaloParcelas?: SortOrder
    alertaAntecipadoDias?: SortOrder
    _count?: ParametrosReajusteCountOrderByAggregateInput
    _avg?: ParametrosReajusteAvgOrderByAggregateInput
    _max?: ParametrosReajusteMaxOrderByAggregateInput
    _min?: ParametrosReajusteMinOrderByAggregateInput
    _sum?: ParametrosReajusteSumOrderByAggregateInput
  }

  export type ParametrosReajusteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ParametrosReajusteScalarWhereWithAggregatesInput>
    OR?: Enumerable<ParametrosReajusteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ParametrosReajusteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    indiceBase?: StringWithAggregatesFilter | string
    percentualAdicional?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    intervaloParcelas?: IntWithAggregatesFilter | number
    alertaAntecipadoDias?: IntWithAggregatesFilter | number
  }

  export type IndicesEconomicosWhereInput = {
    AND?: Enumerable<IndicesEconomicosWhereInput>
    OR?: Enumerable<IndicesEconomicosWhereInput>
    NOT?: Enumerable<IndicesEconomicosWhereInput>
    id?: IntFilter | number
    IGPM?: DecimalFilter | Decimal | DecimalJsLike | number | string
    IPCA?: DecimalFilter | Decimal | DecimalJsLike | number | string
    INPC?: DecimalFilter | Decimal | DecimalJsLike | number | string
    data?: DateTimeFilter | Date | string
  }

  export type IndicesEconomicosOrderByWithRelationInput = {
    id?: SortOrder
    IGPM?: SortOrder
    IPCA?: SortOrder
    INPC?: SortOrder
    data?: SortOrder
  }

  export type IndicesEconomicosWhereUniqueInput = {
    id?: number
  }

  export type IndicesEconomicosOrderByWithAggregationInput = {
    id?: SortOrder
    IGPM?: SortOrder
    IPCA?: SortOrder
    INPC?: SortOrder
    data?: SortOrder
    _count?: IndicesEconomicosCountOrderByAggregateInput
    _avg?: IndicesEconomicosAvgOrderByAggregateInput
    _max?: IndicesEconomicosMaxOrderByAggregateInput
    _min?: IndicesEconomicosMinOrderByAggregateInput
    _sum?: IndicesEconomicosSumOrderByAggregateInput
  }

  export type IndicesEconomicosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<IndicesEconomicosScalarWhereWithAggregatesInput>
    OR?: Enumerable<IndicesEconomicosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<IndicesEconomicosScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    IGPM?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    IPCA?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    INPC?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    data?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ClienteInadimplenteWhereInput = {
    AND?: Enumerable<ClienteInadimplenteWhereInput>
    OR?: Enumerable<ClienteInadimplenteWhereInput>
    NOT?: Enumerable<ClienteInadimplenteWhereInput>
    id?: IntFilter | number
    clienteId?: IntFilter | number
    contratoId?: IntFilter | number
    valorEmAberto?: DecimalFilter | Decimal | DecimalJsLike | number | string
    diasAtraso?: IntFilter | number
    ultimaCobranca?: DateTimeNullableFilter | Date | string | null
    status?: StringFilter | string
    cliente?: XOR<ClienteRelationFilter, ClienteWhereInput>
    parcelas?: ParcelaInadimplenteListRelationFilter
  }

  export type ClienteInadimplenteOrderByWithRelationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    contratoId?: SortOrder
    valorEmAberto?: SortOrder
    diasAtraso?: SortOrder
    ultimaCobranca?: SortOrderInput | SortOrder
    status?: SortOrder
    cliente?: ClienteOrderByWithRelationInput
    parcelas?: ParcelaInadimplenteOrderByRelationAggregateInput
  }

  export type ClienteInadimplenteWhereUniqueInput = {
    id?: number
  }

  export type ClienteInadimplenteOrderByWithAggregationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    contratoId?: SortOrder
    valorEmAberto?: SortOrder
    diasAtraso?: SortOrder
    ultimaCobranca?: SortOrderInput | SortOrder
    status?: SortOrder
    _count?: ClienteInadimplenteCountOrderByAggregateInput
    _avg?: ClienteInadimplenteAvgOrderByAggregateInput
    _max?: ClienteInadimplenteMaxOrderByAggregateInput
    _min?: ClienteInadimplenteMinOrderByAggregateInput
    _sum?: ClienteInadimplenteSumOrderByAggregateInput
  }

  export type ClienteInadimplenteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClienteInadimplenteScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClienteInadimplenteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClienteInadimplenteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    clienteId?: IntWithAggregatesFilter | number
    contratoId?: IntWithAggregatesFilter | number
    valorEmAberto?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    diasAtraso?: IntWithAggregatesFilter | number
    ultimaCobranca?: DateTimeNullableWithAggregatesFilter | Date | string | null
    status?: StringWithAggregatesFilter | string
  }

  export type ParcelaInadimplenteWhereInput = {
    AND?: Enumerable<ParcelaInadimplenteWhereInput>
    OR?: Enumerable<ParcelaInadimplenteWhereInput>
    NOT?: Enumerable<ParcelaInadimplenteWhereInput>
    id?: IntFilter | number
    clienteInadimplente_id?: IntFilter | number
    numero?: IntFilter | number
    dataVencimento?: DateTimeFilter | Date | string
    valor?: DecimalFilter | Decimal | DecimalJsLike | number | string
    valorAtualizado?: DecimalFilter | Decimal | DecimalJsLike | number | string
    status?: StringFilter | string
    clienteInadimplente?: XOR<ClienteInadimplenteRelationFilter, ClienteInadimplenteWhereInput>
  }

  export type ParcelaInadimplenteOrderByWithRelationInput = {
    id?: SortOrder
    clienteInadimplente_id?: SortOrder
    numero?: SortOrder
    dataVencimento?: SortOrder
    valor?: SortOrder
    valorAtualizado?: SortOrder
    status?: SortOrder
    clienteInadimplente?: ClienteInadimplenteOrderByWithRelationInput
  }

  export type ParcelaInadimplenteWhereUniqueInput = {
    id?: number
  }

  export type ParcelaInadimplenteOrderByWithAggregationInput = {
    id?: SortOrder
    clienteInadimplente_id?: SortOrder
    numero?: SortOrder
    dataVencimento?: SortOrder
    valor?: SortOrder
    valorAtualizado?: SortOrder
    status?: SortOrder
    _count?: ParcelaInadimplenteCountOrderByAggregateInput
    _avg?: ParcelaInadimplenteAvgOrderByAggregateInput
    _max?: ParcelaInadimplenteMaxOrderByAggregateInput
    _min?: ParcelaInadimplenteMinOrderByAggregateInput
    _sum?: ParcelaInadimplenteSumOrderByAggregateInput
  }

  export type ParcelaInadimplenteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ParcelaInadimplenteScalarWhereWithAggregatesInput>
    OR?: Enumerable<ParcelaInadimplenteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ParcelaInadimplenteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    clienteInadimplente_id?: IntWithAggregatesFilter | number
    numero?: IntWithAggregatesFilter | number
    dataVencimento?: DateTimeWithAggregatesFilter | Date | string
    valor?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    valorAtualizado?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    status?: StringWithAggregatesFilter | string
  }

  export type InteracaoWhereInput = {
    AND?: Enumerable<InteracaoWhereInput>
    OR?: Enumerable<InteracaoWhereInput>
    NOT?: Enumerable<InteracaoWhereInput>
    id?: StringFilter | string
    clienteId?: IntFilter | number
    tipo?: StringFilter | string
    data?: DateTimeFilter | Date | string
    observacao?: StringFilter | string
    usuario?: StringFilter | string
    parcelaId?: StringNullableFilter | string | null
    cliente?: XOR<ClienteRelationFilter, ClienteWhereInput>
  }

  export type InteracaoOrderByWithRelationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    observacao?: SortOrder
    usuario?: SortOrder
    parcelaId?: SortOrderInput | SortOrder
    cliente?: ClienteOrderByWithRelationInput
  }

  export type InteracaoWhereUniqueInput = {
    id?: string
  }

  export type InteracaoOrderByWithAggregationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    observacao?: SortOrder
    usuario?: SortOrder
    parcelaId?: SortOrderInput | SortOrder
    _count?: InteracaoCountOrderByAggregateInput
    _avg?: InteracaoAvgOrderByAggregateInput
    _max?: InteracaoMaxOrderByAggregateInput
    _min?: InteracaoMinOrderByAggregateInput
    _sum?: InteracaoSumOrderByAggregateInput
  }

  export type InteracaoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InteracaoScalarWhereWithAggregatesInput>
    OR?: Enumerable<InteracaoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InteracaoScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    clienteId?: IntWithAggregatesFilter | number
    tipo?: StringWithAggregatesFilter | string
    data?: DateTimeWithAggregatesFilter | Date | string
    observacao?: StringWithAggregatesFilter | string
    usuario?: StringWithAggregatesFilter | string
    parcelaId?: StringNullableWithAggregatesFilter | string | null
  }

  export type ComunicacaoWhereInput = {
    AND?: Enumerable<ComunicacaoWhereInput>
    OR?: Enumerable<ComunicacaoWhereInput>
    NOT?: Enumerable<ComunicacaoWhereInput>
    id?: StringFilter | string
    clienteId?: IntFilter | number
    tipo?: StringFilter | string
    data?: DateTimeFilter | Date | string
    mensagem?: StringFilter | string
    status?: StringFilter | string
    parcelaInfo?: JsonNullableFilter
    anexos?: JsonNullableFilter
    cliente?: XOR<ClienteRelationFilter, ClienteWhereInput>
  }

  export type ComunicacaoOrderByWithRelationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    mensagem?: SortOrder
    status?: SortOrder
    parcelaInfo?: SortOrderInput | SortOrder
    anexos?: SortOrderInput | SortOrder
    cliente?: ClienteOrderByWithRelationInput
  }

  export type ComunicacaoWhereUniqueInput = {
    id?: string
  }

  export type ComunicacaoOrderByWithAggregationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    mensagem?: SortOrder
    status?: SortOrder
    parcelaInfo?: SortOrderInput | SortOrder
    anexos?: SortOrderInput | SortOrder
    _count?: ComunicacaoCountOrderByAggregateInput
    _avg?: ComunicacaoAvgOrderByAggregateInput
    _max?: ComunicacaoMaxOrderByAggregateInput
    _min?: ComunicacaoMinOrderByAggregateInput
    _sum?: ComunicacaoSumOrderByAggregateInput
  }

  export type ComunicacaoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ComunicacaoScalarWhereWithAggregatesInput>
    OR?: Enumerable<ComunicacaoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ComunicacaoScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    clienteId?: IntWithAggregatesFilter | number
    tipo?: StringWithAggregatesFilter | string
    data?: DateTimeWithAggregatesFilter | Date | string
    mensagem?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    parcelaInfo?: JsonNullableWithAggregatesFilter
    anexos?: JsonNullableWithAggregatesFilter
  }

  export type ModeloMensagemWhereInput = {
    AND?: Enumerable<ModeloMensagemWhereInput>
    OR?: Enumerable<ModeloMensagemWhereInput>
    NOT?: Enumerable<ModeloMensagemWhereInput>
    id?: StringFilter | string
    nome?: StringFilter | string
    tipo?: StringFilter | string
    conteudo?: StringFilter | string
  }

  export type ModeloMensagemOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    conteudo?: SortOrder
  }

  export type ModeloMensagemWhereUniqueInput = {
    id?: string
  }

  export type ModeloMensagemOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    conteudo?: SortOrder
    _count?: ModeloMensagemCountOrderByAggregateInput
    _max?: ModeloMensagemMaxOrderByAggregateInput
    _min?: ModeloMensagemMinOrderByAggregateInput
  }

  export type ModeloMensagemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ModeloMensagemScalarWhereWithAggregatesInput>
    OR?: Enumerable<ModeloMensagemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ModeloMensagemScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nome?: StringWithAggregatesFilter | string
    tipo?: StringWithAggregatesFilter | string
    conteudo?: StringWithAggregatesFilter | string
  }

  export type ConfiguracaoGatilhosWhereInput = {
    AND?: Enumerable<ConfiguracaoGatilhosWhereInput>
    OR?: Enumerable<ConfiguracaoGatilhosWhereInput>
    NOT?: Enumerable<ConfiguracaoGatilhosWhereInput>
    id?: IntFilter | number
    executarAutomaticamente?: BoolFilter | boolean
    horarioExecucao?: StringFilter | string
    diasExecucao?: StringNullableListFilter
    repetirCobrancas?: BoolFilter | boolean
    intervaloRepeticao?: IntFilter | number
    limitarRepeticoes?: BoolFilter | boolean
    limiteRepeticoes?: IntFilter | number
    gerarLog?: BoolFilter | boolean
    gatilhos?: JsonFilter
  }

  export type ConfiguracaoGatilhosOrderByWithRelationInput = {
    id?: SortOrder
    executarAutomaticamente?: SortOrder
    horarioExecucao?: SortOrder
    diasExecucao?: SortOrder
    repetirCobrancas?: SortOrder
    intervaloRepeticao?: SortOrder
    limitarRepeticoes?: SortOrder
    limiteRepeticoes?: SortOrder
    gerarLog?: SortOrder
    gatilhos?: SortOrder
  }

  export type ConfiguracaoGatilhosWhereUniqueInput = {
    id?: number
  }

  export type ConfiguracaoGatilhosOrderByWithAggregationInput = {
    id?: SortOrder
    executarAutomaticamente?: SortOrder
    horarioExecucao?: SortOrder
    diasExecucao?: SortOrder
    repetirCobrancas?: SortOrder
    intervaloRepeticao?: SortOrder
    limitarRepeticoes?: SortOrder
    limiteRepeticoes?: SortOrder
    gerarLog?: SortOrder
    gatilhos?: SortOrder
    _count?: ConfiguracaoGatilhosCountOrderByAggregateInput
    _avg?: ConfiguracaoGatilhosAvgOrderByAggregateInput
    _max?: ConfiguracaoGatilhosMaxOrderByAggregateInput
    _min?: ConfiguracaoGatilhosMinOrderByAggregateInput
    _sum?: ConfiguracaoGatilhosSumOrderByAggregateInput
  }

  export type ConfiguracaoGatilhosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ConfiguracaoGatilhosScalarWhereWithAggregatesInput>
    OR?: Enumerable<ConfiguracaoGatilhosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ConfiguracaoGatilhosScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    executarAutomaticamente?: BoolWithAggregatesFilter | boolean
    horarioExecucao?: StringWithAggregatesFilter | string
    diasExecucao?: StringNullableListFilter
    repetirCobrancas?: BoolWithAggregatesFilter | boolean
    intervaloRepeticao?: IntWithAggregatesFilter | number
    limitarRepeticoes?: BoolWithAggregatesFilter | boolean
    limiteRepeticoes?: IntWithAggregatesFilter | number
    gerarLog?: BoolWithAggregatesFilter | boolean
    gatilhos?: JsonWithAggregatesFilter
  }

  export type AditivoWhereInput = {
    AND?: Enumerable<AditivoWhereInput>
    OR?: Enumerable<AditivoWhereInput>
    NOT?: Enumerable<AditivoWhereInput>
    id?: IntFilter | number
    contratoId?: IntFilter | number
    tipo?: StringFilter | string
    dataAssinatura?: DateTimeFilter | Date | string
    motivoAditivo?: StringFilter | string
    novoValor?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    novaDataFim?: DateTimeNullableFilter | Date | string | null
    documentoUrl?: StringNullableFilter | string | null
    status?: StringFilter | string
    contrato?: XOR<ContratoRelationFilter, ContratoWhereInput>
  }

  export type AditivoOrderByWithRelationInput = {
    id?: SortOrder
    contratoId?: SortOrder
    tipo?: SortOrder
    dataAssinatura?: SortOrder
    motivoAditivo?: SortOrder
    novoValor?: SortOrderInput | SortOrder
    novaDataFim?: SortOrderInput | SortOrder
    documentoUrl?: SortOrderInput | SortOrder
    status?: SortOrder
    contrato?: ContratoOrderByWithRelationInput
  }

  export type AditivoWhereUniqueInput = {
    id?: number
  }

  export type AditivoOrderByWithAggregationInput = {
    id?: SortOrder
    contratoId?: SortOrder
    tipo?: SortOrder
    dataAssinatura?: SortOrder
    motivoAditivo?: SortOrder
    novoValor?: SortOrderInput | SortOrder
    novaDataFim?: SortOrderInput | SortOrder
    documentoUrl?: SortOrderInput | SortOrder
    status?: SortOrder
    _count?: AditivoCountOrderByAggregateInput
    _avg?: AditivoAvgOrderByAggregateInput
    _max?: AditivoMaxOrderByAggregateInput
    _min?: AditivoMinOrderByAggregateInput
    _sum?: AditivoSumOrderByAggregateInput
  }

  export type AditivoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AditivoScalarWhereWithAggregatesInput>
    OR?: Enumerable<AditivoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AditivoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    contratoId?: IntWithAggregatesFilter | number
    tipo?: StringWithAggregatesFilter | string
    dataAssinatura?: DateTimeWithAggregatesFilter | Date | string
    motivoAditivo?: StringWithAggregatesFilter | string
    novoValor?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    novaDataFim?: DateTimeNullableWithAggregatesFilter | Date | string | null
    documentoUrl?: StringNullableWithAggregatesFilter | string | null
    status?: StringWithAggregatesFilter | string
  }

  export type DistratoWhereInput = {
    AND?: Enumerable<DistratoWhereInput>
    OR?: Enumerable<DistratoWhereInput>
    NOT?: Enumerable<DistratoWhereInput>
    id?: IntFilter | number
    contratoId?: IntFilter | number
    dataDistrato?: DateTimeFilter | Date | string
    motivoDistrato?: StringFilter | string
    valorDevolucao?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    documentoUrl?: StringNullableFilter | string | null
    contrato?: XOR<ContratoRelationFilter, ContratoWhereInput>
  }

  export type DistratoOrderByWithRelationInput = {
    id?: SortOrder
    contratoId?: SortOrder
    dataDistrato?: SortOrder
    motivoDistrato?: SortOrder
    valorDevolucao?: SortOrderInput | SortOrder
    documentoUrl?: SortOrderInput | SortOrder
    contrato?: ContratoOrderByWithRelationInput
  }

  export type DistratoWhereUniqueInput = {
    id?: number
  }

  export type DistratoOrderByWithAggregationInput = {
    id?: SortOrder
    contratoId?: SortOrder
    dataDistrato?: SortOrder
    motivoDistrato?: SortOrder
    valorDevolucao?: SortOrderInput | SortOrder
    documentoUrl?: SortOrderInput | SortOrder
    _count?: DistratoCountOrderByAggregateInput
    _avg?: DistratoAvgOrderByAggregateInput
    _max?: DistratoMaxOrderByAggregateInput
    _min?: DistratoMinOrderByAggregateInput
    _sum?: DistratoSumOrderByAggregateInput
  }

  export type DistratoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DistratoScalarWhereWithAggregatesInput>
    OR?: Enumerable<DistratoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DistratoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    contratoId?: IntWithAggregatesFilter | number
    dataDistrato?: DateTimeWithAggregatesFilter | Date | string
    motivoDistrato?: StringWithAggregatesFilter | string
    valorDevolucao?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    documentoUrl?: StringNullableWithAggregatesFilter | string | null
  }

  export type QuitacaoWhereInput = {
    AND?: Enumerable<QuitacaoWhereInput>
    OR?: Enumerable<QuitacaoWhereInput>
    NOT?: Enumerable<QuitacaoWhereInput>
    id?: IntFilter | number
    contratoId?: IntFilter | number
    dataQuitacao?: DateTimeFilter | Date | string
    valorQuitacao?: DecimalFilter | Decimal | DecimalJsLike | number | string
    documentoUrl?: StringNullableFilter | string | null
    contrato?: XOR<ContratoRelationFilter, ContratoWhereInput>
  }

  export type QuitacaoOrderByWithRelationInput = {
    id?: SortOrder
    contratoId?: SortOrder
    dataQuitacao?: SortOrder
    valorQuitacao?: SortOrder
    documentoUrl?: SortOrderInput | SortOrder
    contrato?: ContratoOrderByWithRelationInput
  }

  export type QuitacaoWhereUniqueInput = {
    id?: number
  }

  export type QuitacaoOrderByWithAggregationInput = {
    id?: SortOrder
    contratoId?: SortOrder
    dataQuitacao?: SortOrder
    valorQuitacao?: SortOrder
    documentoUrl?: SortOrderInput | SortOrder
    _count?: QuitacaoCountOrderByAggregateInput
    _avg?: QuitacaoAvgOrderByAggregateInput
    _max?: QuitacaoMaxOrderByAggregateInput
    _min?: QuitacaoMinOrderByAggregateInput
    _sum?: QuitacaoSumOrderByAggregateInput
  }

  export type QuitacaoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<QuitacaoScalarWhereWithAggregatesInput>
    OR?: Enumerable<QuitacaoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<QuitacaoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    contratoId?: IntWithAggregatesFilter | number
    dataQuitacao?: DateTimeWithAggregatesFilter | Date | string
    valorQuitacao?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    documentoUrl?: StringNullableWithAggregatesFilter | string | null
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    password?: StringFilter | string
    name?: StringFilter | string
    role?: StringFilter | string
    permissions?: JsonNullableFilter
    status?: BoolFilter | boolean
    lastLogin?: DateTimeNullableFilter | Date | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    permissions?: SortOrderInput | SortOrder
    status?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    permissions?: SortOrderInput | SortOrder
    status?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    role?: StringWithAggregatesFilter | string
    permissions?: JsonNullableWithAggregatesFilter
    status?: BoolWithAggregatesFilter | boolean
    lastLogin?: DateTimeNullableWithAggregatesFilter | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ParcelaWhereInput = {
    AND?: Enumerable<ParcelaWhereInput>
    OR?: Enumerable<ParcelaWhereInput>
    NOT?: Enumerable<ParcelaWhereInput>
    id?: IntFilter | number
    contratoId?: IntFilter | number
    numero?: IntFilter | number
    valor?: DecimalFilter | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFilter | Date | string
    status?: StringFilter | string
    dataPagamento?: DateTimeNullableFilter | Date | string | null
    valorPago?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: StringNullableFilter | string | null
    observacoes?: StringNullableFilter | string | null
    dataCriacao?: DateTimeFilter | Date | string
    boletoId?: IntNullableFilter | number | null
    contrato?: XOR<ContratoRelationFilter, ContratoWhereInput>
    boleto?: XOR<BoletoRelationFilter, BoletoWhereInput> | null
  }

  export type ParcelaOrderByWithRelationInput = {
    id?: SortOrder
    contratoId?: SortOrder
    numero?: SortOrder
    valor?: SortOrder
    dataVencimento?: SortOrder
    status?: SortOrder
    dataPagamento?: SortOrderInput | SortOrder
    valorPago?: SortOrderInput | SortOrder
    formaPagamento?: SortOrderInput | SortOrder
    observacoes?: SortOrderInput | SortOrder
    dataCriacao?: SortOrder
    boletoId?: SortOrderInput | SortOrder
    contrato?: ContratoOrderByWithRelationInput
    boleto?: BoletoOrderByWithRelationInput
  }

  export type ParcelaWhereUniqueInput = {
    id?: number
    boletoId?: number
  }

  export type ParcelaOrderByWithAggregationInput = {
    id?: SortOrder
    contratoId?: SortOrder
    numero?: SortOrder
    valor?: SortOrder
    dataVencimento?: SortOrder
    status?: SortOrder
    dataPagamento?: SortOrderInput | SortOrder
    valorPago?: SortOrderInput | SortOrder
    formaPagamento?: SortOrderInput | SortOrder
    observacoes?: SortOrderInput | SortOrder
    dataCriacao?: SortOrder
    boletoId?: SortOrderInput | SortOrder
    _count?: ParcelaCountOrderByAggregateInput
    _avg?: ParcelaAvgOrderByAggregateInput
    _max?: ParcelaMaxOrderByAggregateInput
    _min?: ParcelaMinOrderByAggregateInput
    _sum?: ParcelaSumOrderByAggregateInput
  }

  export type ParcelaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ParcelaScalarWhereWithAggregatesInput>
    OR?: Enumerable<ParcelaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ParcelaScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    contratoId?: IntWithAggregatesFilter | number
    numero?: IntWithAggregatesFilter | number
    valor?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeWithAggregatesFilter | Date | string
    status?: StringWithAggregatesFilter | string
    dataPagamento?: DateTimeNullableWithAggregatesFilter | Date | string | null
    valorPago?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: StringNullableWithAggregatesFilter | string | null
    observacoes?: StringNullableWithAggregatesFilter | string | null
    dataCriacao?: DateTimeWithAggregatesFilter | Date | string
    boletoId?: IntNullableWithAggregatesFilter | number | null
  }

  export type ClienteCreateInput = {
    nome: string
    nomeConjuge?: string | null
    profissao?: string | null
    cpfCnpj: string
    dataNascimento?: Date | string | null
    dataCadastro?: Date | string
    endereco?: EnderecoCreateNestedOneWithoutClienteInput
    contatos?: ContatoCreateNestedOneWithoutClienteInput
    documentos?: DocumentoCreateNestedManyWithoutClienteInput
    contratos?: ContratoCreateNestedManyWithoutClienteInput
    boletos?: BoletoCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoCreateNestedManyWithoutClienteInput
    comunicacoes?: ComunicacaoCreateNestedManyWithoutClienteInput
    clientesInadimplentes?: ClienteInadimplenteCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateInput = {
    id?: number
    nome: string
    nomeConjuge?: string | null
    profissao?: string | null
    cpfCnpj: string
    dataNascimento?: Date | string | null
    dataCadastro?: Date | string
    endereco?: EnderecoUncheckedCreateNestedOneWithoutClienteInput
    contatos?: ContatoUncheckedCreateNestedOneWithoutClienteInput
    documentos?: DocumentoUncheckedCreateNestedManyWithoutClienteInput
    contratos?: ContratoUncheckedCreateNestedManyWithoutClienteInput
    boletos?: BoletoUncheckedCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoUncheckedCreateNestedManyWithoutClienteInput
    comunicacoes?: ComunicacaoUncheckedCreateNestedManyWithoutClienteInput
    clientesInadimplentes?: ClienteInadimplenteUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    nomeConjuge?: NullableStringFieldUpdateOperationsInput | string | null
    profissao?: NullableStringFieldUpdateOperationsInput | string | null
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    endereco?: EnderecoUpdateOneWithoutClienteNestedInput
    contatos?: ContatoUpdateOneWithoutClienteNestedInput
    documentos?: DocumentoUpdateManyWithoutClienteNestedInput
    contratos?: ContratoUpdateManyWithoutClienteNestedInput
    boletos?: BoletoUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoUpdateManyWithoutClienteNestedInput
    comunicacoes?: ComunicacaoUpdateManyWithoutClienteNestedInput
    clientesInadimplentes?: ClienteInadimplenteUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    nomeConjuge?: NullableStringFieldUpdateOperationsInput | string | null
    profissao?: NullableStringFieldUpdateOperationsInput | string | null
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    endereco?: EnderecoUncheckedUpdateOneWithoutClienteNestedInput
    contatos?: ContatoUncheckedUpdateOneWithoutClienteNestedInput
    documentos?: DocumentoUncheckedUpdateManyWithoutClienteNestedInput
    contratos?: ContratoUncheckedUpdateManyWithoutClienteNestedInput
    boletos?: BoletoUncheckedUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoUncheckedUpdateManyWithoutClienteNestedInput
    comunicacoes?: ComunicacaoUncheckedUpdateManyWithoutClienteNestedInput
    clientesInadimplentes?: ClienteInadimplenteUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteCreateManyInput = {
    id?: number
    nome: string
    nomeConjuge?: string | null
    profissao?: string | null
    cpfCnpj: string
    dataNascimento?: Date | string | null
    dataCadastro?: Date | string
  }

  export type ClienteUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    nomeConjuge?: NullableStringFieldUpdateOperationsInput | string | null
    profissao?: NullableStringFieldUpdateOperationsInput | string | null
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    nomeConjuge?: NullableStringFieldUpdateOperationsInput | string | null
    profissao?: NullableStringFieldUpdateOperationsInput | string | null
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnderecoCreateInput = {
    cep: string
    logradouro: string
    numero: string
    complemento?: string | null
    bairro: string
    cidade: string
    estado: string
    cliente: ClienteCreateNestedOneWithoutEnderecoInput
  }

  export type EnderecoUncheckedCreateInput = {
    id?: number
    clienteId: number
    cep: string
    logradouro: string
    numero: string
    complemento?: string | null
    bairro: string
    cidade: string
    estado: string
  }

  export type EnderecoUpdateInput = {
    cep?: StringFieldUpdateOperationsInput | string
    logradouro?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cliente?: ClienteUpdateOneRequiredWithoutEnderecoNestedInput
  }

  export type EnderecoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    cep?: StringFieldUpdateOperationsInput | string
    logradouro?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type EnderecoCreateManyInput = {
    id?: number
    clienteId: number
    cep: string
    logradouro: string
    numero: string
    complemento?: string | null
    bairro: string
    cidade: string
    estado: string
  }

  export type EnderecoUpdateManyMutationInput = {
    cep?: StringFieldUpdateOperationsInput | string
    logradouro?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type EnderecoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    cep?: StringFieldUpdateOperationsInput | string
    logradouro?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type ContatoCreateInput = {
    telefones?: ContatoCreatetelefonesInput | Enumerable<string>
    emails?: ContatoCreateemailsInput | Enumerable<string>
    cliente: ClienteCreateNestedOneWithoutContatosInput
  }

  export type ContatoUncheckedCreateInput = {
    id?: number
    clienteId: number
    telefones?: ContatoCreatetelefonesInput | Enumerable<string>
    emails?: ContatoCreateemailsInput | Enumerable<string>
  }

  export type ContatoUpdateInput = {
    telefones?: ContatoUpdatetelefonesInput | Enumerable<string>
    emails?: ContatoUpdateemailsInput | Enumerable<string>
    cliente?: ClienteUpdateOneRequiredWithoutContatosNestedInput
  }

  export type ContatoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    telefones?: ContatoUpdatetelefonesInput | Enumerable<string>
    emails?: ContatoUpdateemailsInput | Enumerable<string>
  }

  export type ContatoCreateManyInput = {
    id?: number
    clienteId: number
    telefones?: ContatoCreatetelefonesInput | Enumerable<string>
    emails?: ContatoCreateemailsInput | Enumerable<string>
  }

  export type ContatoUpdateManyMutationInput = {
    telefones?: ContatoUpdatetelefonesInput | Enumerable<string>
    emails?: ContatoUpdateemailsInput | Enumerable<string>
  }

  export type ContatoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    telefones?: ContatoUpdatetelefonesInput | Enumerable<string>
    emails?: ContatoUpdateemailsInput | Enumerable<string>
  }

  export type DocumentoCreateInput = {
    tipo: string
    nome: string
    arquivo: string
    dataUpload?: Date | string
    s3Key?: string | null
    cliente: ClienteCreateNestedOneWithoutDocumentosInput
  }

  export type DocumentoUncheckedCreateInput = {
    id?: number
    clienteId: number
    tipo: string
    nome: string
    arquivo: string
    dataUpload?: Date | string
    s3Key?: string | null
  }

  export type DocumentoUpdateInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    arquivo?: StringFieldUpdateOperationsInput | string
    dataUpload?: DateTimeFieldUpdateOperationsInput | Date | string
    s3Key?: NullableStringFieldUpdateOperationsInput | string | null
    cliente?: ClienteUpdateOneRequiredWithoutDocumentosNestedInput
  }

  export type DocumentoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    arquivo?: StringFieldUpdateOperationsInput | string
    dataUpload?: DateTimeFieldUpdateOperationsInput | Date | string
    s3Key?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentoCreateManyInput = {
    id?: number
    clienteId: number
    tipo: string
    nome: string
    arquivo: string
    dataUpload?: Date | string
    s3Key?: string | null
  }

  export type DocumentoUpdateManyMutationInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    arquivo?: StringFieldUpdateOperationsInput | string
    dataUpload?: DateTimeFieldUpdateOperationsInput | Date | string
    s3Key?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    arquivo?: StringFieldUpdateOperationsInput | string
    dataUpload?: DateTimeFieldUpdateOperationsInput | Date | string
    s3Key?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LoteCreateInput = {
    numero: string
    quadra: string
    loteamento: string
    area: number
    valorBase: Decimal | DecimalJsLike | number | string
    status?: string
    chave?: string | null
    contratos?: ContratoCreateNestedManyWithoutLoteInput
  }

  export type LoteUncheckedCreateInput = {
    id?: number
    numero: string
    quadra: string
    loteamento: string
    area: number
    valorBase: Decimal | DecimalJsLike | number | string
    status?: string
    chave?: string | null
    contratos?: ContratoUncheckedCreateNestedManyWithoutLoteInput
  }

  export type LoteUpdateInput = {
    numero?: StringFieldUpdateOperationsInput | string
    quadra?: StringFieldUpdateOperationsInput | string
    loteamento?: StringFieldUpdateOperationsInput | string
    area?: FloatFieldUpdateOperationsInput | number
    valorBase?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    contratos?: ContratoUpdateManyWithoutLoteNestedInput
  }

  export type LoteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    quadra?: StringFieldUpdateOperationsInput | string
    loteamento?: StringFieldUpdateOperationsInput | string
    area?: FloatFieldUpdateOperationsInput | number
    valorBase?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    contratos?: ContratoUncheckedUpdateManyWithoutLoteNestedInput
  }

  export type LoteCreateManyInput = {
    id?: number
    numero: string
    quadra: string
    loteamento: string
    area: number
    valorBase: Decimal | DecimalJsLike | number | string
    status?: string
    chave?: string | null
  }

  export type LoteUpdateManyMutationInput = {
    numero?: StringFieldUpdateOperationsInput | string
    quadra?: StringFieldUpdateOperationsInput | string
    loteamento?: StringFieldUpdateOperationsInput | string
    area?: FloatFieldUpdateOperationsInput | number
    valorBase?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    chave?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LoteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    quadra?: StringFieldUpdateOperationsInput | string
    loteamento?: StringFieldUpdateOperationsInput | string
    area?: FloatFieldUpdateOperationsInput | number
    valorBase?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    chave?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContratoCreateInput = {
    chave?: string | null
    numeroContrato?: string | null
    dataEmissao?: Date | string | null
    dataPrimeiraPrestacao?: Date | string | null
    valorPrestacao?: Decimal | DecimalJsLike | number | string | null
    dataInicio: Date | string
    dataFim: Date | string
    valorTotal: Decimal | DecimalJsLike | number | string
    valorEntrada: Decimal | DecimalJsLike | number | string
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status?: string
    dataCriacao?: Date | string
    parcelasPagas?: number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    cliente: ClienteCreateNestedOneWithoutContratosInput
    lote: LoteCreateNestedOneWithoutContratosInput
    boletos?: BoletoCreateNestedManyWithoutContratoInput
    reajustes?: ReajusteCreateNestedManyWithoutContratoInput
    aditivos?: AditivoCreateNestedManyWithoutContratoInput
    distratos?: DistratoCreateNestedManyWithoutContratoInput
    quitacoes?: QuitacaoCreateNestedManyWithoutContratoInput
    parcelas?: ParcelaCreateNestedManyWithoutContratoInput
  }

  export type ContratoUncheckedCreateInput = {
    id?: number
    clienteId: number
    loteId: number
    chave?: string | null
    numeroContrato?: string | null
    dataEmissao?: Date | string | null
    dataPrimeiraPrestacao?: Date | string | null
    valorPrestacao?: Decimal | DecimalJsLike | number | string | null
    dataInicio: Date | string
    dataFim: Date | string
    valorTotal: Decimal | DecimalJsLike | number | string
    valorEntrada: Decimal | DecimalJsLike | number | string
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status?: string
    dataCriacao?: Date | string
    parcelasPagas?: number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    boletos?: BoletoUncheckedCreateNestedManyWithoutContratoInput
    reajustes?: ReajusteUncheckedCreateNestedManyWithoutContratoInput
    aditivos?: AditivoUncheckedCreateNestedManyWithoutContratoInput
    distratos?: DistratoUncheckedCreateNestedManyWithoutContratoInput
    quitacoes?: QuitacaoUncheckedCreateNestedManyWithoutContratoInput
    parcelas?: ParcelaUncheckedCreateNestedManyWithoutContratoInput
  }

  export type ContratoUpdateInput = {
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    numeroContrato?: NullableStringFieldUpdateOperationsInput | string | null
    dataEmissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataPrimeiraPrestacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPrestacao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFieldUpdateOperationsInput | number
    dataVencimento?: IntFieldUpdateOperationsInput | number
    clausulas?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasPagas?: IntFieldUpdateOperationsInput | number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    cliente?: ClienteUpdateOneRequiredWithoutContratosNestedInput
    lote?: LoteUpdateOneRequiredWithoutContratosNestedInput
    boletos?: BoletoUpdateManyWithoutContratoNestedInput
    reajustes?: ReajusteUpdateManyWithoutContratoNestedInput
    aditivos?: AditivoUpdateManyWithoutContratoNestedInput
    distratos?: DistratoUpdateManyWithoutContratoNestedInput
    quitacoes?: QuitacaoUpdateManyWithoutContratoNestedInput
    parcelas?: ParcelaUpdateManyWithoutContratoNestedInput
  }

  export type ContratoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    loteId?: IntFieldUpdateOperationsInput | number
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    numeroContrato?: NullableStringFieldUpdateOperationsInput | string | null
    dataEmissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataPrimeiraPrestacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPrestacao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFieldUpdateOperationsInput | number
    dataVencimento?: IntFieldUpdateOperationsInput | number
    clausulas?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasPagas?: IntFieldUpdateOperationsInput | number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    boletos?: BoletoUncheckedUpdateManyWithoutContratoNestedInput
    reajustes?: ReajusteUncheckedUpdateManyWithoutContratoNestedInput
    aditivos?: AditivoUncheckedUpdateManyWithoutContratoNestedInput
    distratos?: DistratoUncheckedUpdateManyWithoutContratoNestedInput
    quitacoes?: QuitacaoUncheckedUpdateManyWithoutContratoNestedInput
    parcelas?: ParcelaUncheckedUpdateManyWithoutContratoNestedInput
  }

  export type ContratoCreateManyInput = {
    id?: number
    clienteId: number
    loteId: number
    chave?: string | null
    numeroContrato?: string | null
    dataEmissao?: Date | string | null
    dataPrimeiraPrestacao?: Date | string | null
    valorPrestacao?: Decimal | DecimalJsLike | number | string | null
    dataInicio: Date | string
    dataFim: Date | string
    valorTotal: Decimal | DecimalJsLike | number | string
    valorEntrada: Decimal | DecimalJsLike | number | string
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status?: string
    dataCriacao?: Date | string
    parcelasPagas?: number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ContratoUpdateManyMutationInput = {
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    numeroContrato?: NullableStringFieldUpdateOperationsInput | string | null
    dataEmissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataPrimeiraPrestacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPrestacao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFieldUpdateOperationsInput | number
    dataVencimento?: IntFieldUpdateOperationsInput | number
    clausulas?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasPagas?: IntFieldUpdateOperationsInput | number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ContratoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    loteId?: IntFieldUpdateOperationsInput | number
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    numeroContrato?: NullableStringFieldUpdateOperationsInput | string | null
    dataEmissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataPrimeiraPrestacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPrestacao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFieldUpdateOperationsInput | number
    dataVencimento?: IntFieldUpdateOperationsInput | number
    clausulas?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasPagas?: IntFieldUpdateOperationsInput | number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
  }

  export type BoletoCreateInput = {
    clienteNome: string
    valor: Decimal | DecimalJsLike | number | string
    dataVencimento: Date | string
    numeroParcela: number
    descricao: string
    nossoNumero: string
    linhaDigitavel: string
    codigoBarras: string
    pdfUrl: string
    dataGeracao?: Date | string
    status?: string
    dataPagamento?: Date | string | null
    valorPago?: Decimal | DecimalJsLike | number | string | null
    formaPagamento?: string | null
    dataCancelamento?: Date | string | null
    comprovante?: string | null
    parcelaId?: number | null
    cliente: ClienteCreateNestedOneWithoutBoletosInput
    contrato: ContratoCreateNestedOneWithoutBoletosInput
    parcela?: ParcelaCreateNestedOneWithoutBoletoInput
  }

  export type BoletoUncheckedCreateInput = {
    id?: number
    clienteId: number
    clienteNome: string
    contratoId: number
    valor: Decimal | DecimalJsLike | number | string
    dataVencimento: Date | string
    numeroParcela: number
    descricao: string
    nossoNumero: string
    linhaDigitavel: string
    codigoBarras: string
    pdfUrl: string
    dataGeracao?: Date | string
    status?: string
    dataPagamento?: Date | string | null
    valorPago?: Decimal | DecimalJsLike | number | string | null
    formaPagamento?: string | null
    dataCancelamento?: Date | string | null
    comprovante?: string | null
    parcelaId?: number | null
    parcela?: ParcelaUncheckedCreateNestedOneWithoutBoletoInput
  }

  export type BoletoUpdateInput = {
    clienteNome?: StringFieldUpdateOperationsInput | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    numeroParcela?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    nossoNumero?: StringFieldUpdateOperationsInput | string
    linhaDigitavel?: StringFieldUpdateOperationsInput | string
    codigoBarras?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    dataGeracao?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPago?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    dataCancelamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comprovante?: NullableStringFieldUpdateOperationsInput | string | null
    parcelaId?: NullableIntFieldUpdateOperationsInput | number | null
    cliente?: ClienteUpdateOneRequiredWithoutBoletosNestedInput
    contrato?: ContratoUpdateOneRequiredWithoutBoletosNestedInput
    parcela?: ParcelaUpdateOneWithoutBoletoNestedInput
  }

  export type BoletoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    clienteNome?: StringFieldUpdateOperationsInput | string
    contratoId?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    numeroParcela?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    nossoNumero?: StringFieldUpdateOperationsInput | string
    linhaDigitavel?: StringFieldUpdateOperationsInput | string
    codigoBarras?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    dataGeracao?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPago?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    dataCancelamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comprovante?: NullableStringFieldUpdateOperationsInput | string | null
    parcelaId?: NullableIntFieldUpdateOperationsInput | number | null
    parcela?: ParcelaUncheckedUpdateOneWithoutBoletoNestedInput
  }

  export type BoletoCreateManyInput = {
    id?: number
    clienteId: number
    clienteNome: string
    contratoId: number
    valor: Decimal | DecimalJsLike | number | string
    dataVencimento: Date | string
    numeroParcela: number
    descricao: string
    nossoNumero: string
    linhaDigitavel: string
    codigoBarras: string
    pdfUrl: string
    dataGeracao?: Date | string
    status?: string
    dataPagamento?: Date | string | null
    valorPago?: Decimal | DecimalJsLike | number | string | null
    formaPagamento?: string | null
    dataCancelamento?: Date | string | null
    comprovante?: string | null
    parcelaId?: number | null
  }

  export type BoletoUpdateManyMutationInput = {
    clienteNome?: StringFieldUpdateOperationsInput | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    numeroParcela?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    nossoNumero?: StringFieldUpdateOperationsInput | string
    linhaDigitavel?: StringFieldUpdateOperationsInput | string
    codigoBarras?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    dataGeracao?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPago?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    dataCancelamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comprovante?: NullableStringFieldUpdateOperationsInput | string | null
    parcelaId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BoletoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    clienteNome?: StringFieldUpdateOperationsInput | string
    contratoId?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    numeroParcela?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    nossoNumero?: StringFieldUpdateOperationsInput | string
    linhaDigitavel?: StringFieldUpdateOperationsInput | string
    codigoBarras?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    dataGeracao?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPago?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    dataCancelamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comprovante?: NullableStringFieldUpdateOperationsInput | string | null
    parcelaId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ReajusteCreateInput = {
    parcelaReferencia: number
    valorOriginal: Decimal | DecimalJsLike | number | string
    valorReajustado: Decimal | DecimalJsLike | number | string
    indiceAplicado: Decimal | DecimalJsLike | number | string
    indiceBase: string
    percentualAdicional: Decimal | DecimalJsLike | number | string
    reajusteTotal: Decimal | DecimalJsLike | number | string
    dataReferencia: Date | string
    dataAplicacao?: Date | string | null
    status?: string
    aplicado?: boolean
    contrato: ContratoCreateNestedOneWithoutReajustesInput
  }

  export type ReajusteUncheckedCreateInput = {
    id?: number
    contratoId: number
    parcelaReferencia: number
    valorOriginal: Decimal | DecimalJsLike | number | string
    valorReajustado: Decimal | DecimalJsLike | number | string
    indiceAplicado: Decimal | DecimalJsLike | number | string
    indiceBase: string
    percentualAdicional: Decimal | DecimalJsLike | number | string
    reajusteTotal: Decimal | DecimalJsLike | number | string
    dataReferencia: Date | string
    dataAplicacao?: Date | string | null
    status?: string
    aplicado?: boolean
  }

  export type ReajusteUpdateInput = {
    parcelaReferencia?: IntFieldUpdateOperationsInput | number
    valorOriginal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorReajustado?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    indiceAplicado?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    indiceBase?: StringFieldUpdateOperationsInput | string
    percentualAdicional?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    reajusteTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataReferencia?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAplicacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    aplicado?: BoolFieldUpdateOperationsInput | boolean
    contrato?: ContratoUpdateOneRequiredWithoutReajustesNestedInput
  }

  export type ReajusteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    contratoId?: IntFieldUpdateOperationsInput | number
    parcelaReferencia?: IntFieldUpdateOperationsInput | number
    valorOriginal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorReajustado?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    indiceAplicado?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    indiceBase?: StringFieldUpdateOperationsInput | string
    percentualAdicional?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    reajusteTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataReferencia?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAplicacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    aplicado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReajusteCreateManyInput = {
    id?: number
    contratoId: number
    parcelaReferencia: number
    valorOriginal: Decimal | DecimalJsLike | number | string
    valorReajustado: Decimal | DecimalJsLike | number | string
    indiceAplicado: Decimal | DecimalJsLike | number | string
    indiceBase: string
    percentualAdicional: Decimal | DecimalJsLike | number | string
    reajusteTotal: Decimal | DecimalJsLike | number | string
    dataReferencia: Date | string
    dataAplicacao?: Date | string | null
    status?: string
    aplicado?: boolean
  }

  export type ReajusteUpdateManyMutationInput = {
    parcelaReferencia?: IntFieldUpdateOperationsInput | number
    valorOriginal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorReajustado?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    indiceAplicado?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    indiceBase?: StringFieldUpdateOperationsInput | string
    percentualAdicional?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    reajusteTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataReferencia?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAplicacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    aplicado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReajusteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    contratoId?: IntFieldUpdateOperationsInput | number
    parcelaReferencia?: IntFieldUpdateOperationsInput | number
    valorOriginal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorReajustado?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    indiceAplicado?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    indiceBase?: StringFieldUpdateOperationsInput | string
    percentualAdicional?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    reajusteTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataReferencia?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAplicacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    aplicado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ParametrosReajusteCreateInput = {
    indiceBase: string
    percentualAdicional: Decimal | DecimalJsLike | number | string
    intervaloParcelas: number
    alertaAntecipadoDias: number
  }

  export type ParametrosReajusteUncheckedCreateInput = {
    id?: number
    indiceBase: string
    percentualAdicional: Decimal | DecimalJsLike | number | string
    intervaloParcelas: number
    alertaAntecipadoDias: number
  }

  export type ParametrosReajusteUpdateInput = {
    indiceBase?: StringFieldUpdateOperationsInput | string
    percentualAdicional?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    intervaloParcelas?: IntFieldUpdateOperationsInput | number
    alertaAntecipadoDias?: IntFieldUpdateOperationsInput | number
  }

  export type ParametrosReajusteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    indiceBase?: StringFieldUpdateOperationsInput | string
    percentualAdicional?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    intervaloParcelas?: IntFieldUpdateOperationsInput | number
    alertaAntecipadoDias?: IntFieldUpdateOperationsInput | number
  }

  export type ParametrosReajusteCreateManyInput = {
    id?: number
    indiceBase: string
    percentualAdicional: Decimal | DecimalJsLike | number | string
    intervaloParcelas: number
    alertaAntecipadoDias: number
  }

  export type ParametrosReajusteUpdateManyMutationInput = {
    indiceBase?: StringFieldUpdateOperationsInput | string
    percentualAdicional?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    intervaloParcelas?: IntFieldUpdateOperationsInput | number
    alertaAntecipadoDias?: IntFieldUpdateOperationsInput | number
  }

  export type ParametrosReajusteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    indiceBase?: StringFieldUpdateOperationsInput | string
    percentualAdicional?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    intervaloParcelas?: IntFieldUpdateOperationsInput | number
    alertaAntecipadoDias?: IntFieldUpdateOperationsInput | number
  }

  export type IndicesEconomicosCreateInput = {
    IGPM: Decimal | DecimalJsLike | number | string
    IPCA: Decimal | DecimalJsLike | number | string
    INPC: Decimal | DecimalJsLike | number | string
    data?: Date | string
  }

  export type IndicesEconomicosUncheckedCreateInput = {
    id?: number
    IGPM: Decimal | DecimalJsLike | number | string
    IPCA: Decimal | DecimalJsLike | number | string
    INPC: Decimal | DecimalJsLike | number | string
    data?: Date | string
  }

  export type IndicesEconomicosUpdateInput = {
    IGPM?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    IPCA?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    INPC?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IndicesEconomicosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    IGPM?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    IPCA?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    INPC?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IndicesEconomicosCreateManyInput = {
    id?: number
    IGPM: Decimal | DecimalJsLike | number | string
    IPCA: Decimal | DecimalJsLike | number | string
    INPC: Decimal | DecimalJsLike | number | string
    data?: Date | string
  }

  export type IndicesEconomicosUpdateManyMutationInput = {
    IGPM?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    IPCA?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    INPC?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IndicesEconomicosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    IGPM?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    IPCA?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    INPC?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteInadimplenteCreateInput = {
    contratoId: number
    valorEmAberto: Decimal | DecimalJsLike | number | string
    diasAtraso: number
    ultimaCobranca?: Date | string | null
    status: string
    cliente: ClienteCreateNestedOneWithoutClientesInadimplentesInput
    parcelas?: ParcelaInadimplenteCreateNestedManyWithoutClienteInadimplenteInput
  }

  export type ClienteInadimplenteUncheckedCreateInput = {
    id?: number
    clienteId: number
    contratoId: number
    valorEmAberto: Decimal | DecimalJsLike | number | string
    diasAtraso: number
    ultimaCobranca?: Date | string | null
    status: string
    parcelas?: ParcelaInadimplenteUncheckedCreateNestedManyWithoutClienteInadimplenteInput
  }

  export type ClienteInadimplenteUpdateInput = {
    contratoId?: IntFieldUpdateOperationsInput | number
    valorEmAberto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    diasAtraso?: IntFieldUpdateOperationsInput | number
    ultimaCobranca?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    cliente?: ClienteUpdateOneRequiredWithoutClientesInadimplentesNestedInput
    parcelas?: ParcelaInadimplenteUpdateManyWithoutClienteInadimplenteNestedInput
  }

  export type ClienteInadimplenteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    contratoId?: IntFieldUpdateOperationsInput | number
    valorEmAberto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    diasAtraso?: IntFieldUpdateOperationsInput | number
    ultimaCobranca?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    parcelas?: ParcelaInadimplenteUncheckedUpdateManyWithoutClienteInadimplenteNestedInput
  }

  export type ClienteInadimplenteCreateManyInput = {
    id?: number
    clienteId: number
    contratoId: number
    valorEmAberto: Decimal | DecimalJsLike | number | string
    diasAtraso: number
    ultimaCobranca?: Date | string | null
    status: string
  }

  export type ClienteInadimplenteUpdateManyMutationInput = {
    contratoId?: IntFieldUpdateOperationsInput | number
    valorEmAberto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    diasAtraso?: IntFieldUpdateOperationsInput | number
    ultimaCobranca?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteInadimplenteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    contratoId?: IntFieldUpdateOperationsInput | number
    valorEmAberto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    diasAtraso?: IntFieldUpdateOperationsInput | number
    ultimaCobranca?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ParcelaInadimplenteCreateInput = {
    numero: number
    dataVencimento: Date | string
    valor: Decimal | DecimalJsLike | number | string
    valorAtualizado: Decimal | DecimalJsLike | number | string
    status: string
    clienteInadimplente: ClienteInadimplenteCreateNestedOneWithoutParcelasInput
  }

  export type ParcelaInadimplenteUncheckedCreateInput = {
    id?: number
    clienteInadimplente_id: number
    numero: number
    dataVencimento: Date | string
    valor: Decimal | DecimalJsLike | number | string
    valorAtualizado: Decimal | DecimalJsLike | number | string
    status: string
  }

  export type ParcelaInadimplenteUpdateInput = {
    numero?: IntFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorAtualizado?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    clienteInadimplente?: ClienteInadimplenteUpdateOneRequiredWithoutParcelasNestedInput
  }

  export type ParcelaInadimplenteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteInadimplente_id?: IntFieldUpdateOperationsInput | number
    numero?: IntFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorAtualizado?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ParcelaInadimplenteCreateManyInput = {
    id?: number
    clienteInadimplente_id: number
    numero: number
    dataVencimento: Date | string
    valor: Decimal | DecimalJsLike | number | string
    valorAtualizado: Decimal | DecimalJsLike | number | string
    status: string
  }

  export type ParcelaInadimplenteUpdateManyMutationInput = {
    numero?: IntFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorAtualizado?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ParcelaInadimplenteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteInadimplente_id?: IntFieldUpdateOperationsInput | number
    numero?: IntFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorAtualizado?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type InteracaoCreateInput = {
    id?: string
    tipo: string
    data: Date | string
    observacao: string
    usuario: string
    parcelaId?: string | null
    cliente: ClienteCreateNestedOneWithoutInteracoesInput
  }

  export type InteracaoUncheckedCreateInput = {
    id?: string
    clienteId: number
    tipo: string
    data: Date | string
    observacao: string
    usuario: string
    parcelaId?: string | null
  }

  export type InteracaoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    observacao?: StringFieldUpdateOperationsInput | string
    usuario?: StringFieldUpdateOperationsInput | string
    parcelaId?: NullableStringFieldUpdateOperationsInput | string | null
    cliente?: ClienteUpdateOneRequiredWithoutInteracoesNestedInput
  }

  export type InteracaoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clienteId?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    observacao?: StringFieldUpdateOperationsInput | string
    usuario?: StringFieldUpdateOperationsInput | string
    parcelaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InteracaoCreateManyInput = {
    id?: string
    clienteId: number
    tipo: string
    data: Date | string
    observacao: string
    usuario: string
    parcelaId?: string | null
  }

  export type InteracaoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    observacao?: StringFieldUpdateOperationsInput | string
    usuario?: StringFieldUpdateOperationsInput | string
    parcelaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InteracaoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clienteId?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    observacao?: StringFieldUpdateOperationsInput | string
    usuario?: StringFieldUpdateOperationsInput | string
    parcelaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComunicacaoCreateInput = {
    id?: string
    tipo: string
    data: Date | string
    mensagem: string
    status: string
    parcelaInfo?: NullableJsonNullValueInput | InputJsonValue
    anexos?: NullableJsonNullValueInput | InputJsonValue
    cliente: ClienteCreateNestedOneWithoutComunicacoesInput
  }

  export type ComunicacaoUncheckedCreateInput = {
    id?: string
    clienteId: number
    tipo: string
    data: Date | string
    mensagem: string
    status: string
    parcelaInfo?: NullableJsonNullValueInput | InputJsonValue
    anexos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ComunicacaoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    mensagem?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    parcelaInfo?: NullableJsonNullValueInput | InputJsonValue
    anexos?: NullableJsonNullValueInput | InputJsonValue
    cliente?: ClienteUpdateOneRequiredWithoutComunicacoesNestedInput
  }

  export type ComunicacaoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clienteId?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    mensagem?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    parcelaInfo?: NullableJsonNullValueInput | InputJsonValue
    anexos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ComunicacaoCreateManyInput = {
    id?: string
    clienteId: number
    tipo: string
    data: Date | string
    mensagem: string
    status: string
    parcelaInfo?: NullableJsonNullValueInput | InputJsonValue
    anexos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ComunicacaoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    mensagem?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    parcelaInfo?: NullableJsonNullValueInput | InputJsonValue
    anexos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ComunicacaoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clienteId?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    mensagem?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    parcelaInfo?: NullableJsonNullValueInput | InputJsonValue
    anexos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ModeloMensagemCreateInput = {
    id?: string
    nome: string
    tipo: string
    conteudo: string
  }

  export type ModeloMensagemUncheckedCreateInput = {
    id?: string
    nome: string
    tipo: string
    conteudo: string
  }

  export type ModeloMensagemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
  }

  export type ModeloMensagemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
  }

  export type ModeloMensagemCreateManyInput = {
    id?: string
    nome: string
    tipo: string
    conteudo: string
  }

  export type ModeloMensagemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
  }

  export type ModeloMensagemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
  }

  export type ConfiguracaoGatilhosCreateInput = {
    executarAutomaticamente?: boolean
    horarioExecucao: string
    diasExecucao?: ConfiguracaoGatilhosCreatediasExecucaoInput | Enumerable<string>
    repetirCobrancas?: boolean
    intervaloRepeticao?: number
    limitarRepeticoes?: boolean
    limiteRepeticoes?: number
    gerarLog?: boolean
    gatilhos: JsonNullValueInput | InputJsonValue
  }

  export type ConfiguracaoGatilhosUncheckedCreateInput = {
    id?: number
    executarAutomaticamente?: boolean
    horarioExecucao: string
    diasExecucao?: ConfiguracaoGatilhosCreatediasExecucaoInput | Enumerable<string>
    repetirCobrancas?: boolean
    intervaloRepeticao?: number
    limitarRepeticoes?: boolean
    limiteRepeticoes?: number
    gerarLog?: boolean
    gatilhos: JsonNullValueInput | InputJsonValue
  }

  export type ConfiguracaoGatilhosUpdateInput = {
    executarAutomaticamente?: BoolFieldUpdateOperationsInput | boolean
    horarioExecucao?: StringFieldUpdateOperationsInput | string
    diasExecucao?: ConfiguracaoGatilhosUpdatediasExecucaoInput | Enumerable<string>
    repetirCobrancas?: BoolFieldUpdateOperationsInput | boolean
    intervaloRepeticao?: IntFieldUpdateOperationsInput | number
    limitarRepeticoes?: BoolFieldUpdateOperationsInput | boolean
    limiteRepeticoes?: IntFieldUpdateOperationsInput | number
    gerarLog?: BoolFieldUpdateOperationsInput | boolean
    gatilhos?: JsonNullValueInput | InputJsonValue
  }

  export type ConfiguracaoGatilhosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    executarAutomaticamente?: BoolFieldUpdateOperationsInput | boolean
    horarioExecucao?: StringFieldUpdateOperationsInput | string
    diasExecucao?: ConfiguracaoGatilhosUpdatediasExecucaoInput | Enumerable<string>
    repetirCobrancas?: BoolFieldUpdateOperationsInput | boolean
    intervaloRepeticao?: IntFieldUpdateOperationsInput | number
    limitarRepeticoes?: BoolFieldUpdateOperationsInput | boolean
    limiteRepeticoes?: IntFieldUpdateOperationsInput | number
    gerarLog?: BoolFieldUpdateOperationsInput | boolean
    gatilhos?: JsonNullValueInput | InputJsonValue
  }

  export type ConfiguracaoGatilhosCreateManyInput = {
    id?: number
    executarAutomaticamente?: boolean
    horarioExecucao: string
    diasExecucao?: ConfiguracaoGatilhosCreatediasExecucaoInput | Enumerable<string>
    repetirCobrancas?: boolean
    intervaloRepeticao?: number
    limitarRepeticoes?: boolean
    limiteRepeticoes?: number
    gerarLog?: boolean
    gatilhos: JsonNullValueInput | InputJsonValue
  }

  export type ConfiguracaoGatilhosUpdateManyMutationInput = {
    executarAutomaticamente?: BoolFieldUpdateOperationsInput | boolean
    horarioExecucao?: StringFieldUpdateOperationsInput | string
    diasExecucao?: ConfiguracaoGatilhosUpdatediasExecucaoInput | Enumerable<string>
    repetirCobrancas?: BoolFieldUpdateOperationsInput | boolean
    intervaloRepeticao?: IntFieldUpdateOperationsInput | number
    limitarRepeticoes?: BoolFieldUpdateOperationsInput | boolean
    limiteRepeticoes?: IntFieldUpdateOperationsInput | number
    gerarLog?: BoolFieldUpdateOperationsInput | boolean
    gatilhos?: JsonNullValueInput | InputJsonValue
  }

  export type ConfiguracaoGatilhosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    executarAutomaticamente?: BoolFieldUpdateOperationsInput | boolean
    horarioExecucao?: StringFieldUpdateOperationsInput | string
    diasExecucao?: ConfiguracaoGatilhosUpdatediasExecucaoInput | Enumerable<string>
    repetirCobrancas?: BoolFieldUpdateOperationsInput | boolean
    intervaloRepeticao?: IntFieldUpdateOperationsInput | number
    limitarRepeticoes?: BoolFieldUpdateOperationsInput | boolean
    limiteRepeticoes?: IntFieldUpdateOperationsInput | number
    gerarLog?: BoolFieldUpdateOperationsInput | boolean
    gatilhos?: JsonNullValueInput | InputJsonValue
  }

  export type AditivoCreateInput = {
    tipo: string
    dataAssinatura: Date | string
    motivoAditivo: string
    novoValor?: Decimal | DecimalJsLike | number | string | null
    novaDataFim?: Date | string | null
    documentoUrl?: string | null
    status?: string
    contrato: ContratoCreateNestedOneWithoutAditivosInput
  }

  export type AditivoUncheckedCreateInput = {
    id?: number
    contratoId: number
    tipo: string
    dataAssinatura: Date | string
    motivoAditivo: string
    novoValor?: Decimal | DecimalJsLike | number | string | null
    novaDataFim?: Date | string | null
    documentoUrl?: string | null
    status?: string
  }

  export type AditivoUpdateInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    dataAssinatura?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoAditivo?: StringFieldUpdateOperationsInput | string
    novoValor?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    novaDataFim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    contrato?: ContratoUpdateOneRequiredWithoutAditivosNestedInput
  }

  export type AditivoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    contratoId?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    dataAssinatura?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoAditivo?: StringFieldUpdateOperationsInput | string
    novoValor?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    novaDataFim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type AditivoCreateManyInput = {
    id?: number
    contratoId: number
    tipo: string
    dataAssinatura: Date | string
    motivoAditivo: string
    novoValor?: Decimal | DecimalJsLike | number | string | null
    novaDataFim?: Date | string | null
    documentoUrl?: string | null
    status?: string
  }

  export type AditivoUpdateManyMutationInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    dataAssinatura?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoAditivo?: StringFieldUpdateOperationsInput | string
    novoValor?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    novaDataFim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type AditivoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    contratoId?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    dataAssinatura?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoAditivo?: StringFieldUpdateOperationsInput | string
    novoValor?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    novaDataFim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type DistratoCreateInput = {
    dataDistrato: Date | string
    motivoDistrato: string
    valorDevolucao?: Decimal | DecimalJsLike | number | string | null
    documentoUrl?: string | null
    contrato: ContratoCreateNestedOneWithoutDistratosInput
  }

  export type DistratoUncheckedCreateInput = {
    id?: number
    contratoId: number
    dataDistrato: Date | string
    motivoDistrato: string
    valorDevolucao?: Decimal | DecimalJsLike | number | string | null
    documentoUrl?: string | null
  }

  export type DistratoUpdateInput = {
    dataDistrato?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoDistrato?: StringFieldUpdateOperationsInput | string
    valorDevolucao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    documentoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contrato?: ContratoUpdateOneRequiredWithoutDistratosNestedInput
  }

  export type DistratoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    contratoId?: IntFieldUpdateOperationsInput | number
    dataDistrato?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoDistrato?: StringFieldUpdateOperationsInput | string
    valorDevolucao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    documentoUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DistratoCreateManyInput = {
    id?: number
    contratoId: number
    dataDistrato: Date | string
    motivoDistrato: string
    valorDevolucao?: Decimal | DecimalJsLike | number | string | null
    documentoUrl?: string | null
  }

  export type DistratoUpdateManyMutationInput = {
    dataDistrato?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoDistrato?: StringFieldUpdateOperationsInput | string
    valorDevolucao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    documentoUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DistratoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    contratoId?: IntFieldUpdateOperationsInput | number
    dataDistrato?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoDistrato?: StringFieldUpdateOperationsInput | string
    valorDevolucao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    documentoUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuitacaoCreateInput = {
    dataQuitacao: Date | string
    valorQuitacao: Decimal | DecimalJsLike | number | string
    documentoUrl?: string | null
    contrato: ContratoCreateNestedOneWithoutQuitacoesInput
  }

  export type QuitacaoUncheckedCreateInput = {
    id?: number
    contratoId: number
    dataQuitacao: Date | string
    valorQuitacao: Decimal | DecimalJsLike | number | string
    documentoUrl?: string | null
  }

  export type QuitacaoUpdateInput = {
    dataQuitacao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorQuitacao?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    documentoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contrato?: ContratoUpdateOneRequiredWithoutQuitacoesNestedInput
  }

  export type QuitacaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    contratoId?: IntFieldUpdateOperationsInput | number
    dataQuitacao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorQuitacao?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    documentoUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuitacaoCreateManyInput = {
    id?: number
    contratoId: number
    dataQuitacao: Date | string
    valorQuitacao: Decimal | DecimalJsLike | number | string
    documentoUrl?: string | null
  }

  export type QuitacaoUpdateManyMutationInput = {
    dataQuitacao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorQuitacao?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    documentoUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuitacaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    contratoId?: IntFieldUpdateOperationsInput | number
    dataQuitacao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorQuitacao?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    documentoUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateInput = {
    email: string
    password: string
    name: string
    role?: string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    status?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    name: string
    role?: string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    status?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    status?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    status?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    name: string
    role?: string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    status?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    status?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    status?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParcelaCreateInput = {
    numero: number
    valor: Decimal | DecimalJsLike | number | string
    dataVencimento: Date | string
    status?: string
    dataPagamento?: Date | string | null
    valorPago?: Decimal | DecimalJsLike | number | string | null
    formaPagamento?: string | null
    observacoes?: string | null
    dataCriacao?: Date | string
    contrato: ContratoCreateNestedOneWithoutParcelasInput
    boleto?: BoletoCreateNestedOneWithoutParcelaInput
  }

  export type ParcelaUncheckedCreateInput = {
    id?: number
    contratoId: number
    numero: number
    valor: Decimal | DecimalJsLike | number | string
    dataVencimento: Date | string
    status?: string
    dataPagamento?: Date | string | null
    valorPago?: Decimal | DecimalJsLike | number | string | null
    formaPagamento?: string | null
    observacoes?: string | null
    dataCriacao?: Date | string
    boletoId?: number | null
  }

  export type ParcelaUpdateInput = {
    numero?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPago?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    contrato?: ContratoUpdateOneRequiredWithoutParcelasNestedInput
    boleto?: BoletoUpdateOneWithoutParcelaNestedInput
  }

  export type ParcelaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    contratoId?: IntFieldUpdateOperationsInput | number
    numero?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPago?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    boletoId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ParcelaCreateManyInput = {
    id?: number
    contratoId: number
    numero: number
    valor: Decimal | DecimalJsLike | number | string
    dataVencimento: Date | string
    status?: string
    dataPagamento?: Date | string | null
    valorPago?: Decimal | DecimalJsLike | number | string | null
    formaPagamento?: string | null
    observacoes?: string | null
    dataCriacao?: Date | string
    boletoId?: number | null
  }

  export type ParcelaUpdateManyMutationInput = {
    numero?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPago?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParcelaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    contratoId?: IntFieldUpdateOperationsInput | number
    numero?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPago?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    boletoId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type EnderecoRelationFilter = {
    is?: EnderecoWhereInput | null
    isNot?: EnderecoWhereInput | null
  }

  export type ContatoRelationFilter = {
    is?: ContatoWhereInput | null
    isNot?: ContatoWhereInput | null
  }

  export type DocumentoListRelationFilter = {
    every?: DocumentoWhereInput
    some?: DocumentoWhereInput
    none?: DocumentoWhereInput
  }

  export type ContratoListRelationFilter = {
    every?: ContratoWhereInput
    some?: ContratoWhereInput
    none?: ContratoWhereInput
  }

  export type BoletoListRelationFilter = {
    every?: BoletoWhereInput
    some?: BoletoWhereInput
    none?: BoletoWhereInput
  }

  export type InteracaoListRelationFilter = {
    every?: InteracaoWhereInput
    some?: InteracaoWhereInput
    none?: InteracaoWhereInput
  }

  export type ComunicacaoListRelationFilter = {
    every?: ComunicacaoWhereInput
    some?: ComunicacaoWhereInput
    none?: ComunicacaoWhereInput
  }

  export type ClienteInadimplenteListRelationFilter = {
    every?: ClienteInadimplenteWhereInput
    some?: ClienteInadimplenteWhereInput
    none?: ClienteInadimplenteWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type DocumentoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContratoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BoletoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InteracaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ComunicacaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClienteInadimplenteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClienteCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    nomeConjuge?: SortOrder
    profissao?: SortOrder
    cpfCnpj?: SortOrder
    dataNascimento?: SortOrder
    dataCadastro?: SortOrder
  }

  export type ClienteAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClienteMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    nomeConjuge?: SortOrder
    profissao?: SortOrder
    cpfCnpj?: SortOrder
    dataNascimento?: SortOrder
    dataCadastro?: SortOrder
  }

  export type ClienteMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    nomeConjuge?: SortOrder
    profissao?: SortOrder
    cpfCnpj?: SortOrder
    dataNascimento?: SortOrder
    dataCadastro?: SortOrder
  }

  export type ClienteSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type ClienteRelationFilter = {
    is?: ClienteWhereInput | null
    isNot?: ClienteWhereInput | null
  }

  export type EnderecoCountOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    cep?: SortOrder
    logradouro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
  }

  export type EnderecoAvgOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
  }

  export type EnderecoMaxOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    cep?: SortOrder
    logradouro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
  }

  export type EnderecoMinOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    cep?: SortOrder
    logradouro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrder
    bairro?: SortOrder
    cidade?: SortOrder
    estado?: SortOrder
  }

  export type EnderecoSumOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type ContatoCountOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    telefones?: SortOrder
    emails?: SortOrder
  }

  export type ContatoAvgOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
  }

  export type ContatoMaxOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
  }

  export type ContatoMinOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
  }

  export type ContatoSumOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
  }

  export type DocumentoCountOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    tipo?: SortOrder
    nome?: SortOrder
    arquivo?: SortOrder
    dataUpload?: SortOrder
    s3Key?: SortOrder
  }

  export type DocumentoAvgOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
  }

  export type DocumentoMaxOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    tipo?: SortOrder
    nome?: SortOrder
    arquivo?: SortOrder
    dataUpload?: SortOrder
    s3Key?: SortOrder
  }

  export type DocumentoMinOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    tipo?: SortOrder
    nome?: SortOrder
    arquivo?: SortOrder
    dataUpload?: SortOrder
    s3Key?: SortOrder
  }

  export type DocumentoSumOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type DecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type LoteCountOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    quadra?: SortOrder
    loteamento?: SortOrder
    area?: SortOrder
    valorBase?: SortOrder
    status?: SortOrder
    chave?: SortOrder
  }

  export type LoteAvgOrderByAggregateInput = {
    id?: SortOrder
    area?: SortOrder
    valorBase?: SortOrder
  }

  export type LoteMaxOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    quadra?: SortOrder
    loteamento?: SortOrder
    area?: SortOrder
    valorBase?: SortOrder
    status?: SortOrder
    chave?: SortOrder
  }

  export type LoteMinOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    quadra?: SortOrder
    loteamento?: SortOrder
    area?: SortOrder
    valorBase?: SortOrder
    status?: SortOrder
    chave?: SortOrder
  }

  export type LoteSumOrderByAggregateInput = {
    id?: SortOrder
    area?: SortOrder
    valorBase?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type DecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type DecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type LoteRelationFilter = {
    is?: LoteWhereInput | null
    isNot?: LoteWhereInput | null
  }

  export type ReajusteListRelationFilter = {
    every?: ReajusteWhereInput
    some?: ReajusteWhereInput
    none?: ReajusteWhereInput
  }

  export type AditivoListRelationFilter = {
    every?: AditivoWhereInput
    some?: AditivoWhereInput
    none?: AditivoWhereInput
  }

  export type DistratoListRelationFilter = {
    every?: DistratoWhereInput
    some?: DistratoWhereInput
    none?: DistratoWhereInput
  }

  export type QuitacaoListRelationFilter = {
    every?: QuitacaoWhereInput
    some?: QuitacaoWhereInput
    none?: QuitacaoWhereInput
  }

  export type ParcelaListRelationFilter = {
    every?: ParcelaWhereInput
    some?: ParcelaWhereInput
    none?: ParcelaWhereInput
  }

  export type ReajusteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AditivoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DistratoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuitacaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ParcelaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContratoCountOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    loteId?: SortOrder
    chave?: SortOrder
    numeroContrato?: SortOrder
    dataEmissao?: SortOrder
    dataPrimeiraPrestacao?: SortOrder
    valorPrestacao?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    valorTotal?: SortOrder
    valorEntrada?: SortOrder
    numeroParcelas?: SortOrder
    dataVencimento?: SortOrder
    clausulas?: SortOrder
    status?: SortOrder
    dataCriacao?: SortOrder
    parcelasPagas?: SortOrder
    ultimoReajuste?: SortOrder
  }

  export type ContratoAvgOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    loteId?: SortOrder
    valorPrestacao?: SortOrder
    valorTotal?: SortOrder
    valorEntrada?: SortOrder
    numeroParcelas?: SortOrder
    dataVencimento?: SortOrder
    parcelasPagas?: SortOrder
  }

  export type ContratoMaxOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    loteId?: SortOrder
    chave?: SortOrder
    numeroContrato?: SortOrder
    dataEmissao?: SortOrder
    dataPrimeiraPrestacao?: SortOrder
    valorPrestacao?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    valorTotal?: SortOrder
    valorEntrada?: SortOrder
    numeroParcelas?: SortOrder
    dataVencimento?: SortOrder
    clausulas?: SortOrder
    status?: SortOrder
    dataCriacao?: SortOrder
    parcelasPagas?: SortOrder
  }

  export type ContratoMinOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    loteId?: SortOrder
    chave?: SortOrder
    numeroContrato?: SortOrder
    dataEmissao?: SortOrder
    dataPrimeiraPrestacao?: SortOrder
    valorPrestacao?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    valorTotal?: SortOrder
    valorEntrada?: SortOrder
    numeroParcelas?: SortOrder
    dataVencimento?: SortOrder
    clausulas?: SortOrder
    status?: SortOrder
    dataCriacao?: SortOrder
    parcelasPagas?: SortOrder
  }

  export type ContratoSumOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    loteId?: SortOrder
    valorPrestacao?: SortOrder
    valorTotal?: SortOrder
    valorEntrada?: SortOrder
    numeroParcelas?: SortOrder
    dataVencimento?: SortOrder
    parcelasPagas?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type ContratoRelationFilter = {
    is?: ContratoWhereInput | null
    isNot?: ContratoWhereInput | null
  }

  export type ParcelaRelationFilter = {
    is?: ParcelaWhereInput | null
    isNot?: ParcelaWhereInput | null
  }

  export type BoletoCountOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    clienteNome?: SortOrder
    contratoId?: SortOrder
    valor?: SortOrder
    dataVencimento?: SortOrder
    numeroParcela?: SortOrder
    descricao?: SortOrder
    nossoNumero?: SortOrder
    linhaDigitavel?: SortOrder
    codigoBarras?: SortOrder
    pdfUrl?: SortOrder
    dataGeracao?: SortOrder
    status?: SortOrder
    dataPagamento?: SortOrder
    valorPago?: SortOrder
    formaPagamento?: SortOrder
    dataCancelamento?: SortOrder
    comprovante?: SortOrder
    parcelaId?: SortOrder
  }

  export type BoletoAvgOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    contratoId?: SortOrder
    valor?: SortOrder
    numeroParcela?: SortOrder
    valorPago?: SortOrder
    parcelaId?: SortOrder
  }

  export type BoletoMaxOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    clienteNome?: SortOrder
    contratoId?: SortOrder
    valor?: SortOrder
    dataVencimento?: SortOrder
    numeroParcela?: SortOrder
    descricao?: SortOrder
    nossoNumero?: SortOrder
    linhaDigitavel?: SortOrder
    codigoBarras?: SortOrder
    pdfUrl?: SortOrder
    dataGeracao?: SortOrder
    status?: SortOrder
    dataPagamento?: SortOrder
    valorPago?: SortOrder
    formaPagamento?: SortOrder
    dataCancelamento?: SortOrder
    comprovante?: SortOrder
    parcelaId?: SortOrder
  }

  export type BoletoMinOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    clienteNome?: SortOrder
    contratoId?: SortOrder
    valor?: SortOrder
    dataVencimento?: SortOrder
    numeroParcela?: SortOrder
    descricao?: SortOrder
    nossoNumero?: SortOrder
    linhaDigitavel?: SortOrder
    codigoBarras?: SortOrder
    pdfUrl?: SortOrder
    dataGeracao?: SortOrder
    status?: SortOrder
    dataPagamento?: SortOrder
    valorPago?: SortOrder
    formaPagamento?: SortOrder
    dataCancelamento?: SortOrder
    comprovante?: SortOrder
    parcelaId?: SortOrder
  }

  export type BoletoSumOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    contratoId?: SortOrder
    valor?: SortOrder
    numeroParcela?: SortOrder
    valorPago?: SortOrder
    parcelaId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type ReajusteCountOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    parcelaReferencia?: SortOrder
    valorOriginal?: SortOrder
    valorReajustado?: SortOrder
    indiceAplicado?: SortOrder
    indiceBase?: SortOrder
    percentualAdicional?: SortOrder
    reajusteTotal?: SortOrder
    dataReferencia?: SortOrder
    dataAplicacao?: SortOrder
    status?: SortOrder
    aplicado?: SortOrder
  }

  export type ReajusteAvgOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    parcelaReferencia?: SortOrder
    valorOriginal?: SortOrder
    valorReajustado?: SortOrder
    indiceAplicado?: SortOrder
    percentualAdicional?: SortOrder
    reajusteTotal?: SortOrder
  }

  export type ReajusteMaxOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    parcelaReferencia?: SortOrder
    valorOriginal?: SortOrder
    valorReajustado?: SortOrder
    indiceAplicado?: SortOrder
    indiceBase?: SortOrder
    percentualAdicional?: SortOrder
    reajusteTotal?: SortOrder
    dataReferencia?: SortOrder
    dataAplicacao?: SortOrder
    status?: SortOrder
    aplicado?: SortOrder
  }

  export type ReajusteMinOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    parcelaReferencia?: SortOrder
    valorOriginal?: SortOrder
    valorReajustado?: SortOrder
    indiceAplicado?: SortOrder
    indiceBase?: SortOrder
    percentualAdicional?: SortOrder
    reajusteTotal?: SortOrder
    dataReferencia?: SortOrder
    dataAplicacao?: SortOrder
    status?: SortOrder
    aplicado?: SortOrder
  }

  export type ReajusteSumOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    parcelaReferencia?: SortOrder
    valorOriginal?: SortOrder
    valorReajustado?: SortOrder
    indiceAplicado?: SortOrder
    percentualAdicional?: SortOrder
    reajusteTotal?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type ParametrosReajusteCountOrderByAggregateInput = {
    id?: SortOrder
    indiceBase?: SortOrder
    percentualAdicional?: SortOrder
    intervaloParcelas?: SortOrder
    alertaAntecipadoDias?: SortOrder
  }

  export type ParametrosReajusteAvgOrderByAggregateInput = {
    id?: SortOrder
    percentualAdicional?: SortOrder
    intervaloParcelas?: SortOrder
    alertaAntecipadoDias?: SortOrder
  }

  export type ParametrosReajusteMaxOrderByAggregateInput = {
    id?: SortOrder
    indiceBase?: SortOrder
    percentualAdicional?: SortOrder
    intervaloParcelas?: SortOrder
    alertaAntecipadoDias?: SortOrder
  }

  export type ParametrosReajusteMinOrderByAggregateInput = {
    id?: SortOrder
    indiceBase?: SortOrder
    percentualAdicional?: SortOrder
    intervaloParcelas?: SortOrder
    alertaAntecipadoDias?: SortOrder
  }

  export type ParametrosReajusteSumOrderByAggregateInput = {
    id?: SortOrder
    percentualAdicional?: SortOrder
    intervaloParcelas?: SortOrder
    alertaAntecipadoDias?: SortOrder
  }

  export type IndicesEconomicosCountOrderByAggregateInput = {
    id?: SortOrder
    IGPM?: SortOrder
    IPCA?: SortOrder
    INPC?: SortOrder
    data?: SortOrder
  }

  export type IndicesEconomicosAvgOrderByAggregateInput = {
    id?: SortOrder
    IGPM?: SortOrder
    IPCA?: SortOrder
    INPC?: SortOrder
  }

  export type IndicesEconomicosMaxOrderByAggregateInput = {
    id?: SortOrder
    IGPM?: SortOrder
    IPCA?: SortOrder
    INPC?: SortOrder
    data?: SortOrder
  }

  export type IndicesEconomicosMinOrderByAggregateInput = {
    id?: SortOrder
    IGPM?: SortOrder
    IPCA?: SortOrder
    INPC?: SortOrder
    data?: SortOrder
  }

  export type IndicesEconomicosSumOrderByAggregateInput = {
    id?: SortOrder
    IGPM?: SortOrder
    IPCA?: SortOrder
    INPC?: SortOrder
  }

  export type ParcelaInadimplenteListRelationFilter = {
    every?: ParcelaInadimplenteWhereInput
    some?: ParcelaInadimplenteWhereInput
    none?: ParcelaInadimplenteWhereInput
  }

  export type ParcelaInadimplenteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClienteInadimplenteCountOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    contratoId?: SortOrder
    valorEmAberto?: SortOrder
    diasAtraso?: SortOrder
    ultimaCobranca?: SortOrder
    status?: SortOrder
  }

  export type ClienteInadimplenteAvgOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    contratoId?: SortOrder
    valorEmAberto?: SortOrder
    diasAtraso?: SortOrder
  }

  export type ClienteInadimplenteMaxOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    contratoId?: SortOrder
    valorEmAberto?: SortOrder
    diasAtraso?: SortOrder
    ultimaCobranca?: SortOrder
    status?: SortOrder
  }

  export type ClienteInadimplenteMinOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    contratoId?: SortOrder
    valorEmAberto?: SortOrder
    diasAtraso?: SortOrder
    ultimaCobranca?: SortOrder
    status?: SortOrder
  }

  export type ClienteInadimplenteSumOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    contratoId?: SortOrder
    valorEmAberto?: SortOrder
    diasAtraso?: SortOrder
  }

  export type ClienteInadimplenteRelationFilter = {
    is?: ClienteInadimplenteWhereInput | null
    isNot?: ClienteInadimplenteWhereInput | null
  }

  export type ParcelaInadimplenteCountOrderByAggregateInput = {
    id?: SortOrder
    clienteInadimplente_id?: SortOrder
    numero?: SortOrder
    dataVencimento?: SortOrder
    valor?: SortOrder
    valorAtualizado?: SortOrder
    status?: SortOrder
  }

  export type ParcelaInadimplenteAvgOrderByAggregateInput = {
    id?: SortOrder
    clienteInadimplente_id?: SortOrder
    numero?: SortOrder
    valor?: SortOrder
    valorAtualizado?: SortOrder
  }

  export type ParcelaInadimplenteMaxOrderByAggregateInput = {
    id?: SortOrder
    clienteInadimplente_id?: SortOrder
    numero?: SortOrder
    dataVencimento?: SortOrder
    valor?: SortOrder
    valorAtualizado?: SortOrder
    status?: SortOrder
  }

  export type ParcelaInadimplenteMinOrderByAggregateInput = {
    id?: SortOrder
    clienteInadimplente_id?: SortOrder
    numero?: SortOrder
    dataVencimento?: SortOrder
    valor?: SortOrder
    valorAtualizado?: SortOrder
    status?: SortOrder
  }

  export type ParcelaInadimplenteSumOrderByAggregateInput = {
    id?: SortOrder
    clienteInadimplente_id?: SortOrder
    numero?: SortOrder
    valor?: SortOrder
    valorAtualizado?: SortOrder
  }

  export type InteracaoCountOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    observacao?: SortOrder
    usuario?: SortOrder
    parcelaId?: SortOrder
  }

  export type InteracaoAvgOrderByAggregateInput = {
    clienteId?: SortOrder
  }

  export type InteracaoMaxOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    observacao?: SortOrder
    usuario?: SortOrder
    parcelaId?: SortOrder
  }

  export type InteracaoMinOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    observacao?: SortOrder
    usuario?: SortOrder
    parcelaId?: SortOrder
  }

  export type InteracaoSumOrderByAggregateInput = {
    clienteId?: SortOrder
  }

  export type ComunicacaoCountOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    mensagem?: SortOrder
    status?: SortOrder
    parcelaInfo?: SortOrder
    anexos?: SortOrder
  }

  export type ComunicacaoAvgOrderByAggregateInput = {
    clienteId?: SortOrder
  }

  export type ComunicacaoMaxOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    mensagem?: SortOrder
    status?: SortOrder
  }

  export type ComunicacaoMinOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    tipo?: SortOrder
    data?: SortOrder
    mensagem?: SortOrder
    status?: SortOrder
  }

  export type ComunicacaoSumOrderByAggregateInput = {
    clienteId?: SortOrder
  }

  export type ModeloMensagemCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    conteudo?: SortOrder
  }

  export type ModeloMensagemMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    conteudo?: SortOrder
  }

  export type ModeloMensagemMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    conteudo?: SortOrder
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type ConfiguracaoGatilhosCountOrderByAggregateInput = {
    id?: SortOrder
    executarAutomaticamente?: SortOrder
    horarioExecucao?: SortOrder
    diasExecucao?: SortOrder
    repetirCobrancas?: SortOrder
    intervaloRepeticao?: SortOrder
    limitarRepeticoes?: SortOrder
    limiteRepeticoes?: SortOrder
    gerarLog?: SortOrder
    gatilhos?: SortOrder
  }

  export type ConfiguracaoGatilhosAvgOrderByAggregateInput = {
    id?: SortOrder
    intervaloRepeticao?: SortOrder
    limiteRepeticoes?: SortOrder
  }

  export type ConfiguracaoGatilhosMaxOrderByAggregateInput = {
    id?: SortOrder
    executarAutomaticamente?: SortOrder
    horarioExecucao?: SortOrder
    repetirCobrancas?: SortOrder
    intervaloRepeticao?: SortOrder
    limitarRepeticoes?: SortOrder
    limiteRepeticoes?: SortOrder
    gerarLog?: SortOrder
  }

  export type ConfiguracaoGatilhosMinOrderByAggregateInput = {
    id?: SortOrder
    executarAutomaticamente?: SortOrder
    horarioExecucao?: SortOrder
    repetirCobrancas?: SortOrder
    intervaloRepeticao?: SortOrder
    limitarRepeticoes?: SortOrder
    limiteRepeticoes?: SortOrder
    gerarLog?: SortOrder
  }

  export type ConfiguracaoGatilhosSumOrderByAggregateInput = {
    id?: SortOrder
    intervaloRepeticao?: SortOrder
    limiteRepeticoes?: SortOrder
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntFilter
    _min?: NestedJsonFilter
    _max?: NestedJsonFilter
  }

  export type AditivoCountOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    tipo?: SortOrder
    dataAssinatura?: SortOrder
    motivoAditivo?: SortOrder
    novoValor?: SortOrder
    novaDataFim?: SortOrder
    documentoUrl?: SortOrder
    status?: SortOrder
  }

  export type AditivoAvgOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    novoValor?: SortOrder
  }

  export type AditivoMaxOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    tipo?: SortOrder
    dataAssinatura?: SortOrder
    motivoAditivo?: SortOrder
    novoValor?: SortOrder
    novaDataFim?: SortOrder
    documentoUrl?: SortOrder
    status?: SortOrder
  }

  export type AditivoMinOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    tipo?: SortOrder
    dataAssinatura?: SortOrder
    motivoAditivo?: SortOrder
    novoValor?: SortOrder
    novaDataFim?: SortOrder
    documentoUrl?: SortOrder
    status?: SortOrder
  }

  export type AditivoSumOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    novoValor?: SortOrder
  }

  export type DistratoCountOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    dataDistrato?: SortOrder
    motivoDistrato?: SortOrder
    valorDevolucao?: SortOrder
    documentoUrl?: SortOrder
  }

  export type DistratoAvgOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    valorDevolucao?: SortOrder
  }

  export type DistratoMaxOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    dataDistrato?: SortOrder
    motivoDistrato?: SortOrder
    valorDevolucao?: SortOrder
    documentoUrl?: SortOrder
  }

  export type DistratoMinOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    dataDistrato?: SortOrder
    motivoDistrato?: SortOrder
    valorDevolucao?: SortOrder
    documentoUrl?: SortOrder
  }

  export type DistratoSumOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    valorDevolucao?: SortOrder
  }

  export type QuitacaoCountOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    dataQuitacao?: SortOrder
    valorQuitacao?: SortOrder
    documentoUrl?: SortOrder
  }

  export type QuitacaoAvgOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    valorQuitacao?: SortOrder
  }

  export type QuitacaoMaxOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    dataQuitacao?: SortOrder
    valorQuitacao?: SortOrder
    documentoUrl?: SortOrder
  }

  export type QuitacaoMinOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    dataQuitacao?: SortOrder
    valorQuitacao?: SortOrder
    documentoUrl?: SortOrder
  }

  export type QuitacaoSumOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    valorQuitacao?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    permissions?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    status?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoletoRelationFilter = {
    is?: BoletoWhereInput | null
    isNot?: BoletoWhereInput | null
  }

  export type ParcelaCountOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    numero?: SortOrder
    valor?: SortOrder
    dataVencimento?: SortOrder
    status?: SortOrder
    dataPagamento?: SortOrder
    valorPago?: SortOrder
    formaPagamento?: SortOrder
    observacoes?: SortOrder
    dataCriacao?: SortOrder
    boletoId?: SortOrder
  }

  export type ParcelaAvgOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    numero?: SortOrder
    valor?: SortOrder
    valorPago?: SortOrder
    boletoId?: SortOrder
  }

  export type ParcelaMaxOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    numero?: SortOrder
    valor?: SortOrder
    dataVencimento?: SortOrder
    status?: SortOrder
    dataPagamento?: SortOrder
    valorPago?: SortOrder
    formaPagamento?: SortOrder
    observacoes?: SortOrder
    dataCriacao?: SortOrder
    boletoId?: SortOrder
  }

  export type ParcelaMinOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    numero?: SortOrder
    valor?: SortOrder
    dataVencimento?: SortOrder
    status?: SortOrder
    dataPagamento?: SortOrder
    valorPago?: SortOrder
    formaPagamento?: SortOrder
    observacoes?: SortOrder
    dataCriacao?: SortOrder
    boletoId?: SortOrder
  }

  export type ParcelaSumOrderByAggregateInput = {
    id?: SortOrder
    contratoId?: SortOrder
    numero?: SortOrder
    valor?: SortOrder
    valorPago?: SortOrder
    boletoId?: SortOrder
  }

  export type EnderecoCreateNestedOneWithoutClienteInput = {
    create?: XOR<EnderecoCreateWithoutClienteInput, EnderecoUncheckedCreateWithoutClienteInput>
    connectOrCreate?: EnderecoCreateOrConnectWithoutClienteInput
    connect?: EnderecoWhereUniqueInput
  }

  export type ContatoCreateNestedOneWithoutClienteInput = {
    create?: XOR<ContatoCreateWithoutClienteInput, ContatoUncheckedCreateWithoutClienteInput>
    connectOrCreate?: ContatoCreateOrConnectWithoutClienteInput
    connect?: ContatoWhereUniqueInput
  }

  export type DocumentoCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<DocumentoCreateWithoutClienteInput>, Enumerable<DocumentoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<DocumentoCreateOrConnectWithoutClienteInput>
    createMany?: DocumentoCreateManyClienteInputEnvelope
    connect?: Enumerable<DocumentoWhereUniqueInput>
  }

  export type ContratoCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<ContratoCreateWithoutClienteInput>, Enumerable<ContratoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<ContratoCreateOrConnectWithoutClienteInput>
    createMany?: ContratoCreateManyClienteInputEnvelope
    connect?: Enumerable<ContratoWhereUniqueInput>
  }

  export type BoletoCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<BoletoCreateWithoutClienteInput>, Enumerable<BoletoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<BoletoCreateOrConnectWithoutClienteInput>
    createMany?: BoletoCreateManyClienteInputEnvelope
    connect?: Enumerable<BoletoWhereUniqueInput>
  }

  export type InteracaoCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<InteracaoCreateWithoutClienteInput>, Enumerable<InteracaoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<InteracaoCreateOrConnectWithoutClienteInput>
    createMany?: InteracaoCreateManyClienteInputEnvelope
    connect?: Enumerable<InteracaoWhereUniqueInput>
  }

  export type ComunicacaoCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<ComunicacaoCreateWithoutClienteInput>, Enumerable<ComunicacaoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<ComunicacaoCreateOrConnectWithoutClienteInput>
    createMany?: ComunicacaoCreateManyClienteInputEnvelope
    connect?: Enumerable<ComunicacaoWhereUniqueInput>
  }

  export type ClienteInadimplenteCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<ClienteInadimplenteCreateWithoutClienteInput>, Enumerable<ClienteInadimplenteUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<ClienteInadimplenteCreateOrConnectWithoutClienteInput>
    createMany?: ClienteInadimplenteCreateManyClienteInputEnvelope
    connect?: Enumerable<ClienteInadimplenteWhereUniqueInput>
  }

  export type EnderecoUncheckedCreateNestedOneWithoutClienteInput = {
    create?: XOR<EnderecoCreateWithoutClienteInput, EnderecoUncheckedCreateWithoutClienteInput>
    connectOrCreate?: EnderecoCreateOrConnectWithoutClienteInput
    connect?: EnderecoWhereUniqueInput
  }

  export type ContatoUncheckedCreateNestedOneWithoutClienteInput = {
    create?: XOR<ContatoCreateWithoutClienteInput, ContatoUncheckedCreateWithoutClienteInput>
    connectOrCreate?: ContatoCreateOrConnectWithoutClienteInput
    connect?: ContatoWhereUniqueInput
  }

  export type DocumentoUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<DocumentoCreateWithoutClienteInput>, Enumerable<DocumentoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<DocumentoCreateOrConnectWithoutClienteInput>
    createMany?: DocumentoCreateManyClienteInputEnvelope
    connect?: Enumerable<DocumentoWhereUniqueInput>
  }

  export type ContratoUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<ContratoCreateWithoutClienteInput>, Enumerable<ContratoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<ContratoCreateOrConnectWithoutClienteInput>
    createMany?: ContratoCreateManyClienteInputEnvelope
    connect?: Enumerable<ContratoWhereUniqueInput>
  }

  export type BoletoUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<BoletoCreateWithoutClienteInput>, Enumerable<BoletoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<BoletoCreateOrConnectWithoutClienteInput>
    createMany?: BoletoCreateManyClienteInputEnvelope
    connect?: Enumerable<BoletoWhereUniqueInput>
  }

  export type InteracaoUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<InteracaoCreateWithoutClienteInput>, Enumerable<InteracaoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<InteracaoCreateOrConnectWithoutClienteInput>
    createMany?: InteracaoCreateManyClienteInputEnvelope
    connect?: Enumerable<InteracaoWhereUniqueInput>
  }

  export type ComunicacaoUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<ComunicacaoCreateWithoutClienteInput>, Enumerable<ComunicacaoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<ComunicacaoCreateOrConnectWithoutClienteInput>
    createMany?: ComunicacaoCreateManyClienteInputEnvelope
    connect?: Enumerable<ComunicacaoWhereUniqueInput>
  }

  export type ClienteInadimplenteUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<Enumerable<ClienteInadimplenteCreateWithoutClienteInput>, Enumerable<ClienteInadimplenteUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<ClienteInadimplenteCreateOrConnectWithoutClienteInput>
    createMany?: ClienteInadimplenteCreateManyClienteInputEnvelope
    connect?: Enumerable<ClienteInadimplenteWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnderecoUpdateOneWithoutClienteNestedInput = {
    create?: XOR<EnderecoCreateWithoutClienteInput, EnderecoUncheckedCreateWithoutClienteInput>
    connectOrCreate?: EnderecoCreateOrConnectWithoutClienteInput
    upsert?: EnderecoUpsertWithoutClienteInput
    disconnect?: boolean
    delete?: boolean
    connect?: EnderecoWhereUniqueInput
    update?: XOR<EnderecoUpdateWithoutClienteInput, EnderecoUncheckedUpdateWithoutClienteInput>
  }

  export type ContatoUpdateOneWithoutClienteNestedInput = {
    create?: XOR<ContatoCreateWithoutClienteInput, ContatoUncheckedCreateWithoutClienteInput>
    connectOrCreate?: ContatoCreateOrConnectWithoutClienteInput
    upsert?: ContatoUpsertWithoutClienteInput
    disconnect?: boolean
    delete?: boolean
    connect?: ContatoWhereUniqueInput
    update?: XOR<ContatoUpdateWithoutClienteInput, ContatoUncheckedUpdateWithoutClienteInput>
  }

  export type DocumentoUpdateManyWithoutClienteNestedInput = {
    create?: XOR<Enumerable<DocumentoCreateWithoutClienteInput>, Enumerable<DocumentoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<DocumentoCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<DocumentoUpsertWithWhereUniqueWithoutClienteInput>
    createMany?: DocumentoCreateManyClienteInputEnvelope
    set?: Enumerable<DocumentoWhereUniqueInput>
    disconnect?: Enumerable<DocumentoWhereUniqueInput>
    delete?: Enumerable<DocumentoWhereUniqueInput>
    connect?: Enumerable<DocumentoWhereUniqueInput>
    update?: Enumerable<DocumentoUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<DocumentoUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<DocumentoScalarWhereInput>
  }

  export type ContratoUpdateManyWithoutClienteNestedInput = {
    create?: XOR<Enumerable<ContratoCreateWithoutClienteInput>, Enumerable<ContratoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<ContratoCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<ContratoUpsertWithWhereUniqueWithoutClienteInput>
    createMany?: ContratoCreateManyClienteInputEnvelope
    set?: Enumerable<ContratoWhereUniqueInput>
    disconnect?: Enumerable<ContratoWhereUniqueInput>
    delete?: Enumerable<ContratoWhereUniqueInput>
    connect?: Enumerable<ContratoWhereUniqueInput>
    update?: Enumerable<ContratoUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<ContratoUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<ContratoScalarWhereInput>
  }

  export type BoletoUpdateManyWithoutClienteNestedInput = {
    create?: XOR<Enumerable<BoletoCreateWithoutClienteInput>, Enumerable<BoletoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<BoletoCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<BoletoUpsertWithWhereUniqueWithoutClienteInput>
    createMany?: BoletoCreateManyClienteInputEnvelope
    set?: Enumerable<BoletoWhereUniqueInput>
    disconnect?: Enumerable<BoletoWhereUniqueInput>
    delete?: Enumerable<BoletoWhereUniqueInput>
    connect?: Enumerable<BoletoWhereUniqueInput>
    update?: Enumerable<BoletoUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<BoletoUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<BoletoScalarWhereInput>
  }

  export type InteracaoUpdateManyWithoutClienteNestedInput = {
    create?: XOR<Enumerable<InteracaoCreateWithoutClienteInput>, Enumerable<InteracaoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<InteracaoCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<InteracaoUpsertWithWhereUniqueWithoutClienteInput>
    createMany?: InteracaoCreateManyClienteInputEnvelope
    set?: Enumerable<InteracaoWhereUniqueInput>
    disconnect?: Enumerable<InteracaoWhereUniqueInput>
    delete?: Enumerable<InteracaoWhereUniqueInput>
    connect?: Enumerable<InteracaoWhereUniqueInput>
    update?: Enumerable<InteracaoUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<InteracaoUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<InteracaoScalarWhereInput>
  }

  export type ComunicacaoUpdateManyWithoutClienteNestedInput = {
    create?: XOR<Enumerable<ComunicacaoCreateWithoutClienteInput>, Enumerable<ComunicacaoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<ComunicacaoCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<ComunicacaoUpsertWithWhereUniqueWithoutClienteInput>
    createMany?: ComunicacaoCreateManyClienteInputEnvelope
    set?: Enumerable<ComunicacaoWhereUniqueInput>
    disconnect?: Enumerable<ComunicacaoWhereUniqueInput>
    delete?: Enumerable<ComunicacaoWhereUniqueInput>
    connect?: Enumerable<ComunicacaoWhereUniqueInput>
    update?: Enumerable<ComunicacaoUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<ComunicacaoUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<ComunicacaoScalarWhereInput>
  }

  export type ClienteInadimplenteUpdateManyWithoutClienteNestedInput = {
    create?: XOR<Enumerable<ClienteInadimplenteCreateWithoutClienteInput>, Enumerable<ClienteInadimplenteUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<ClienteInadimplenteCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<ClienteInadimplenteUpsertWithWhereUniqueWithoutClienteInput>
    createMany?: ClienteInadimplenteCreateManyClienteInputEnvelope
    set?: Enumerable<ClienteInadimplenteWhereUniqueInput>
    disconnect?: Enumerable<ClienteInadimplenteWhereUniqueInput>
    delete?: Enumerable<ClienteInadimplenteWhereUniqueInput>
    connect?: Enumerable<ClienteInadimplenteWhereUniqueInput>
    update?: Enumerable<ClienteInadimplenteUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<ClienteInadimplenteUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<ClienteInadimplenteScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnderecoUncheckedUpdateOneWithoutClienteNestedInput = {
    create?: XOR<EnderecoCreateWithoutClienteInput, EnderecoUncheckedCreateWithoutClienteInput>
    connectOrCreate?: EnderecoCreateOrConnectWithoutClienteInput
    upsert?: EnderecoUpsertWithoutClienteInput
    disconnect?: boolean
    delete?: boolean
    connect?: EnderecoWhereUniqueInput
    update?: XOR<EnderecoUpdateWithoutClienteInput, EnderecoUncheckedUpdateWithoutClienteInput>
  }

  export type ContatoUncheckedUpdateOneWithoutClienteNestedInput = {
    create?: XOR<ContatoCreateWithoutClienteInput, ContatoUncheckedCreateWithoutClienteInput>
    connectOrCreate?: ContatoCreateOrConnectWithoutClienteInput
    upsert?: ContatoUpsertWithoutClienteInput
    disconnect?: boolean
    delete?: boolean
    connect?: ContatoWhereUniqueInput
    update?: XOR<ContatoUpdateWithoutClienteInput, ContatoUncheckedUpdateWithoutClienteInput>
  }

  export type DocumentoUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<Enumerable<DocumentoCreateWithoutClienteInput>, Enumerable<DocumentoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<DocumentoCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<DocumentoUpsertWithWhereUniqueWithoutClienteInput>
    createMany?: DocumentoCreateManyClienteInputEnvelope
    set?: Enumerable<DocumentoWhereUniqueInput>
    disconnect?: Enumerable<DocumentoWhereUniqueInput>
    delete?: Enumerable<DocumentoWhereUniqueInput>
    connect?: Enumerable<DocumentoWhereUniqueInput>
    update?: Enumerable<DocumentoUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<DocumentoUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<DocumentoScalarWhereInput>
  }

  export type ContratoUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<Enumerable<ContratoCreateWithoutClienteInput>, Enumerable<ContratoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<ContratoCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<ContratoUpsertWithWhereUniqueWithoutClienteInput>
    createMany?: ContratoCreateManyClienteInputEnvelope
    set?: Enumerable<ContratoWhereUniqueInput>
    disconnect?: Enumerable<ContratoWhereUniqueInput>
    delete?: Enumerable<ContratoWhereUniqueInput>
    connect?: Enumerable<ContratoWhereUniqueInput>
    update?: Enumerable<ContratoUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<ContratoUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<ContratoScalarWhereInput>
  }

  export type BoletoUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<Enumerable<BoletoCreateWithoutClienteInput>, Enumerable<BoletoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<BoletoCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<BoletoUpsertWithWhereUniqueWithoutClienteInput>
    createMany?: BoletoCreateManyClienteInputEnvelope
    set?: Enumerable<BoletoWhereUniqueInput>
    disconnect?: Enumerable<BoletoWhereUniqueInput>
    delete?: Enumerable<BoletoWhereUniqueInput>
    connect?: Enumerable<BoletoWhereUniqueInput>
    update?: Enumerable<BoletoUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<BoletoUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<BoletoScalarWhereInput>
  }

  export type InteracaoUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<Enumerable<InteracaoCreateWithoutClienteInput>, Enumerable<InteracaoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<InteracaoCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<InteracaoUpsertWithWhereUniqueWithoutClienteInput>
    createMany?: InteracaoCreateManyClienteInputEnvelope
    set?: Enumerable<InteracaoWhereUniqueInput>
    disconnect?: Enumerable<InteracaoWhereUniqueInput>
    delete?: Enumerable<InteracaoWhereUniqueInput>
    connect?: Enumerable<InteracaoWhereUniqueInput>
    update?: Enumerable<InteracaoUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<InteracaoUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<InteracaoScalarWhereInput>
  }

  export type ComunicacaoUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<Enumerable<ComunicacaoCreateWithoutClienteInput>, Enumerable<ComunicacaoUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<ComunicacaoCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<ComunicacaoUpsertWithWhereUniqueWithoutClienteInput>
    createMany?: ComunicacaoCreateManyClienteInputEnvelope
    set?: Enumerable<ComunicacaoWhereUniqueInput>
    disconnect?: Enumerable<ComunicacaoWhereUniqueInput>
    delete?: Enumerable<ComunicacaoWhereUniqueInput>
    connect?: Enumerable<ComunicacaoWhereUniqueInput>
    update?: Enumerable<ComunicacaoUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<ComunicacaoUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<ComunicacaoScalarWhereInput>
  }

  export type ClienteInadimplenteUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<Enumerable<ClienteInadimplenteCreateWithoutClienteInput>, Enumerable<ClienteInadimplenteUncheckedCreateWithoutClienteInput>>
    connectOrCreate?: Enumerable<ClienteInadimplenteCreateOrConnectWithoutClienteInput>
    upsert?: Enumerable<ClienteInadimplenteUpsertWithWhereUniqueWithoutClienteInput>
    createMany?: ClienteInadimplenteCreateManyClienteInputEnvelope
    set?: Enumerable<ClienteInadimplenteWhereUniqueInput>
    disconnect?: Enumerable<ClienteInadimplenteWhereUniqueInput>
    delete?: Enumerable<ClienteInadimplenteWhereUniqueInput>
    connect?: Enumerable<ClienteInadimplenteWhereUniqueInput>
    update?: Enumerable<ClienteInadimplenteUpdateWithWhereUniqueWithoutClienteInput>
    updateMany?: Enumerable<ClienteInadimplenteUpdateManyWithWhereWithoutClienteInput>
    deleteMany?: Enumerable<ClienteInadimplenteScalarWhereInput>
  }

  export type ClienteCreateNestedOneWithoutEnderecoInput = {
    create?: XOR<ClienteCreateWithoutEnderecoInput, ClienteUncheckedCreateWithoutEnderecoInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutEnderecoInput
    connect?: ClienteWhereUniqueInput
  }

  export type ClienteUpdateOneRequiredWithoutEnderecoNestedInput = {
    create?: XOR<ClienteCreateWithoutEnderecoInput, ClienteUncheckedCreateWithoutEnderecoInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutEnderecoInput
    upsert?: ClienteUpsertWithoutEnderecoInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<ClienteUpdateWithoutEnderecoInput, ClienteUncheckedUpdateWithoutEnderecoInput>
  }

  export type ContatoCreatetelefonesInput = {
    set: Enumerable<string>
  }

  export type ContatoCreateemailsInput = {
    set: Enumerable<string>
  }

  export type ClienteCreateNestedOneWithoutContatosInput = {
    create?: XOR<ClienteCreateWithoutContatosInput, ClienteUncheckedCreateWithoutContatosInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutContatosInput
    connect?: ClienteWhereUniqueInput
  }

  export type ContatoUpdatetelefonesInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type ContatoUpdateemailsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type ClienteUpdateOneRequiredWithoutContatosNestedInput = {
    create?: XOR<ClienteCreateWithoutContatosInput, ClienteUncheckedCreateWithoutContatosInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutContatosInput
    upsert?: ClienteUpsertWithoutContatosInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<ClienteUpdateWithoutContatosInput, ClienteUncheckedUpdateWithoutContatosInput>
  }

  export type ClienteCreateNestedOneWithoutDocumentosInput = {
    create?: XOR<ClienteCreateWithoutDocumentosInput, ClienteUncheckedCreateWithoutDocumentosInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutDocumentosInput
    connect?: ClienteWhereUniqueInput
  }

  export type ClienteUpdateOneRequiredWithoutDocumentosNestedInput = {
    create?: XOR<ClienteCreateWithoutDocumentosInput, ClienteUncheckedCreateWithoutDocumentosInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutDocumentosInput
    upsert?: ClienteUpsertWithoutDocumentosInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<ClienteUpdateWithoutDocumentosInput, ClienteUncheckedUpdateWithoutDocumentosInput>
  }

  export type ContratoCreateNestedManyWithoutLoteInput = {
    create?: XOR<Enumerable<ContratoCreateWithoutLoteInput>, Enumerable<ContratoUncheckedCreateWithoutLoteInput>>
    connectOrCreate?: Enumerable<ContratoCreateOrConnectWithoutLoteInput>
    createMany?: ContratoCreateManyLoteInputEnvelope
    connect?: Enumerable<ContratoWhereUniqueInput>
  }

  export type ContratoUncheckedCreateNestedManyWithoutLoteInput = {
    create?: XOR<Enumerable<ContratoCreateWithoutLoteInput>, Enumerable<ContratoUncheckedCreateWithoutLoteInput>>
    connectOrCreate?: Enumerable<ContratoCreateOrConnectWithoutLoteInput>
    createMany?: ContratoCreateManyLoteInputEnvelope
    connect?: Enumerable<ContratoWhereUniqueInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type ContratoUpdateManyWithoutLoteNestedInput = {
    create?: XOR<Enumerable<ContratoCreateWithoutLoteInput>, Enumerable<ContratoUncheckedCreateWithoutLoteInput>>
    connectOrCreate?: Enumerable<ContratoCreateOrConnectWithoutLoteInput>
    upsert?: Enumerable<ContratoUpsertWithWhereUniqueWithoutLoteInput>
    createMany?: ContratoCreateManyLoteInputEnvelope
    set?: Enumerable<ContratoWhereUniqueInput>
    disconnect?: Enumerable<ContratoWhereUniqueInput>
    delete?: Enumerable<ContratoWhereUniqueInput>
    connect?: Enumerable<ContratoWhereUniqueInput>
    update?: Enumerable<ContratoUpdateWithWhereUniqueWithoutLoteInput>
    updateMany?: Enumerable<ContratoUpdateManyWithWhereWithoutLoteInput>
    deleteMany?: Enumerable<ContratoScalarWhereInput>
  }

  export type ContratoUncheckedUpdateManyWithoutLoteNestedInput = {
    create?: XOR<Enumerable<ContratoCreateWithoutLoteInput>, Enumerable<ContratoUncheckedCreateWithoutLoteInput>>
    connectOrCreate?: Enumerable<ContratoCreateOrConnectWithoutLoteInput>
    upsert?: Enumerable<ContratoUpsertWithWhereUniqueWithoutLoteInput>
    createMany?: ContratoCreateManyLoteInputEnvelope
    set?: Enumerable<ContratoWhereUniqueInput>
    disconnect?: Enumerable<ContratoWhereUniqueInput>
    delete?: Enumerable<ContratoWhereUniqueInput>
    connect?: Enumerable<ContratoWhereUniqueInput>
    update?: Enumerable<ContratoUpdateWithWhereUniqueWithoutLoteInput>
    updateMany?: Enumerable<ContratoUpdateManyWithWhereWithoutLoteInput>
    deleteMany?: Enumerable<ContratoScalarWhereInput>
  }

  export type ClienteCreateNestedOneWithoutContratosInput = {
    create?: XOR<ClienteCreateWithoutContratosInput, ClienteUncheckedCreateWithoutContratosInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutContratosInput
    connect?: ClienteWhereUniqueInput
  }

  export type LoteCreateNestedOneWithoutContratosInput = {
    create?: XOR<LoteCreateWithoutContratosInput, LoteUncheckedCreateWithoutContratosInput>
    connectOrCreate?: LoteCreateOrConnectWithoutContratosInput
    connect?: LoteWhereUniqueInput
  }

  export type BoletoCreateNestedManyWithoutContratoInput = {
    create?: XOR<Enumerable<BoletoCreateWithoutContratoInput>, Enumerable<BoletoUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<BoletoCreateOrConnectWithoutContratoInput>
    createMany?: BoletoCreateManyContratoInputEnvelope
    connect?: Enumerable<BoletoWhereUniqueInput>
  }

  export type ReajusteCreateNestedManyWithoutContratoInput = {
    create?: XOR<Enumerable<ReajusteCreateWithoutContratoInput>, Enumerable<ReajusteUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<ReajusteCreateOrConnectWithoutContratoInput>
    createMany?: ReajusteCreateManyContratoInputEnvelope
    connect?: Enumerable<ReajusteWhereUniqueInput>
  }

  export type AditivoCreateNestedManyWithoutContratoInput = {
    create?: XOR<Enumerable<AditivoCreateWithoutContratoInput>, Enumerable<AditivoUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<AditivoCreateOrConnectWithoutContratoInput>
    createMany?: AditivoCreateManyContratoInputEnvelope
    connect?: Enumerable<AditivoWhereUniqueInput>
  }

  export type DistratoCreateNestedManyWithoutContratoInput = {
    create?: XOR<Enumerable<DistratoCreateWithoutContratoInput>, Enumerable<DistratoUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<DistratoCreateOrConnectWithoutContratoInput>
    createMany?: DistratoCreateManyContratoInputEnvelope
    connect?: Enumerable<DistratoWhereUniqueInput>
  }

  export type QuitacaoCreateNestedManyWithoutContratoInput = {
    create?: XOR<Enumerable<QuitacaoCreateWithoutContratoInput>, Enumerable<QuitacaoUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<QuitacaoCreateOrConnectWithoutContratoInput>
    createMany?: QuitacaoCreateManyContratoInputEnvelope
    connect?: Enumerable<QuitacaoWhereUniqueInput>
  }

  export type ParcelaCreateNestedManyWithoutContratoInput = {
    create?: XOR<Enumerable<ParcelaCreateWithoutContratoInput>, Enumerable<ParcelaUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<ParcelaCreateOrConnectWithoutContratoInput>
    createMany?: ParcelaCreateManyContratoInputEnvelope
    connect?: Enumerable<ParcelaWhereUniqueInput>
  }

  export type BoletoUncheckedCreateNestedManyWithoutContratoInput = {
    create?: XOR<Enumerable<BoletoCreateWithoutContratoInput>, Enumerable<BoletoUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<BoletoCreateOrConnectWithoutContratoInput>
    createMany?: BoletoCreateManyContratoInputEnvelope
    connect?: Enumerable<BoletoWhereUniqueInput>
  }

  export type ReajusteUncheckedCreateNestedManyWithoutContratoInput = {
    create?: XOR<Enumerable<ReajusteCreateWithoutContratoInput>, Enumerable<ReajusteUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<ReajusteCreateOrConnectWithoutContratoInput>
    createMany?: ReajusteCreateManyContratoInputEnvelope
    connect?: Enumerable<ReajusteWhereUniqueInput>
  }

  export type AditivoUncheckedCreateNestedManyWithoutContratoInput = {
    create?: XOR<Enumerable<AditivoCreateWithoutContratoInput>, Enumerable<AditivoUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<AditivoCreateOrConnectWithoutContratoInput>
    createMany?: AditivoCreateManyContratoInputEnvelope
    connect?: Enumerable<AditivoWhereUniqueInput>
  }

  export type DistratoUncheckedCreateNestedManyWithoutContratoInput = {
    create?: XOR<Enumerable<DistratoCreateWithoutContratoInput>, Enumerable<DistratoUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<DistratoCreateOrConnectWithoutContratoInput>
    createMany?: DistratoCreateManyContratoInputEnvelope
    connect?: Enumerable<DistratoWhereUniqueInput>
  }

  export type QuitacaoUncheckedCreateNestedManyWithoutContratoInput = {
    create?: XOR<Enumerable<QuitacaoCreateWithoutContratoInput>, Enumerable<QuitacaoUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<QuitacaoCreateOrConnectWithoutContratoInput>
    createMany?: QuitacaoCreateManyContratoInputEnvelope
    connect?: Enumerable<QuitacaoWhereUniqueInput>
  }

  export type ParcelaUncheckedCreateNestedManyWithoutContratoInput = {
    create?: XOR<Enumerable<ParcelaCreateWithoutContratoInput>, Enumerable<ParcelaUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<ParcelaCreateOrConnectWithoutContratoInput>
    createMany?: ParcelaCreateManyContratoInputEnvelope
    connect?: Enumerable<ParcelaWhereUniqueInput>
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type ClienteUpdateOneRequiredWithoutContratosNestedInput = {
    create?: XOR<ClienteCreateWithoutContratosInput, ClienteUncheckedCreateWithoutContratosInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutContratosInput
    upsert?: ClienteUpsertWithoutContratosInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<ClienteUpdateWithoutContratosInput, ClienteUncheckedUpdateWithoutContratosInput>
  }

  export type LoteUpdateOneRequiredWithoutContratosNestedInput = {
    create?: XOR<LoteCreateWithoutContratosInput, LoteUncheckedCreateWithoutContratosInput>
    connectOrCreate?: LoteCreateOrConnectWithoutContratosInput
    upsert?: LoteUpsertWithoutContratosInput
    connect?: LoteWhereUniqueInput
    update?: XOR<LoteUpdateWithoutContratosInput, LoteUncheckedUpdateWithoutContratosInput>
  }

  export type BoletoUpdateManyWithoutContratoNestedInput = {
    create?: XOR<Enumerable<BoletoCreateWithoutContratoInput>, Enumerable<BoletoUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<BoletoCreateOrConnectWithoutContratoInput>
    upsert?: Enumerable<BoletoUpsertWithWhereUniqueWithoutContratoInput>
    createMany?: BoletoCreateManyContratoInputEnvelope
    set?: Enumerable<BoletoWhereUniqueInput>
    disconnect?: Enumerable<BoletoWhereUniqueInput>
    delete?: Enumerable<BoletoWhereUniqueInput>
    connect?: Enumerable<BoletoWhereUniqueInput>
    update?: Enumerable<BoletoUpdateWithWhereUniqueWithoutContratoInput>
    updateMany?: Enumerable<BoletoUpdateManyWithWhereWithoutContratoInput>
    deleteMany?: Enumerable<BoletoScalarWhereInput>
  }

  export type ReajusteUpdateManyWithoutContratoNestedInput = {
    create?: XOR<Enumerable<ReajusteCreateWithoutContratoInput>, Enumerable<ReajusteUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<ReajusteCreateOrConnectWithoutContratoInput>
    upsert?: Enumerable<ReajusteUpsertWithWhereUniqueWithoutContratoInput>
    createMany?: ReajusteCreateManyContratoInputEnvelope
    set?: Enumerable<ReajusteWhereUniqueInput>
    disconnect?: Enumerable<ReajusteWhereUniqueInput>
    delete?: Enumerable<ReajusteWhereUniqueInput>
    connect?: Enumerable<ReajusteWhereUniqueInput>
    update?: Enumerable<ReajusteUpdateWithWhereUniqueWithoutContratoInput>
    updateMany?: Enumerable<ReajusteUpdateManyWithWhereWithoutContratoInput>
    deleteMany?: Enumerable<ReajusteScalarWhereInput>
  }

  export type AditivoUpdateManyWithoutContratoNestedInput = {
    create?: XOR<Enumerable<AditivoCreateWithoutContratoInput>, Enumerable<AditivoUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<AditivoCreateOrConnectWithoutContratoInput>
    upsert?: Enumerable<AditivoUpsertWithWhereUniqueWithoutContratoInput>
    createMany?: AditivoCreateManyContratoInputEnvelope
    set?: Enumerable<AditivoWhereUniqueInput>
    disconnect?: Enumerable<AditivoWhereUniqueInput>
    delete?: Enumerable<AditivoWhereUniqueInput>
    connect?: Enumerable<AditivoWhereUniqueInput>
    update?: Enumerable<AditivoUpdateWithWhereUniqueWithoutContratoInput>
    updateMany?: Enumerable<AditivoUpdateManyWithWhereWithoutContratoInput>
    deleteMany?: Enumerable<AditivoScalarWhereInput>
  }

  export type DistratoUpdateManyWithoutContratoNestedInput = {
    create?: XOR<Enumerable<DistratoCreateWithoutContratoInput>, Enumerable<DistratoUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<DistratoCreateOrConnectWithoutContratoInput>
    upsert?: Enumerable<DistratoUpsertWithWhereUniqueWithoutContratoInput>
    createMany?: DistratoCreateManyContratoInputEnvelope
    set?: Enumerable<DistratoWhereUniqueInput>
    disconnect?: Enumerable<DistratoWhereUniqueInput>
    delete?: Enumerable<DistratoWhereUniqueInput>
    connect?: Enumerable<DistratoWhereUniqueInput>
    update?: Enumerable<DistratoUpdateWithWhereUniqueWithoutContratoInput>
    updateMany?: Enumerable<DistratoUpdateManyWithWhereWithoutContratoInput>
    deleteMany?: Enumerable<DistratoScalarWhereInput>
  }

  export type QuitacaoUpdateManyWithoutContratoNestedInput = {
    create?: XOR<Enumerable<QuitacaoCreateWithoutContratoInput>, Enumerable<QuitacaoUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<QuitacaoCreateOrConnectWithoutContratoInput>
    upsert?: Enumerable<QuitacaoUpsertWithWhereUniqueWithoutContratoInput>
    createMany?: QuitacaoCreateManyContratoInputEnvelope
    set?: Enumerable<QuitacaoWhereUniqueInput>
    disconnect?: Enumerable<QuitacaoWhereUniqueInput>
    delete?: Enumerable<QuitacaoWhereUniqueInput>
    connect?: Enumerable<QuitacaoWhereUniqueInput>
    update?: Enumerable<QuitacaoUpdateWithWhereUniqueWithoutContratoInput>
    updateMany?: Enumerable<QuitacaoUpdateManyWithWhereWithoutContratoInput>
    deleteMany?: Enumerable<QuitacaoScalarWhereInput>
  }

  export type ParcelaUpdateManyWithoutContratoNestedInput = {
    create?: XOR<Enumerable<ParcelaCreateWithoutContratoInput>, Enumerable<ParcelaUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<ParcelaCreateOrConnectWithoutContratoInput>
    upsert?: Enumerable<ParcelaUpsertWithWhereUniqueWithoutContratoInput>
    createMany?: ParcelaCreateManyContratoInputEnvelope
    set?: Enumerable<ParcelaWhereUniqueInput>
    disconnect?: Enumerable<ParcelaWhereUniqueInput>
    delete?: Enumerable<ParcelaWhereUniqueInput>
    connect?: Enumerable<ParcelaWhereUniqueInput>
    update?: Enumerable<ParcelaUpdateWithWhereUniqueWithoutContratoInput>
    updateMany?: Enumerable<ParcelaUpdateManyWithWhereWithoutContratoInput>
    deleteMany?: Enumerable<ParcelaScalarWhereInput>
  }

  export type BoletoUncheckedUpdateManyWithoutContratoNestedInput = {
    create?: XOR<Enumerable<BoletoCreateWithoutContratoInput>, Enumerable<BoletoUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<BoletoCreateOrConnectWithoutContratoInput>
    upsert?: Enumerable<BoletoUpsertWithWhereUniqueWithoutContratoInput>
    createMany?: BoletoCreateManyContratoInputEnvelope
    set?: Enumerable<BoletoWhereUniqueInput>
    disconnect?: Enumerable<BoletoWhereUniqueInput>
    delete?: Enumerable<BoletoWhereUniqueInput>
    connect?: Enumerable<BoletoWhereUniqueInput>
    update?: Enumerable<BoletoUpdateWithWhereUniqueWithoutContratoInput>
    updateMany?: Enumerable<BoletoUpdateManyWithWhereWithoutContratoInput>
    deleteMany?: Enumerable<BoletoScalarWhereInput>
  }

  export type ReajusteUncheckedUpdateManyWithoutContratoNestedInput = {
    create?: XOR<Enumerable<ReajusteCreateWithoutContratoInput>, Enumerable<ReajusteUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<ReajusteCreateOrConnectWithoutContratoInput>
    upsert?: Enumerable<ReajusteUpsertWithWhereUniqueWithoutContratoInput>
    createMany?: ReajusteCreateManyContratoInputEnvelope
    set?: Enumerable<ReajusteWhereUniqueInput>
    disconnect?: Enumerable<ReajusteWhereUniqueInput>
    delete?: Enumerable<ReajusteWhereUniqueInput>
    connect?: Enumerable<ReajusteWhereUniqueInput>
    update?: Enumerable<ReajusteUpdateWithWhereUniqueWithoutContratoInput>
    updateMany?: Enumerable<ReajusteUpdateManyWithWhereWithoutContratoInput>
    deleteMany?: Enumerable<ReajusteScalarWhereInput>
  }

  export type AditivoUncheckedUpdateManyWithoutContratoNestedInput = {
    create?: XOR<Enumerable<AditivoCreateWithoutContratoInput>, Enumerable<AditivoUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<AditivoCreateOrConnectWithoutContratoInput>
    upsert?: Enumerable<AditivoUpsertWithWhereUniqueWithoutContratoInput>
    createMany?: AditivoCreateManyContratoInputEnvelope
    set?: Enumerable<AditivoWhereUniqueInput>
    disconnect?: Enumerable<AditivoWhereUniqueInput>
    delete?: Enumerable<AditivoWhereUniqueInput>
    connect?: Enumerable<AditivoWhereUniqueInput>
    update?: Enumerable<AditivoUpdateWithWhereUniqueWithoutContratoInput>
    updateMany?: Enumerable<AditivoUpdateManyWithWhereWithoutContratoInput>
    deleteMany?: Enumerable<AditivoScalarWhereInput>
  }

  export type DistratoUncheckedUpdateManyWithoutContratoNestedInput = {
    create?: XOR<Enumerable<DistratoCreateWithoutContratoInput>, Enumerable<DistratoUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<DistratoCreateOrConnectWithoutContratoInput>
    upsert?: Enumerable<DistratoUpsertWithWhereUniqueWithoutContratoInput>
    createMany?: DistratoCreateManyContratoInputEnvelope
    set?: Enumerable<DistratoWhereUniqueInput>
    disconnect?: Enumerable<DistratoWhereUniqueInput>
    delete?: Enumerable<DistratoWhereUniqueInput>
    connect?: Enumerable<DistratoWhereUniqueInput>
    update?: Enumerable<DistratoUpdateWithWhereUniqueWithoutContratoInput>
    updateMany?: Enumerable<DistratoUpdateManyWithWhereWithoutContratoInput>
    deleteMany?: Enumerable<DistratoScalarWhereInput>
  }

  export type QuitacaoUncheckedUpdateManyWithoutContratoNestedInput = {
    create?: XOR<Enumerable<QuitacaoCreateWithoutContratoInput>, Enumerable<QuitacaoUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<QuitacaoCreateOrConnectWithoutContratoInput>
    upsert?: Enumerable<QuitacaoUpsertWithWhereUniqueWithoutContratoInput>
    createMany?: QuitacaoCreateManyContratoInputEnvelope
    set?: Enumerable<QuitacaoWhereUniqueInput>
    disconnect?: Enumerable<QuitacaoWhereUniqueInput>
    delete?: Enumerable<QuitacaoWhereUniqueInput>
    connect?: Enumerable<QuitacaoWhereUniqueInput>
    update?: Enumerable<QuitacaoUpdateWithWhereUniqueWithoutContratoInput>
    updateMany?: Enumerable<QuitacaoUpdateManyWithWhereWithoutContratoInput>
    deleteMany?: Enumerable<QuitacaoScalarWhereInput>
  }

  export type ParcelaUncheckedUpdateManyWithoutContratoNestedInput = {
    create?: XOR<Enumerable<ParcelaCreateWithoutContratoInput>, Enumerable<ParcelaUncheckedCreateWithoutContratoInput>>
    connectOrCreate?: Enumerable<ParcelaCreateOrConnectWithoutContratoInput>
    upsert?: Enumerable<ParcelaUpsertWithWhereUniqueWithoutContratoInput>
    createMany?: ParcelaCreateManyContratoInputEnvelope
    set?: Enumerable<ParcelaWhereUniqueInput>
    disconnect?: Enumerable<ParcelaWhereUniqueInput>
    delete?: Enumerable<ParcelaWhereUniqueInput>
    connect?: Enumerable<ParcelaWhereUniqueInput>
    update?: Enumerable<ParcelaUpdateWithWhereUniqueWithoutContratoInput>
    updateMany?: Enumerable<ParcelaUpdateManyWithWhereWithoutContratoInput>
    deleteMany?: Enumerable<ParcelaScalarWhereInput>
  }

  export type ClienteCreateNestedOneWithoutBoletosInput = {
    create?: XOR<ClienteCreateWithoutBoletosInput, ClienteUncheckedCreateWithoutBoletosInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutBoletosInput
    connect?: ClienteWhereUniqueInput
  }

  export type ContratoCreateNestedOneWithoutBoletosInput = {
    create?: XOR<ContratoCreateWithoutBoletosInput, ContratoUncheckedCreateWithoutBoletosInput>
    connectOrCreate?: ContratoCreateOrConnectWithoutBoletosInput
    connect?: ContratoWhereUniqueInput
  }

  export type ParcelaCreateNestedOneWithoutBoletoInput = {
    create?: XOR<ParcelaCreateWithoutBoletoInput, ParcelaUncheckedCreateWithoutBoletoInput>
    connectOrCreate?: ParcelaCreateOrConnectWithoutBoletoInput
    connect?: ParcelaWhereUniqueInput
  }

  export type ParcelaUncheckedCreateNestedOneWithoutBoletoInput = {
    create?: XOR<ParcelaCreateWithoutBoletoInput, ParcelaUncheckedCreateWithoutBoletoInput>
    connectOrCreate?: ParcelaCreateOrConnectWithoutBoletoInput
    connect?: ParcelaWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ClienteUpdateOneRequiredWithoutBoletosNestedInput = {
    create?: XOR<ClienteCreateWithoutBoletosInput, ClienteUncheckedCreateWithoutBoletosInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutBoletosInput
    upsert?: ClienteUpsertWithoutBoletosInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<ClienteUpdateWithoutBoletosInput, ClienteUncheckedUpdateWithoutBoletosInput>
  }

  export type ContratoUpdateOneRequiredWithoutBoletosNestedInput = {
    create?: XOR<ContratoCreateWithoutBoletosInput, ContratoUncheckedCreateWithoutBoletosInput>
    connectOrCreate?: ContratoCreateOrConnectWithoutBoletosInput
    upsert?: ContratoUpsertWithoutBoletosInput
    connect?: ContratoWhereUniqueInput
    update?: XOR<ContratoUpdateWithoutBoletosInput, ContratoUncheckedUpdateWithoutBoletosInput>
  }

  export type ParcelaUpdateOneWithoutBoletoNestedInput = {
    create?: XOR<ParcelaCreateWithoutBoletoInput, ParcelaUncheckedCreateWithoutBoletoInput>
    connectOrCreate?: ParcelaCreateOrConnectWithoutBoletoInput
    upsert?: ParcelaUpsertWithoutBoletoInput
    disconnect?: boolean
    delete?: boolean
    connect?: ParcelaWhereUniqueInput
    update?: XOR<ParcelaUpdateWithoutBoletoInput, ParcelaUncheckedUpdateWithoutBoletoInput>
  }

  export type ParcelaUncheckedUpdateOneWithoutBoletoNestedInput = {
    create?: XOR<ParcelaCreateWithoutBoletoInput, ParcelaUncheckedCreateWithoutBoletoInput>
    connectOrCreate?: ParcelaCreateOrConnectWithoutBoletoInput
    upsert?: ParcelaUpsertWithoutBoletoInput
    disconnect?: boolean
    delete?: boolean
    connect?: ParcelaWhereUniqueInput
    update?: XOR<ParcelaUpdateWithoutBoletoInput, ParcelaUncheckedUpdateWithoutBoletoInput>
  }

  export type ContratoCreateNestedOneWithoutReajustesInput = {
    create?: XOR<ContratoCreateWithoutReajustesInput, ContratoUncheckedCreateWithoutReajustesInput>
    connectOrCreate?: ContratoCreateOrConnectWithoutReajustesInput
    connect?: ContratoWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ContratoUpdateOneRequiredWithoutReajustesNestedInput = {
    create?: XOR<ContratoCreateWithoutReajustesInput, ContratoUncheckedCreateWithoutReajustesInput>
    connectOrCreate?: ContratoCreateOrConnectWithoutReajustesInput
    upsert?: ContratoUpsertWithoutReajustesInput
    connect?: ContratoWhereUniqueInput
    update?: XOR<ContratoUpdateWithoutReajustesInput, ContratoUncheckedUpdateWithoutReajustesInput>
  }

  export type ClienteCreateNestedOneWithoutClientesInadimplentesInput = {
    create?: XOR<ClienteCreateWithoutClientesInadimplentesInput, ClienteUncheckedCreateWithoutClientesInadimplentesInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutClientesInadimplentesInput
    connect?: ClienteWhereUniqueInput
  }

  export type ParcelaInadimplenteCreateNestedManyWithoutClienteInadimplenteInput = {
    create?: XOR<Enumerable<ParcelaInadimplenteCreateWithoutClienteInadimplenteInput>, Enumerable<ParcelaInadimplenteUncheckedCreateWithoutClienteInadimplenteInput>>
    connectOrCreate?: Enumerable<ParcelaInadimplenteCreateOrConnectWithoutClienteInadimplenteInput>
    createMany?: ParcelaInadimplenteCreateManyClienteInadimplenteInputEnvelope
    connect?: Enumerable<ParcelaInadimplenteWhereUniqueInput>
  }

  export type ParcelaInadimplenteUncheckedCreateNestedManyWithoutClienteInadimplenteInput = {
    create?: XOR<Enumerable<ParcelaInadimplenteCreateWithoutClienteInadimplenteInput>, Enumerable<ParcelaInadimplenteUncheckedCreateWithoutClienteInadimplenteInput>>
    connectOrCreate?: Enumerable<ParcelaInadimplenteCreateOrConnectWithoutClienteInadimplenteInput>
    createMany?: ParcelaInadimplenteCreateManyClienteInadimplenteInputEnvelope
    connect?: Enumerable<ParcelaInadimplenteWhereUniqueInput>
  }

  export type ClienteUpdateOneRequiredWithoutClientesInadimplentesNestedInput = {
    create?: XOR<ClienteCreateWithoutClientesInadimplentesInput, ClienteUncheckedCreateWithoutClientesInadimplentesInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutClientesInadimplentesInput
    upsert?: ClienteUpsertWithoutClientesInadimplentesInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<ClienteUpdateWithoutClientesInadimplentesInput, ClienteUncheckedUpdateWithoutClientesInadimplentesInput>
  }

  export type ParcelaInadimplenteUpdateManyWithoutClienteInadimplenteNestedInput = {
    create?: XOR<Enumerable<ParcelaInadimplenteCreateWithoutClienteInadimplenteInput>, Enumerable<ParcelaInadimplenteUncheckedCreateWithoutClienteInadimplenteInput>>
    connectOrCreate?: Enumerable<ParcelaInadimplenteCreateOrConnectWithoutClienteInadimplenteInput>
    upsert?: Enumerable<ParcelaInadimplenteUpsertWithWhereUniqueWithoutClienteInadimplenteInput>
    createMany?: ParcelaInadimplenteCreateManyClienteInadimplenteInputEnvelope
    set?: Enumerable<ParcelaInadimplenteWhereUniqueInput>
    disconnect?: Enumerable<ParcelaInadimplenteWhereUniqueInput>
    delete?: Enumerable<ParcelaInadimplenteWhereUniqueInput>
    connect?: Enumerable<ParcelaInadimplenteWhereUniqueInput>
    update?: Enumerable<ParcelaInadimplenteUpdateWithWhereUniqueWithoutClienteInadimplenteInput>
    updateMany?: Enumerable<ParcelaInadimplenteUpdateManyWithWhereWithoutClienteInadimplenteInput>
    deleteMany?: Enumerable<ParcelaInadimplenteScalarWhereInput>
  }

  export type ParcelaInadimplenteUncheckedUpdateManyWithoutClienteInadimplenteNestedInput = {
    create?: XOR<Enumerable<ParcelaInadimplenteCreateWithoutClienteInadimplenteInput>, Enumerable<ParcelaInadimplenteUncheckedCreateWithoutClienteInadimplenteInput>>
    connectOrCreate?: Enumerable<ParcelaInadimplenteCreateOrConnectWithoutClienteInadimplenteInput>
    upsert?: Enumerable<ParcelaInadimplenteUpsertWithWhereUniqueWithoutClienteInadimplenteInput>
    createMany?: ParcelaInadimplenteCreateManyClienteInadimplenteInputEnvelope
    set?: Enumerable<ParcelaInadimplenteWhereUniqueInput>
    disconnect?: Enumerable<ParcelaInadimplenteWhereUniqueInput>
    delete?: Enumerable<ParcelaInadimplenteWhereUniqueInput>
    connect?: Enumerable<ParcelaInadimplenteWhereUniqueInput>
    update?: Enumerable<ParcelaInadimplenteUpdateWithWhereUniqueWithoutClienteInadimplenteInput>
    updateMany?: Enumerable<ParcelaInadimplenteUpdateManyWithWhereWithoutClienteInadimplenteInput>
    deleteMany?: Enumerable<ParcelaInadimplenteScalarWhereInput>
  }

  export type ClienteInadimplenteCreateNestedOneWithoutParcelasInput = {
    create?: XOR<ClienteInadimplenteCreateWithoutParcelasInput, ClienteInadimplenteUncheckedCreateWithoutParcelasInput>
    connectOrCreate?: ClienteInadimplenteCreateOrConnectWithoutParcelasInput
    connect?: ClienteInadimplenteWhereUniqueInput
  }

  export type ClienteInadimplenteUpdateOneRequiredWithoutParcelasNestedInput = {
    create?: XOR<ClienteInadimplenteCreateWithoutParcelasInput, ClienteInadimplenteUncheckedCreateWithoutParcelasInput>
    connectOrCreate?: ClienteInadimplenteCreateOrConnectWithoutParcelasInput
    upsert?: ClienteInadimplenteUpsertWithoutParcelasInput
    connect?: ClienteInadimplenteWhereUniqueInput
    update?: XOR<ClienteInadimplenteUpdateWithoutParcelasInput, ClienteInadimplenteUncheckedUpdateWithoutParcelasInput>
  }

  export type ClienteCreateNestedOneWithoutInteracoesInput = {
    create?: XOR<ClienteCreateWithoutInteracoesInput, ClienteUncheckedCreateWithoutInteracoesInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutInteracoesInput
    connect?: ClienteWhereUniqueInput
  }

  export type ClienteUpdateOneRequiredWithoutInteracoesNestedInput = {
    create?: XOR<ClienteCreateWithoutInteracoesInput, ClienteUncheckedCreateWithoutInteracoesInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutInteracoesInput
    upsert?: ClienteUpsertWithoutInteracoesInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<ClienteUpdateWithoutInteracoesInput, ClienteUncheckedUpdateWithoutInteracoesInput>
  }

  export type ClienteCreateNestedOneWithoutComunicacoesInput = {
    create?: XOR<ClienteCreateWithoutComunicacoesInput, ClienteUncheckedCreateWithoutComunicacoesInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutComunicacoesInput
    connect?: ClienteWhereUniqueInput
  }

  export type ClienteUpdateOneRequiredWithoutComunicacoesNestedInput = {
    create?: XOR<ClienteCreateWithoutComunicacoesInput, ClienteUncheckedCreateWithoutComunicacoesInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutComunicacoesInput
    upsert?: ClienteUpsertWithoutComunicacoesInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<ClienteUpdateWithoutComunicacoesInput, ClienteUncheckedUpdateWithoutComunicacoesInput>
  }

  export type ConfiguracaoGatilhosCreatediasExecucaoInput = {
    set: Enumerable<string>
  }

  export type ConfiguracaoGatilhosUpdatediasExecucaoInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type ContratoCreateNestedOneWithoutAditivosInput = {
    create?: XOR<ContratoCreateWithoutAditivosInput, ContratoUncheckedCreateWithoutAditivosInput>
    connectOrCreate?: ContratoCreateOrConnectWithoutAditivosInput
    connect?: ContratoWhereUniqueInput
  }

  export type ContratoUpdateOneRequiredWithoutAditivosNestedInput = {
    create?: XOR<ContratoCreateWithoutAditivosInput, ContratoUncheckedCreateWithoutAditivosInput>
    connectOrCreate?: ContratoCreateOrConnectWithoutAditivosInput
    upsert?: ContratoUpsertWithoutAditivosInput
    connect?: ContratoWhereUniqueInput
    update?: XOR<ContratoUpdateWithoutAditivosInput, ContratoUncheckedUpdateWithoutAditivosInput>
  }

  export type ContratoCreateNestedOneWithoutDistratosInput = {
    create?: XOR<ContratoCreateWithoutDistratosInput, ContratoUncheckedCreateWithoutDistratosInput>
    connectOrCreate?: ContratoCreateOrConnectWithoutDistratosInput
    connect?: ContratoWhereUniqueInput
  }

  export type ContratoUpdateOneRequiredWithoutDistratosNestedInput = {
    create?: XOR<ContratoCreateWithoutDistratosInput, ContratoUncheckedCreateWithoutDistratosInput>
    connectOrCreate?: ContratoCreateOrConnectWithoutDistratosInput
    upsert?: ContratoUpsertWithoutDistratosInput
    connect?: ContratoWhereUniqueInput
    update?: XOR<ContratoUpdateWithoutDistratosInput, ContratoUncheckedUpdateWithoutDistratosInput>
  }

  export type ContratoCreateNestedOneWithoutQuitacoesInput = {
    create?: XOR<ContratoCreateWithoutQuitacoesInput, ContratoUncheckedCreateWithoutQuitacoesInput>
    connectOrCreate?: ContratoCreateOrConnectWithoutQuitacoesInput
    connect?: ContratoWhereUniqueInput
  }

  export type ContratoUpdateOneRequiredWithoutQuitacoesNestedInput = {
    create?: XOR<ContratoCreateWithoutQuitacoesInput, ContratoUncheckedCreateWithoutQuitacoesInput>
    connectOrCreate?: ContratoCreateOrConnectWithoutQuitacoesInput
    upsert?: ContratoUpsertWithoutQuitacoesInput
    connect?: ContratoWhereUniqueInput
    update?: XOR<ContratoUpdateWithoutQuitacoesInput, ContratoUncheckedUpdateWithoutQuitacoesInput>
  }

  export type ContratoCreateNestedOneWithoutParcelasInput = {
    create?: XOR<ContratoCreateWithoutParcelasInput, ContratoUncheckedCreateWithoutParcelasInput>
    connectOrCreate?: ContratoCreateOrConnectWithoutParcelasInput
    connect?: ContratoWhereUniqueInput
  }

  export type BoletoCreateNestedOneWithoutParcelaInput = {
    create?: XOR<BoletoCreateWithoutParcelaInput, BoletoUncheckedCreateWithoutParcelaInput>
    connectOrCreate?: BoletoCreateOrConnectWithoutParcelaInput
    connect?: BoletoWhereUniqueInput
  }

  export type ContratoUpdateOneRequiredWithoutParcelasNestedInput = {
    create?: XOR<ContratoCreateWithoutParcelasInput, ContratoUncheckedCreateWithoutParcelasInput>
    connectOrCreate?: ContratoCreateOrConnectWithoutParcelasInput
    upsert?: ContratoUpsertWithoutParcelasInput
    connect?: ContratoWhereUniqueInput
    update?: XOR<ContratoUpdateWithoutParcelasInput, ContratoUncheckedUpdateWithoutParcelasInput>
  }

  export type BoletoUpdateOneWithoutParcelaNestedInput = {
    create?: XOR<BoletoCreateWithoutParcelaInput, BoletoUncheckedCreateWithoutParcelaInput>
    connectOrCreate?: BoletoCreateOrConnectWithoutParcelaInput
    upsert?: BoletoUpsertWithoutParcelaInput
    disconnect?: boolean
    delete?: boolean
    connect?: BoletoWhereUniqueInput
    update?: XOR<BoletoUpdateWithoutParcelaInput, BoletoUncheckedUpdateWithoutParcelaInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedDecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedDecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type NestedDecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type EnderecoCreateWithoutClienteInput = {
    cep: string
    logradouro: string
    numero: string
    complemento?: string | null
    bairro: string
    cidade: string
    estado: string
  }

  export type EnderecoUncheckedCreateWithoutClienteInput = {
    id?: number
    cep: string
    logradouro: string
    numero: string
    complemento?: string | null
    bairro: string
    cidade: string
    estado: string
  }

  export type EnderecoCreateOrConnectWithoutClienteInput = {
    where: EnderecoWhereUniqueInput
    create: XOR<EnderecoCreateWithoutClienteInput, EnderecoUncheckedCreateWithoutClienteInput>
  }

  export type ContatoCreateWithoutClienteInput = {
    telefones?: ContatoCreatetelefonesInput | Enumerable<string>
    emails?: ContatoCreateemailsInput | Enumerable<string>
  }

  export type ContatoUncheckedCreateWithoutClienteInput = {
    id?: number
    telefones?: ContatoCreatetelefonesInput | Enumerable<string>
    emails?: ContatoCreateemailsInput | Enumerable<string>
  }

  export type ContatoCreateOrConnectWithoutClienteInput = {
    where: ContatoWhereUniqueInput
    create: XOR<ContatoCreateWithoutClienteInput, ContatoUncheckedCreateWithoutClienteInput>
  }

  export type DocumentoCreateWithoutClienteInput = {
    tipo: string
    nome: string
    arquivo: string
    dataUpload?: Date | string
    s3Key?: string | null
  }

  export type DocumentoUncheckedCreateWithoutClienteInput = {
    id?: number
    tipo: string
    nome: string
    arquivo: string
    dataUpload?: Date | string
    s3Key?: string | null
  }

  export type DocumentoCreateOrConnectWithoutClienteInput = {
    where: DocumentoWhereUniqueInput
    create: XOR<DocumentoCreateWithoutClienteInput, DocumentoUncheckedCreateWithoutClienteInput>
  }

  export type DocumentoCreateManyClienteInputEnvelope = {
    data: Enumerable<DocumentoCreateManyClienteInput>
    skipDuplicates?: boolean
  }

  export type ContratoCreateWithoutClienteInput = {
    chave?: string | null
    numeroContrato?: string | null
    dataEmissao?: Date | string | null
    dataPrimeiraPrestacao?: Date | string | null
    valorPrestacao?: Decimal | DecimalJsLike | number | string | null
    dataInicio: Date | string
    dataFim: Date | string
    valorTotal: Decimal | DecimalJsLike | number | string
    valorEntrada: Decimal | DecimalJsLike | number | string
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status?: string
    dataCriacao?: Date | string
    parcelasPagas?: number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    lote: LoteCreateNestedOneWithoutContratosInput
    boletos?: BoletoCreateNestedManyWithoutContratoInput
    reajustes?: ReajusteCreateNestedManyWithoutContratoInput
    aditivos?: AditivoCreateNestedManyWithoutContratoInput
    distratos?: DistratoCreateNestedManyWithoutContratoInput
    quitacoes?: QuitacaoCreateNestedManyWithoutContratoInput
    parcelas?: ParcelaCreateNestedManyWithoutContratoInput
  }

  export type ContratoUncheckedCreateWithoutClienteInput = {
    id?: number
    loteId: number
    chave?: string | null
    numeroContrato?: string | null
    dataEmissao?: Date | string | null
    dataPrimeiraPrestacao?: Date | string | null
    valorPrestacao?: Decimal | DecimalJsLike | number | string | null
    dataInicio: Date | string
    dataFim: Date | string
    valorTotal: Decimal | DecimalJsLike | number | string
    valorEntrada: Decimal | DecimalJsLike | number | string
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status?: string
    dataCriacao?: Date | string
    parcelasPagas?: number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    boletos?: BoletoUncheckedCreateNestedManyWithoutContratoInput
    reajustes?: ReajusteUncheckedCreateNestedManyWithoutContratoInput
    aditivos?: AditivoUncheckedCreateNestedManyWithoutContratoInput
    distratos?: DistratoUncheckedCreateNestedManyWithoutContratoInput
    quitacoes?: QuitacaoUncheckedCreateNestedManyWithoutContratoInput
    parcelas?: ParcelaUncheckedCreateNestedManyWithoutContratoInput
  }

  export type ContratoCreateOrConnectWithoutClienteInput = {
    where: ContratoWhereUniqueInput
    create: XOR<ContratoCreateWithoutClienteInput, ContratoUncheckedCreateWithoutClienteInput>
  }

  export type ContratoCreateManyClienteInputEnvelope = {
    data: Enumerable<ContratoCreateManyClienteInput>
    skipDuplicates?: boolean
  }

  export type BoletoCreateWithoutClienteInput = {
    clienteNome: string
    valor: Decimal | DecimalJsLike | number | string
    dataVencimento: Date | string
    numeroParcela: number
    descricao: string
    nossoNumero: string
    linhaDigitavel: string
    codigoBarras: string
    pdfUrl: string
    dataGeracao?: Date | string
    status?: string
    dataPagamento?: Date | string | null
    valorPago?: Decimal | DecimalJsLike | number | string | null
    formaPagamento?: string | null
    dataCancelamento?: Date | string | null
    comprovante?: string | null
    parcelaId?: number | null
    contrato: ContratoCreateNestedOneWithoutBoletosInput
    parcela?: ParcelaCreateNestedOneWithoutBoletoInput
  }

  export type BoletoUncheckedCreateWithoutClienteInput = {
    id?: number
    clienteNome: string
    contratoId: number
    valor: Decimal | DecimalJsLike | number | string
    dataVencimento: Date | string
    numeroParcela: number
    descricao: string
    nossoNumero: string
    linhaDigitavel: string
    codigoBarras: string
    pdfUrl: string
    dataGeracao?: Date | string
    status?: string
    dataPagamento?: Date | string | null
    valorPago?: Decimal | DecimalJsLike | number | string | null
    formaPagamento?: string | null
    dataCancelamento?: Date | string | null
    comprovante?: string | null
    parcelaId?: number | null
    parcela?: ParcelaUncheckedCreateNestedOneWithoutBoletoInput
  }

  export type BoletoCreateOrConnectWithoutClienteInput = {
    where: BoletoWhereUniqueInput
    create: XOR<BoletoCreateWithoutClienteInput, BoletoUncheckedCreateWithoutClienteInput>
  }

  export type BoletoCreateManyClienteInputEnvelope = {
    data: Enumerable<BoletoCreateManyClienteInput>
    skipDuplicates?: boolean
  }

  export type InteracaoCreateWithoutClienteInput = {
    id?: string
    tipo: string
    data: Date | string
    observacao: string
    usuario: string
    parcelaId?: string | null
  }

  export type InteracaoUncheckedCreateWithoutClienteInput = {
    id?: string
    tipo: string
    data: Date | string
    observacao: string
    usuario: string
    parcelaId?: string | null
  }

  export type InteracaoCreateOrConnectWithoutClienteInput = {
    where: InteracaoWhereUniqueInput
    create: XOR<InteracaoCreateWithoutClienteInput, InteracaoUncheckedCreateWithoutClienteInput>
  }

  export type InteracaoCreateManyClienteInputEnvelope = {
    data: Enumerable<InteracaoCreateManyClienteInput>
    skipDuplicates?: boolean
  }

  export type ComunicacaoCreateWithoutClienteInput = {
    id?: string
    tipo: string
    data: Date | string
    mensagem: string
    status: string
    parcelaInfo?: NullableJsonNullValueInput | InputJsonValue
    anexos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ComunicacaoUncheckedCreateWithoutClienteInput = {
    id?: string
    tipo: string
    data: Date | string
    mensagem: string
    status: string
    parcelaInfo?: NullableJsonNullValueInput | InputJsonValue
    anexos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ComunicacaoCreateOrConnectWithoutClienteInput = {
    where: ComunicacaoWhereUniqueInput
    create: XOR<ComunicacaoCreateWithoutClienteInput, ComunicacaoUncheckedCreateWithoutClienteInput>
  }

  export type ComunicacaoCreateManyClienteInputEnvelope = {
    data: Enumerable<ComunicacaoCreateManyClienteInput>
    skipDuplicates?: boolean
  }

  export type ClienteInadimplenteCreateWithoutClienteInput = {
    contratoId: number
    valorEmAberto: Decimal | DecimalJsLike | number | string
    diasAtraso: number
    ultimaCobranca?: Date | string | null
    status: string
    parcelas?: ParcelaInadimplenteCreateNestedManyWithoutClienteInadimplenteInput
  }

  export type ClienteInadimplenteUncheckedCreateWithoutClienteInput = {
    id?: number
    contratoId: number
    valorEmAberto: Decimal | DecimalJsLike | number | string
    diasAtraso: number
    ultimaCobranca?: Date | string | null
    status: string
    parcelas?: ParcelaInadimplenteUncheckedCreateNestedManyWithoutClienteInadimplenteInput
  }

  export type ClienteInadimplenteCreateOrConnectWithoutClienteInput = {
    where: ClienteInadimplenteWhereUniqueInput
    create: XOR<ClienteInadimplenteCreateWithoutClienteInput, ClienteInadimplenteUncheckedCreateWithoutClienteInput>
  }

  export type ClienteInadimplenteCreateManyClienteInputEnvelope = {
    data: Enumerable<ClienteInadimplenteCreateManyClienteInput>
    skipDuplicates?: boolean
  }

  export type EnderecoUpsertWithoutClienteInput = {
    update: XOR<EnderecoUpdateWithoutClienteInput, EnderecoUncheckedUpdateWithoutClienteInput>
    create: XOR<EnderecoCreateWithoutClienteInput, EnderecoUncheckedCreateWithoutClienteInput>
  }

  export type EnderecoUpdateWithoutClienteInput = {
    cep?: StringFieldUpdateOperationsInput | string
    logradouro?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type EnderecoUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    cep?: StringFieldUpdateOperationsInput | string
    logradouro?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type ContatoUpsertWithoutClienteInput = {
    update: XOR<ContatoUpdateWithoutClienteInput, ContatoUncheckedUpdateWithoutClienteInput>
    create: XOR<ContatoCreateWithoutClienteInput, ContatoUncheckedCreateWithoutClienteInput>
  }

  export type ContatoUpdateWithoutClienteInput = {
    telefones?: ContatoUpdatetelefonesInput | Enumerable<string>
    emails?: ContatoUpdateemailsInput | Enumerable<string>
  }

  export type ContatoUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    telefones?: ContatoUpdatetelefonesInput | Enumerable<string>
    emails?: ContatoUpdateemailsInput | Enumerable<string>
  }

  export type DocumentoUpsertWithWhereUniqueWithoutClienteInput = {
    where: DocumentoWhereUniqueInput
    update: XOR<DocumentoUpdateWithoutClienteInput, DocumentoUncheckedUpdateWithoutClienteInput>
    create: XOR<DocumentoCreateWithoutClienteInput, DocumentoUncheckedCreateWithoutClienteInput>
  }

  export type DocumentoUpdateWithWhereUniqueWithoutClienteInput = {
    where: DocumentoWhereUniqueInput
    data: XOR<DocumentoUpdateWithoutClienteInput, DocumentoUncheckedUpdateWithoutClienteInput>
  }

  export type DocumentoUpdateManyWithWhereWithoutClienteInput = {
    where: DocumentoScalarWhereInput
    data: XOR<DocumentoUpdateManyMutationInput, DocumentoUncheckedUpdateManyWithoutDocumentosInput>
  }

  export type DocumentoScalarWhereInput = {
    AND?: Enumerable<DocumentoScalarWhereInput>
    OR?: Enumerable<DocumentoScalarWhereInput>
    NOT?: Enumerable<DocumentoScalarWhereInput>
    id?: IntFilter | number
    clienteId?: IntFilter | number
    tipo?: StringFilter | string
    nome?: StringFilter | string
    arquivo?: StringFilter | string
    dataUpload?: DateTimeFilter | Date | string
    s3Key?: StringNullableFilter | string | null
  }

  export type ContratoUpsertWithWhereUniqueWithoutClienteInput = {
    where: ContratoWhereUniqueInput
    update: XOR<ContratoUpdateWithoutClienteInput, ContratoUncheckedUpdateWithoutClienteInput>
    create: XOR<ContratoCreateWithoutClienteInput, ContratoUncheckedCreateWithoutClienteInput>
  }

  export type ContratoUpdateWithWhereUniqueWithoutClienteInput = {
    where: ContratoWhereUniqueInput
    data: XOR<ContratoUpdateWithoutClienteInput, ContratoUncheckedUpdateWithoutClienteInput>
  }

  export type ContratoUpdateManyWithWhereWithoutClienteInput = {
    where: ContratoScalarWhereInput
    data: XOR<ContratoUpdateManyMutationInput, ContratoUncheckedUpdateManyWithoutContratosInput>
  }

  export type ContratoScalarWhereInput = {
    AND?: Enumerable<ContratoScalarWhereInput>
    OR?: Enumerable<ContratoScalarWhereInput>
    NOT?: Enumerable<ContratoScalarWhereInput>
    id?: IntFilter | number
    clienteId?: IntFilter | number
    loteId?: IntFilter | number
    chave?: StringNullableFilter | string | null
    numeroContrato?: StringNullableFilter | string | null
    dataEmissao?: DateTimeNullableFilter | Date | string | null
    dataPrimeiraPrestacao?: DateTimeNullableFilter | Date | string | null
    valorPrestacao?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFilter | Date | string
    dataFim?: DateTimeFilter | Date | string
    valorTotal?: DecimalFilter | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFilter | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFilter | number
    dataVencimento?: IntFilter | number
    clausulas?: StringFilter | string
    status?: StringFilter | string
    dataCriacao?: DateTimeFilter | Date | string
    parcelasPagas?: IntFilter | number
    ultimoReajuste?: JsonNullableFilter
  }

  export type BoletoUpsertWithWhereUniqueWithoutClienteInput = {
    where: BoletoWhereUniqueInput
    update: XOR<BoletoUpdateWithoutClienteInput, BoletoUncheckedUpdateWithoutClienteInput>
    create: XOR<BoletoCreateWithoutClienteInput, BoletoUncheckedCreateWithoutClienteInput>
  }

  export type BoletoUpdateWithWhereUniqueWithoutClienteInput = {
    where: BoletoWhereUniqueInput
    data: XOR<BoletoUpdateWithoutClienteInput, BoletoUncheckedUpdateWithoutClienteInput>
  }

  export type BoletoUpdateManyWithWhereWithoutClienteInput = {
    where: BoletoScalarWhereInput
    data: XOR<BoletoUpdateManyMutationInput, BoletoUncheckedUpdateManyWithoutBoletosInput>
  }

  export type BoletoScalarWhereInput = {
    AND?: Enumerable<BoletoScalarWhereInput>
    OR?: Enumerable<BoletoScalarWhereInput>
    NOT?: Enumerable<BoletoScalarWhereInput>
    id?: IntFilter | number
    clienteId?: IntFilter | number
    clienteNome?: StringFilter | string
    contratoId?: IntFilter | number
    valor?: DecimalFilter | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFilter | Date | string
    numeroParcela?: IntFilter | number
    descricao?: StringFilter | string
    nossoNumero?: StringFilter | string
    linhaDigitavel?: StringFilter | string
    codigoBarras?: StringFilter | string
    pdfUrl?: StringFilter | string
    dataGeracao?: DateTimeFilter | Date | string
    status?: StringFilter | string
    dataPagamento?: DateTimeNullableFilter | Date | string | null
    valorPago?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: StringNullableFilter | string | null
    dataCancelamento?: DateTimeNullableFilter | Date | string | null
    comprovante?: StringNullableFilter | string | null
    parcelaId?: IntNullableFilter | number | null
  }

  export type InteracaoUpsertWithWhereUniqueWithoutClienteInput = {
    where: InteracaoWhereUniqueInput
    update: XOR<InteracaoUpdateWithoutClienteInput, InteracaoUncheckedUpdateWithoutClienteInput>
    create: XOR<InteracaoCreateWithoutClienteInput, InteracaoUncheckedCreateWithoutClienteInput>
  }

  export type InteracaoUpdateWithWhereUniqueWithoutClienteInput = {
    where: InteracaoWhereUniqueInput
    data: XOR<InteracaoUpdateWithoutClienteInput, InteracaoUncheckedUpdateWithoutClienteInput>
  }

  export type InteracaoUpdateManyWithWhereWithoutClienteInput = {
    where: InteracaoScalarWhereInput
    data: XOR<InteracaoUpdateManyMutationInput, InteracaoUncheckedUpdateManyWithoutInteracoesInput>
  }

  export type InteracaoScalarWhereInput = {
    AND?: Enumerable<InteracaoScalarWhereInput>
    OR?: Enumerable<InteracaoScalarWhereInput>
    NOT?: Enumerable<InteracaoScalarWhereInput>
    id?: StringFilter | string
    clienteId?: IntFilter | number
    tipo?: StringFilter | string
    data?: DateTimeFilter | Date | string
    observacao?: StringFilter | string
    usuario?: StringFilter | string
    parcelaId?: StringNullableFilter | string | null
  }

  export type ComunicacaoUpsertWithWhereUniqueWithoutClienteInput = {
    where: ComunicacaoWhereUniqueInput
    update: XOR<ComunicacaoUpdateWithoutClienteInput, ComunicacaoUncheckedUpdateWithoutClienteInput>
    create: XOR<ComunicacaoCreateWithoutClienteInput, ComunicacaoUncheckedCreateWithoutClienteInput>
  }

  export type ComunicacaoUpdateWithWhereUniqueWithoutClienteInput = {
    where: ComunicacaoWhereUniqueInput
    data: XOR<ComunicacaoUpdateWithoutClienteInput, ComunicacaoUncheckedUpdateWithoutClienteInput>
  }

  export type ComunicacaoUpdateManyWithWhereWithoutClienteInput = {
    where: ComunicacaoScalarWhereInput
    data: XOR<ComunicacaoUpdateManyMutationInput, ComunicacaoUncheckedUpdateManyWithoutComunicacoesInput>
  }

  export type ComunicacaoScalarWhereInput = {
    AND?: Enumerable<ComunicacaoScalarWhereInput>
    OR?: Enumerable<ComunicacaoScalarWhereInput>
    NOT?: Enumerable<ComunicacaoScalarWhereInput>
    id?: StringFilter | string
    clienteId?: IntFilter | number
    tipo?: StringFilter | string
    data?: DateTimeFilter | Date | string
    mensagem?: StringFilter | string
    status?: StringFilter | string
    parcelaInfo?: JsonNullableFilter
    anexos?: JsonNullableFilter
  }

  export type ClienteInadimplenteUpsertWithWhereUniqueWithoutClienteInput = {
    where: ClienteInadimplenteWhereUniqueInput
    update: XOR<ClienteInadimplenteUpdateWithoutClienteInput, ClienteInadimplenteUncheckedUpdateWithoutClienteInput>
    create: XOR<ClienteInadimplenteCreateWithoutClienteInput, ClienteInadimplenteUncheckedCreateWithoutClienteInput>
  }

  export type ClienteInadimplenteUpdateWithWhereUniqueWithoutClienteInput = {
    where: ClienteInadimplenteWhereUniqueInput
    data: XOR<ClienteInadimplenteUpdateWithoutClienteInput, ClienteInadimplenteUncheckedUpdateWithoutClienteInput>
  }

  export type ClienteInadimplenteUpdateManyWithWhereWithoutClienteInput = {
    where: ClienteInadimplenteScalarWhereInput
    data: XOR<ClienteInadimplenteUpdateManyMutationInput, ClienteInadimplenteUncheckedUpdateManyWithoutClientesInadimplentesInput>
  }

  export type ClienteInadimplenteScalarWhereInput = {
    AND?: Enumerable<ClienteInadimplenteScalarWhereInput>
    OR?: Enumerable<ClienteInadimplenteScalarWhereInput>
    NOT?: Enumerable<ClienteInadimplenteScalarWhereInput>
    id?: IntFilter | number
    clienteId?: IntFilter | number
    contratoId?: IntFilter | number
    valorEmAberto?: DecimalFilter | Decimal | DecimalJsLike | number | string
    diasAtraso?: IntFilter | number
    ultimaCobranca?: DateTimeNullableFilter | Date | string | null
    status?: StringFilter | string
  }

  export type ClienteCreateWithoutEnderecoInput = {
    nome: string
    nomeConjuge?: string | null
    profissao?: string | null
    cpfCnpj: string
    dataNascimento?: Date | string | null
    dataCadastro?: Date | string
    contatos?: ContatoCreateNestedOneWithoutClienteInput
    documentos?: DocumentoCreateNestedManyWithoutClienteInput
    contratos?: ContratoCreateNestedManyWithoutClienteInput
    boletos?: BoletoCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoCreateNestedManyWithoutClienteInput
    comunicacoes?: ComunicacaoCreateNestedManyWithoutClienteInput
    clientesInadimplentes?: ClienteInadimplenteCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutEnderecoInput = {
    id?: number
    nome: string
    nomeConjuge?: string | null
    profissao?: string | null
    cpfCnpj: string
    dataNascimento?: Date | string | null
    dataCadastro?: Date | string
    contatos?: ContatoUncheckedCreateNestedOneWithoutClienteInput
    documentos?: DocumentoUncheckedCreateNestedManyWithoutClienteInput
    contratos?: ContratoUncheckedCreateNestedManyWithoutClienteInput
    boletos?: BoletoUncheckedCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoUncheckedCreateNestedManyWithoutClienteInput
    comunicacoes?: ComunicacaoUncheckedCreateNestedManyWithoutClienteInput
    clientesInadimplentes?: ClienteInadimplenteUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutEnderecoInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutEnderecoInput, ClienteUncheckedCreateWithoutEnderecoInput>
  }

  export type ClienteUpsertWithoutEnderecoInput = {
    update: XOR<ClienteUpdateWithoutEnderecoInput, ClienteUncheckedUpdateWithoutEnderecoInput>
    create: XOR<ClienteCreateWithoutEnderecoInput, ClienteUncheckedCreateWithoutEnderecoInput>
  }

  export type ClienteUpdateWithoutEnderecoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    nomeConjuge?: NullableStringFieldUpdateOperationsInput | string | null
    profissao?: NullableStringFieldUpdateOperationsInput | string | null
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    contatos?: ContatoUpdateOneWithoutClienteNestedInput
    documentos?: DocumentoUpdateManyWithoutClienteNestedInput
    contratos?: ContratoUpdateManyWithoutClienteNestedInput
    boletos?: BoletoUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoUpdateManyWithoutClienteNestedInput
    comunicacoes?: ComunicacaoUpdateManyWithoutClienteNestedInput
    clientesInadimplentes?: ClienteInadimplenteUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutEnderecoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    nomeConjuge?: NullableStringFieldUpdateOperationsInput | string | null
    profissao?: NullableStringFieldUpdateOperationsInput | string | null
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    contatos?: ContatoUncheckedUpdateOneWithoutClienteNestedInput
    documentos?: DocumentoUncheckedUpdateManyWithoutClienteNestedInput
    contratos?: ContratoUncheckedUpdateManyWithoutClienteNestedInput
    boletos?: BoletoUncheckedUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoUncheckedUpdateManyWithoutClienteNestedInput
    comunicacoes?: ComunicacaoUncheckedUpdateManyWithoutClienteNestedInput
    clientesInadimplentes?: ClienteInadimplenteUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteCreateWithoutContatosInput = {
    nome: string
    nomeConjuge?: string | null
    profissao?: string | null
    cpfCnpj: string
    dataNascimento?: Date | string | null
    dataCadastro?: Date | string
    endereco?: EnderecoCreateNestedOneWithoutClienteInput
    documentos?: DocumentoCreateNestedManyWithoutClienteInput
    contratos?: ContratoCreateNestedManyWithoutClienteInput
    boletos?: BoletoCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoCreateNestedManyWithoutClienteInput
    comunicacoes?: ComunicacaoCreateNestedManyWithoutClienteInput
    clientesInadimplentes?: ClienteInadimplenteCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutContatosInput = {
    id?: number
    nome: string
    nomeConjuge?: string | null
    profissao?: string | null
    cpfCnpj: string
    dataNascimento?: Date | string | null
    dataCadastro?: Date | string
    endereco?: EnderecoUncheckedCreateNestedOneWithoutClienteInput
    documentos?: DocumentoUncheckedCreateNestedManyWithoutClienteInput
    contratos?: ContratoUncheckedCreateNestedManyWithoutClienteInput
    boletos?: BoletoUncheckedCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoUncheckedCreateNestedManyWithoutClienteInput
    comunicacoes?: ComunicacaoUncheckedCreateNestedManyWithoutClienteInput
    clientesInadimplentes?: ClienteInadimplenteUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutContatosInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutContatosInput, ClienteUncheckedCreateWithoutContatosInput>
  }

  export type ClienteUpsertWithoutContatosInput = {
    update: XOR<ClienteUpdateWithoutContatosInput, ClienteUncheckedUpdateWithoutContatosInput>
    create: XOR<ClienteCreateWithoutContatosInput, ClienteUncheckedCreateWithoutContatosInput>
  }

  export type ClienteUpdateWithoutContatosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    nomeConjuge?: NullableStringFieldUpdateOperationsInput | string | null
    profissao?: NullableStringFieldUpdateOperationsInput | string | null
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    endereco?: EnderecoUpdateOneWithoutClienteNestedInput
    documentos?: DocumentoUpdateManyWithoutClienteNestedInput
    contratos?: ContratoUpdateManyWithoutClienteNestedInput
    boletos?: BoletoUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoUpdateManyWithoutClienteNestedInput
    comunicacoes?: ComunicacaoUpdateManyWithoutClienteNestedInput
    clientesInadimplentes?: ClienteInadimplenteUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutContatosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    nomeConjuge?: NullableStringFieldUpdateOperationsInput | string | null
    profissao?: NullableStringFieldUpdateOperationsInput | string | null
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    endereco?: EnderecoUncheckedUpdateOneWithoutClienteNestedInput
    documentos?: DocumentoUncheckedUpdateManyWithoutClienteNestedInput
    contratos?: ContratoUncheckedUpdateManyWithoutClienteNestedInput
    boletos?: BoletoUncheckedUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoUncheckedUpdateManyWithoutClienteNestedInput
    comunicacoes?: ComunicacaoUncheckedUpdateManyWithoutClienteNestedInput
    clientesInadimplentes?: ClienteInadimplenteUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteCreateWithoutDocumentosInput = {
    nome: string
    nomeConjuge?: string | null
    profissao?: string | null
    cpfCnpj: string
    dataNascimento?: Date | string | null
    dataCadastro?: Date | string
    endereco?: EnderecoCreateNestedOneWithoutClienteInput
    contatos?: ContatoCreateNestedOneWithoutClienteInput
    contratos?: ContratoCreateNestedManyWithoutClienteInput
    boletos?: BoletoCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoCreateNestedManyWithoutClienteInput
    comunicacoes?: ComunicacaoCreateNestedManyWithoutClienteInput
    clientesInadimplentes?: ClienteInadimplenteCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutDocumentosInput = {
    id?: number
    nome: string
    nomeConjuge?: string | null
    profissao?: string | null
    cpfCnpj: string
    dataNascimento?: Date | string | null
    dataCadastro?: Date | string
    endereco?: EnderecoUncheckedCreateNestedOneWithoutClienteInput
    contatos?: ContatoUncheckedCreateNestedOneWithoutClienteInput
    contratos?: ContratoUncheckedCreateNestedManyWithoutClienteInput
    boletos?: BoletoUncheckedCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoUncheckedCreateNestedManyWithoutClienteInput
    comunicacoes?: ComunicacaoUncheckedCreateNestedManyWithoutClienteInput
    clientesInadimplentes?: ClienteInadimplenteUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutDocumentosInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutDocumentosInput, ClienteUncheckedCreateWithoutDocumentosInput>
  }

  export type ClienteUpsertWithoutDocumentosInput = {
    update: XOR<ClienteUpdateWithoutDocumentosInput, ClienteUncheckedUpdateWithoutDocumentosInput>
    create: XOR<ClienteCreateWithoutDocumentosInput, ClienteUncheckedCreateWithoutDocumentosInput>
  }

  export type ClienteUpdateWithoutDocumentosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    nomeConjuge?: NullableStringFieldUpdateOperationsInput | string | null
    profissao?: NullableStringFieldUpdateOperationsInput | string | null
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    endereco?: EnderecoUpdateOneWithoutClienteNestedInput
    contatos?: ContatoUpdateOneWithoutClienteNestedInput
    contratos?: ContratoUpdateManyWithoutClienteNestedInput
    boletos?: BoletoUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoUpdateManyWithoutClienteNestedInput
    comunicacoes?: ComunicacaoUpdateManyWithoutClienteNestedInput
    clientesInadimplentes?: ClienteInadimplenteUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutDocumentosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    nomeConjuge?: NullableStringFieldUpdateOperationsInput | string | null
    profissao?: NullableStringFieldUpdateOperationsInput | string | null
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    endereco?: EnderecoUncheckedUpdateOneWithoutClienteNestedInput
    contatos?: ContatoUncheckedUpdateOneWithoutClienteNestedInput
    contratos?: ContratoUncheckedUpdateManyWithoutClienteNestedInput
    boletos?: BoletoUncheckedUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoUncheckedUpdateManyWithoutClienteNestedInput
    comunicacoes?: ComunicacaoUncheckedUpdateManyWithoutClienteNestedInput
    clientesInadimplentes?: ClienteInadimplenteUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ContratoCreateWithoutLoteInput = {
    chave?: string | null
    numeroContrato?: string | null
    dataEmissao?: Date | string | null
    dataPrimeiraPrestacao?: Date | string | null
    valorPrestacao?: Decimal | DecimalJsLike | number | string | null
    dataInicio: Date | string
    dataFim: Date | string
    valorTotal: Decimal | DecimalJsLike | number | string
    valorEntrada: Decimal | DecimalJsLike | number | string
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status?: string
    dataCriacao?: Date | string
    parcelasPagas?: number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    cliente: ClienteCreateNestedOneWithoutContratosInput
    boletos?: BoletoCreateNestedManyWithoutContratoInput
    reajustes?: ReajusteCreateNestedManyWithoutContratoInput
    aditivos?: AditivoCreateNestedManyWithoutContratoInput
    distratos?: DistratoCreateNestedManyWithoutContratoInput
    quitacoes?: QuitacaoCreateNestedManyWithoutContratoInput
    parcelas?: ParcelaCreateNestedManyWithoutContratoInput
  }

  export type ContratoUncheckedCreateWithoutLoteInput = {
    id?: number
    clienteId: number
    chave?: string | null
    numeroContrato?: string | null
    dataEmissao?: Date | string | null
    dataPrimeiraPrestacao?: Date | string | null
    valorPrestacao?: Decimal | DecimalJsLike | number | string | null
    dataInicio: Date | string
    dataFim: Date | string
    valorTotal: Decimal | DecimalJsLike | number | string
    valorEntrada: Decimal | DecimalJsLike | number | string
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status?: string
    dataCriacao?: Date | string
    parcelasPagas?: number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    boletos?: BoletoUncheckedCreateNestedManyWithoutContratoInput
    reajustes?: ReajusteUncheckedCreateNestedManyWithoutContratoInput
    aditivos?: AditivoUncheckedCreateNestedManyWithoutContratoInput
    distratos?: DistratoUncheckedCreateNestedManyWithoutContratoInput
    quitacoes?: QuitacaoUncheckedCreateNestedManyWithoutContratoInput
    parcelas?: ParcelaUncheckedCreateNestedManyWithoutContratoInput
  }

  export type ContratoCreateOrConnectWithoutLoteInput = {
    where: ContratoWhereUniqueInput
    create: XOR<ContratoCreateWithoutLoteInput, ContratoUncheckedCreateWithoutLoteInput>
  }

  export type ContratoCreateManyLoteInputEnvelope = {
    data: Enumerable<ContratoCreateManyLoteInput>
    skipDuplicates?: boolean
  }

  export type ContratoUpsertWithWhereUniqueWithoutLoteInput = {
    where: ContratoWhereUniqueInput
    update: XOR<ContratoUpdateWithoutLoteInput, ContratoUncheckedUpdateWithoutLoteInput>
    create: XOR<ContratoCreateWithoutLoteInput, ContratoUncheckedCreateWithoutLoteInput>
  }

  export type ContratoUpdateWithWhereUniqueWithoutLoteInput = {
    where: ContratoWhereUniqueInput
    data: XOR<ContratoUpdateWithoutLoteInput, ContratoUncheckedUpdateWithoutLoteInput>
  }

  export type ContratoUpdateManyWithWhereWithoutLoteInput = {
    where: ContratoScalarWhereInput
    data: XOR<ContratoUpdateManyMutationInput, ContratoUncheckedUpdateManyWithoutContratosInput>
  }

  export type ClienteCreateWithoutContratosInput = {
    nome: string
    nomeConjuge?: string | null
    profissao?: string | null
    cpfCnpj: string
    dataNascimento?: Date | string | null
    dataCadastro?: Date | string
    endereco?: EnderecoCreateNestedOneWithoutClienteInput
    contatos?: ContatoCreateNestedOneWithoutClienteInput
    documentos?: DocumentoCreateNestedManyWithoutClienteInput
    boletos?: BoletoCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoCreateNestedManyWithoutClienteInput
    comunicacoes?: ComunicacaoCreateNestedManyWithoutClienteInput
    clientesInadimplentes?: ClienteInadimplenteCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutContratosInput = {
    id?: number
    nome: string
    nomeConjuge?: string | null
    profissao?: string | null
    cpfCnpj: string
    dataNascimento?: Date | string | null
    dataCadastro?: Date | string
    endereco?: EnderecoUncheckedCreateNestedOneWithoutClienteInput
    contatos?: ContatoUncheckedCreateNestedOneWithoutClienteInput
    documentos?: DocumentoUncheckedCreateNestedManyWithoutClienteInput
    boletos?: BoletoUncheckedCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoUncheckedCreateNestedManyWithoutClienteInput
    comunicacoes?: ComunicacaoUncheckedCreateNestedManyWithoutClienteInput
    clientesInadimplentes?: ClienteInadimplenteUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutContratosInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutContratosInput, ClienteUncheckedCreateWithoutContratosInput>
  }

  export type LoteCreateWithoutContratosInput = {
    numero: string
    quadra: string
    loteamento: string
    area: number
    valorBase: Decimal | DecimalJsLike | number | string
    status?: string
    chave?: string | null
  }

  export type LoteUncheckedCreateWithoutContratosInput = {
    id?: number
    numero: string
    quadra: string
    loteamento: string
    area: number
    valorBase: Decimal | DecimalJsLike | number | string
    status?: string
    chave?: string | null
  }

  export type LoteCreateOrConnectWithoutContratosInput = {
    where: LoteWhereUniqueInput
    create: XOR<LoteCreateWithoutContratosInput, LoteUncheckedCreateWithoutContratosInput>
  }

  export type BoletoCreateWithoutContratoInput = {
    clienteNome: string
    valor: Decimal | DecimalJsLike | number | string
    dataVencimento: Date | string
    numeroParcela: number
    descricao: string
    nossoNumero: string
    linhaDigitavel: string
    codigoBarras: string
    pdfUrl: string
    dataGeracao?: Date | string
    status?: string
    dataPagamento?: Date | string | null
    valorPago?: Decimal | DecimalJsLike | number | string | null
    formaPagamento?: string | null
    dataCancelamento?: Date | string | null
    comprovante?: string | null
    parcelaId?: number | null
    cliente: ClienteCreateNestedOneWithoutBoletosInput
    parcela?: ParcelaCreateNestedOneWithoutBoletoInput
  }

  export type BoletoUncheckedCreateWithoutContratoInput = {
    id?: number
    clienteId: number
    clienteNome: string
    valor: Decimal | DecimalJsLike | number | string
    dataVencimento: Date | string
    numeroParcela: number
    descricao: string
    nossoNumero: string
    linhaDigitavel: string
    codigoBarras: string
    pdfUrl: string
    dataGeracao?: Date | string
    status?: string
    dataPagamento?: Date | string | null
    valorPago?: Decimal | DecimalJsLike | number | string | null
    formaPagamento?: string | null
    dataCancelamento?: Date | string | null
    comprovante?: string | null
    parcelaId?: number | null
    parcela?: ParcelaUncheckedCreateNestedOneWithoutBoletoInput
  }

  export type BoletoCreateOrConnectWithoutContratoInput = {
    where: BoletoWhereUniqueInput
    create: XOR<BoletoCreateWithoutContratoInput, BoletoUncheckedCreateWithoutContratoInput>
  }

  export type BoletoCreateManyContratoInputEnvelope = {
    data: Enumerable<BoletoCreateManyContratoInput>
    skipDuplicates?: boolean
  }

  export type ReajusteCreateWithoutContratoInput = {
    parcelaReferencia: number
    valorOriginal: Decimal | DecimalJsLike | number | string
    valorReajustado: Decimal | DecimalJsLike | number | string
    indiceAplicado: Decimal | DecimalJsLike | number | string
    indiceBase: string
    percentualAdicional: Decimal | DecimalJsLike | number | string
    reajusteTotal: Decimal | DecimalJsLike | number | string
    dataReferencia: Date | string
    dataAplicacao?: Date | string | null
    status?: string
    aplicado?: boolean
  }

  export type ReajusteUncheckedCreateWithoutContratoInput = {
    id?: number
    parcelaReferencia: number
    valorOriginal: Decimal | DecimalJsLike | number | string
    valorReajustado: Decimal | DecimalJsLike | number | string
    indiceAplicado: Decimal | DecimalJsLike | number | string
    indiceBase: string
    percentualAdicional: Decimal | DecimalJsLike | number | string
    reajusteTotal: Decimal | DecimalJsLike | number | string
    dataReferencia: Date | string
    dataAplicacao?: Date | string | null
    status?: string
    aplicado?: boolean
  }

  export type ReajusteCreateOrConnectWithoutContratoInput = {
    where: ReajusteWhereUniqueInput
    create: XOR<ReajusteCreateWithoutContratoInput, ReajusteUncheckedCreateWithoutContratoInput>
  }

  export type ReajusteCreateManyContratoInputEnvelope = {
    data: Enumerable<ReajusteCreateManyContratoInput>
    skipDuplicates?: boolean
  }

  export type AditivoCreateWithoutContratoInput = {
    tipo: string
    dataAssinatura: Date | string
    motivoAditivo: string
    novoValor?: Decimal | DecimalJsLike | number | string | null
    novaDataFim?: Date | string | null
    documentoUrl?: string | null
    status?: string
  }

  export type AditivoUncheckedCreateWithoutContratoInput = {
    id?: number
    tipo: string
    dataAssinatura: Date | string
    motivoAditivo: string
    novoValor?: Decimal | DecimalJsLike | number | string | null
    novaDataFim?: Date | string | null
    documentoUrl?: string | null
    status?: string
  }

  export type AditivoCreateOrConnectWithoutContratoInput = {
    where: AditivoWhereUniqueInput
    create: XOR<AditivoCreateWithoutContratoInput, AditivoUncheckedCreateWithoutContratoInput>
  }

  export type AditivoCreateManyContratoInputEnvelope = {
    data: Enumerable<AditivoCreateManyContratoInput>
    skipDuplicates?: boolean
  }

  export type DistratoCreateWithoutContratoInput = {
    dataDistrato: Date | string
    motivoDistrato: string
    valorDevolucao?: Decimal | DecimalJsLike | number | string | null
    documentoUrl?: string | null
  }

  export type DistratoUncheckedCreateWithoutContratoInput = {
    id?: number
    dataDistrato: Date | string
    motivoDistrato: string
    valorDevolucao?: Decimal | DecimalJsLike | number | string | null
    documentoUrl?: string | null
  }

  export type DistratoCreateOrConnectWithoutContratoInput = {
    where: DistratoWhereUniqueInput
    create: XOR<DistratoCreateWithoutContratoInput, DistratoUncheckedCreateWithoutContratoInput>
  }

  export type DistratoCreateManyContratoInputEnvelope = {
    data: Enumerable<DistratoCreateManyContratoInput>
    skipDuplicates?: boolean
  }

  export type QuitacaoCreateWithoutContratoInput = {
    dataQuitacao: Date | string
    valorQuitacao: Decimal | DecimalJsLike | number | string
    documentoUrl?: string | null
  }

  export type QuitacaoUncheckedCreateWithoutContratoInput = {
    id?: number
    dataQuitacao: Date | string
    valorQuitacao: Decimal | DecimalJsLike | number | string
    documentoUrl?: string | null
  }

  export type QuitacaoCreateOrConnectWithoutContratoInput = {
    where: QuitacaoWhereUniqueInput
    create: XOR<QuitacaoCreateWithoutContratoInput, QuitacaoUncheckedCreateWithoutContratoInput>
  }

  export type QuitacaoCreateManyContratoInputEnvelope = {
    data: Enumerable<QuitacaoCreateManyContratoInput>
    skipDuplicates?: boolean
  }

  export type ParcelaCreateWithoutContratoInput = {
    numero: number
    valor: Decimal | DecimalJsLike | number | string
    dataVencimento: Date | string
    status?: string
    dataPagamento?: Date | string | null
    valorPago?: Decimal | DecimalJsLike | number | string | null
    formaPagamento?: string | null
    observacoes?: string | null
    dataCriacao?: Date | string
    boleto?: BoletoCreateNestedOneWithoutParcelaInput
  }

  export type ParcelaUncheckedCreateWithoutContratoInput = {
    id?: number
    numero: number
    valor: Decimal | DecimalJsLike | number | string
    dataVencimento: Date | string
    status?: string
    dataPagamento?: Date | string | null
    valorPago?: Decimal | DecimalJsLike | number | string | null
    formaPagamento?: string | null
    observacoes?: string | null
    dataCriacao?: Date | string
    boletoId?: number | null
  }

  export type ParcelaCreateOrConnectWithoutContratoInput = {
    where: ParcelaWhereUniqueInput
    create: XOR<ParcelaCreateWithoutContratoInput, ParcelaUncheckedCreateWithoutContratoInput>
  }

  export type ParcelaCreateManyContratoInputEnvelope = {
    data: Enumerable<ParcelaCreateManyContratoInput>
    skipDuplicates?: boolean
  }

  export type ClienteUpsertWithoutContratosInput = {
    update: XOR<ClienteUpdateWithoutContratosInput, ClienteUncheckedUpdateWithoutContratosInput>
    create: XOR<ClienteCreateWithoutContratosInput, ClienteUncheckedCreateWithoutContratosInput>
  }

  export type ClienteUpdateWithoutContratosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    nomeConjuge?: NullableStringFieldUpdateOperationsInput | string | null
    profissao?: NullableStringFieldUpdateOperationsInput | string | null
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    endereco?: EnderecoUpdateOneWithoutClienteNestedInput
    contatos?: ContatoUpdateOneWithoutClienteNestedInput
    documentos?: DocumentoUpdateManyWithoutClienteNestedInput
    boletos?: BoletoUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoUpdateManyWithoutClienteNestedInput
    comunicacoes?: ComunicacaoUpdateManyWithoutClienteNestedInput
    clientesInadimplentes?: ClienteInadimplenteUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutContratosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    nomeConjuge?: NullableStringFieldUpdateOperationsInput | string | null
    profissao?: NullableStringFieldUpdateOperationsInput | string | null
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    endereco?: EnderecoUncheckedUpdateOneWithoutClienteNestedInput
    contatos?: ContatoUncheckedUpdateOneWithoutClienteNestedInput
    documentos?: DocumentoUncheckedUpdateManyWithoutClienteNestedInput
    boletos?: BoletoUncheckedUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoUncheckedUpdateManyWithoutClienteNestedInput
    comunicacoes?: ComunicacaoUncheckedUpdateManyWithoutClienteNestedInput
    clientesInadimplentes?: ClienteInadimplenteUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type LoteUpsertWithoutContratosInput = {
    update: XOR<LoteUpdateWithoutContratosInput, LoteUncheckedUpdateWithoutContratosInput>
    create: XOR<LoteCreateWithoutContratosInput, LoteUncheckedCreateWithoutContratosInput>
  }

  export type LoteUpdateWithoutContratosInput = {
    numero?: StringFieldUpdateOperationsInput | string
    quadra?: StringFieldUpdateOperationsInput | string
    loteamento?: StringFieldUpdateOperationsInput | string
    area?: FloatFieldUpdateOperationsInput | number
    valorBase?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    chave?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LoteUncheckedUpdateWithoutContratosInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    quadra?: StringFieldUpdateOperationsInput | string
    loteamento?: StringFieldUpdateOperationsInput | string
    area?: FloatFieldUpdateOperationsInput | number
    valorBase?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    chave?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BoletoUpsertWithWhereUniqueWithoutContratoInput = {
    where: BoletoWhereUniqueInput
    update: XOR<BoletoUpdateWithoutContratoInput, BoletoUncheckedUpdateWithoutContratoInput>
    create: XOR<BoletoCreateWithoutContratoInput, BoletoUncheckedCreateWithoutContratoInput>
  }

  export type BoletoUpdateWithWhereUniqueWithoutContratoInput = {
    where: BoletoWhereUniqueInput
    data: XOR<BoletoUpdateWithoutContratoInput, BoletoUncheckedUpdateWithoutContratoInput>
  }

  export type BoletoUpdateManyWithWhereWithoutContratoInput = {
    where: BoletoScalarWhereInput
    data: XOR<BoletoUpdateManyMutationInput, BoletoUncheckedUpdateManyWithoutBoletosInput>
  }

  export type ReajusteUpsertWithWhereUniqueWithoutContratoInput = {
    where: ReajusteWhereUniqueInput
    update: XOR<ReajusteUpdateWithoutContratoInput, ReajusteUncheckedUpdateWithoutContratoInput>
    create: XOR<ReajusteCreateWithoutContratoInput, ReajusteUncheckedCreateWithoutContratoInput>
  }

  export type ReajusteUpdateWithWhereUniqueWithoutContratoInput = {
    where: ReajusteWhereUniqueInput
    data: XOR<ReajusteUpdateWithoutContratoInput, ReajusteUncheckedUpdateWithoutContratoInput>
  }

  export type ReajusteUpdateManyWithWhereWithoutContratoInput = {
    where: ReajusteScalarWhereInput
    data: XOR<ReajusteUpdateManyMutationInput, ReajusteUncheckedUpdateManyWithoutReajustesInput>
  }

  export type ReajusteScalarWhereInput = {
    AND?: Enumerable<ReajusteScalarWhereInput>
    OR?: Enumerable<ReajusteScalarWhereInput>
    NOT?: Enumerable<ReajusteScalarWhereInput>
    id?: IntFilter | number
    contratoId?: IntFilter | number
    parcelaReferencia?: IntFilter | number
    valorOriginal?: DecimalFilter | Decimal | DecimalJsLike | number | string
    valorReajustado?: DecimalFilter | Decimal | DecimalJsLike | number | string
    indiceAplicado?: DecimalFilter | Decimal | DecimalJsLike | number | string
    indiceBase?: StringFilter | string
    percentualAdicional?: DecimalFilter | Decimal | DecimalJsLike | number | string
    reajusteTotal?: DecimalFilter | Decimal | DecimalJsLike | number | string
    dataReferencia?: DateTimeFilter | Date | string
    dataAplicacao?: DateTimeNullableFilter | Date | string | null
    status?: StringFilter | string
    aplicado?: BoolFilter | boolean
  }

  export type AditivoUpsertWithWhereUniqueWithoutContratoInput = {
    where: AditivoWhereUniqueInput
    update: XOR<AditivoUpdateWithoutContratoInput, AditivoUncheckedUpdateWithoutContratoInput>
    create: XOR<AditivoCreateWithoutContratoInput, AditivoUncheckedCreateWithoutContratoInput>
  }

  export type AditivoUpdateWithWhereUniqueWithoutContratoInput = {
    where: AditivoWhereUniqueInput
    data: XOR<AditivoUpdateWithoutContratoInput, AditivoUncheckedUpdateWithoutContratoInput>
  }

  export type AditivoUpdateManyWithWhereWithoutContratoInput = {
    where: AditivoScalarWhereInput
    data: XOR<AditivoUpdateManyMutationInput, AditivoUncheckedUpdateManyWithoutAditivosInput>
  }

  export type AditivoScalarWhereInput = {
    AND?: Enumerable<AditivoScalarWhereInput>
    OR?: Enumerable<AditivoScalarWhereInput>
    NOT?: Enumerable<AditivoScalarWhereInput>
    id?: IntFilter | number
    contratoId?: IntFilter | number
    tipo?: StringFilter | string
    dataAssinatura?: DateTimeFilter | Date | string
    motivoAditivo?: StringFilter | string
    novoValor?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    novaDataFim?: DateTimeNullableFilter | Date | string | null
    documentoUrl?: StringNullableFilter | string | null
    status?: StringFilter | string
  }

  export type DistratoUpsertWithWhereUniqueWithoutContratoInput = {
    where: DistratoWhereUniqueInput
    update: XOR<DistratoUpdateWithoutContratoInput, DistratoUncheckedUpdateWithoutContratoInput>
    create: XOR<DistratoCreateWithoutContratoInput, DistratoUncheckedCreateWithoutContratoInput>
  }

  export type DistratoUpdateWithWhereUniqueWithoutContratoInput = {
    where: DistratoWhereUniqueInput
    data: XOR<DistratoUpdateWithoutContratoInput, DistratoUncheckedUpdateWithoutContratoInput>
  }

  export type DistratoUpdateManyWithWhereWithoutContratoInput = {
    where: DistratoScalarWhereInput
    data: XOR<DistratoUpdateManyMutationInput, DistratoUncheckedUpdateManyWithoutDistratosInput>
  }

  export type DistratoScalarWhereInput = {
    AND?: Enumerable<DistratoScalarWhereInput>
    OR?: Enumerable<DistratoScalarWhereInput>
    NOT?: Enumerable<DistratoScalarWhereInput>
    id?: IntFilter | number
    contratoId?: IntFilter | number
    dataDistrato?: DateTimeFilter | Date | string
    motivoDistrato?: StringFilter | string
    valorDevolucao?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    documentoUrl?: StringNullableFilter | string | null
  }

  export type QuitacaoUpsertWithWhereUniqueWithoutContratoInput = {
    where: QuitacaoWhereUniqueInput
    update: XOR<QuitacaoUpdateWithoutContratoInput, QuitacaoUncheckedUpdateWithoutContratoInput>
    create: XOR<QuitacaoCreateWithoutContratoInput, QuitacaoUncheckedCreateWithoutContratoInput>
  }

  export type QuitacaoUpdateWithWhereUniqueWithoutContratoInput = {
    where: QuitacaoWhereUniqueInput
    data: XOR<QuitacaoUpdateWithoutContratoInput, QuitacaoUncheckedUpdateWithoutContratoInput>
  }

  export type QuitacaoUpdateManyWithWhereWithoutContratoInput = {
    where: QuitacaoScalarWhereInput
    data: XOR<QuitacaoUpdateManyMutationInput, QuitacaoUncheckedUpdateManyWithoutQuitacoesInput>
  }

  export type QuitacaoScalarWhereInput = {
    AND?: Enumerable<QuitacaoScalarWhereInput>
    OR?: Enumerable<QuitacaoScalarWhereInput>
    NOT?: Enumerable<QuitacaoScalarWhereInput>
    id?: IntFilter | number
    contratoId?: IntFilter | number
    dataQuitacao?: DateTimeFilter | Date | string
    valorQuitacao?: DecimalFilter | Decimal | DecimalJsLike | number | string
    documentoUrl?: StringNullableFilter | string | null
  }

  export type ParcelaUpsertWithWhereUniqueWithoutContratoInput = {
    where: ParcelaWhereUniqueInput
    update: XOR<ParcelaUpdateWithoutContratoInput, ParcelaUncheckedUpdateWithoutContratoInput>
    create: XOR<ParcelaCreateWithoutContratoInput, ParcelaUncheckedCreateWithoutContratoInput>
  }

  export type ParcelaUpdateWithWhereUniqueWithoutContratoInput = {
    where: ParcelaWhereUniqueInput
    data: XOR<ParcelaUpdateWithoutContratoInput, ParcelaUncheckedUpdateWithoutContratoInput>
  }

  export type ParcelaUpdateManyWithWhereWithoutContratoInput = {
    where: ParcelaScalarWhereInput
    data: XOR<ParcelaUpdateManyMutationInput, ParcelaUncheckedUpdateManyWithoutParcelasInput>
  }

  export type ParcelaScalarWhereInput = {
    AND?: Enumerable<ParcelaScalarWhereInput>
    OR?: Enumerable<ParcelaScalarWhereInput>
    NOT?: Enumerable<ParcelaScalarWhereInput>
    id?: IntFilter | number
    contratoId?: IntFilter | number
    numero?: IntFilter | number
    valor?: DecimalFilter | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFilter | Date | string
    status?: StringFilter | string
    dataPagamento?: DateTimeNullableFilter | Date | string | null
    valorPago?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: StringNullableFilter | string | null
    observacoes?: StringNullableFilter | string | null
    dataCriacao?: DateTimeFilter | Date | string
    boletoId?: IntNullableFilter | number | null
  }

  export type ClienteCreateWithoutBoletosInput = {
    nome: string
    nomeConjuge?: string | null
    profissao?: string | null
    cpfCnpj: string
    dataNascimento?: Date | string | null
    dataCadastro?: Date | string
    endereco?: EnderecoCreateNestedOneWithoutClienteInput
    contatos?: ContatoCreateNestedOneWithoutClienteInput
    documentos?: DocumentoCreateNestedManyWithoutClienteInput
    contratos?: ContratoCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoCreateNestedManyWithoutClienteInput
    comunicacoes?: ComunicacaoCreateNestedManyWithoutClienteInput
    clientesInadimplentes?: ClienteInadimplenteCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutBoletosInput = {
    id?: number
    nome: string
    nomeConjuge?: string | null
    profissao?: string | null
    cpfCnpj: string
    dataNascimento?: Date | string | null
    dataCadastro?: Date | string
    endereco?: EnderecoUncheckedCreateNestedOneWithoutClienteInput
    contatos?: ContatoUncheckedCreateNestedOneWithoutClienteInput
    documentos?: DocumentoUncheckedCreateNestedManyWithoutClienteInput
    contratos?: ContratoUncheckedCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoUncheckedCreateNestedManyWithoutClienteInput
    comunicacoes?: ComunicacaoUncheckedCreateNestedManyWithoutClienteInput
    clientesInadimplentes?: ClienteInadimplenteUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutBoletosInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutBoletosInput, ClienteUncheckedCreateWithoutBoletosInput>
  }

  export type ContratoCreateWithoutBoletosInput = {
    chave?: string | null
    numeroContrato?: string | null
    dataEmissao?: Date | string | null
    dataPrimeiraPrestacao?: Date | string | null
    valorPrestacao?: Decimal | DecimalJsLike | number | string | null
    dataInicio: Date | string
    dataFim: Date | string
    valorTotal: Decimal | DecimalJsLike | number | string
    valorEntrada: Decimal | DecimalJsLike | number | string
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status?: string
    dataCriacao?: Date | string
    parcelasPagas?: number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    cliente: ClienteCreateNestedOneWithoutContratosInput
    lote: LoteCreateNestedOneWithoutContratosInput
    reajustes?: ReajusteCreateNestedManyWithoutContratoInput
    aditivos?: AditivoCreateNestedManyWithoutContratoInput
    distratos?: DistratoCreateNestedManyWithoutContratoInput
    quitacoes?: QuitacaoCreateNestedManyWithoutContratoInput
    parcelas?: ParcelaCreateNestedManyWithoutContratoInput
  }

  export type ContratoUncheckedCreateWithoutBoletosInput = {
    id?: number
    clienteId: number
    loteId: number
    chave?: string | null
    numeroContrato?: string | null
    dataEmissao?: Date | string | null
    dataPrimeiraPrestacao?: Date | string | null
    valorPrestacao?: Decimal | DecimalJsLike | number | string | null
    dataInicio: Date | string
    dataFim: Date | string
    valorTotal: Decimal | DecimalJsLike | number | string
    valorEntrada: Decimal | DecimalJsLike | number | string
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status?: string
    dataCriacao?: Date | string
    parcelasPagas?: number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    reajustes?: ReajusteUncheckedCreateNestedManyWithoutContratoInput
    aditivos?: AditivoUncheckedCreateNestedManyWithoutContratoInput
    distratos?: DistratoUncheckedCreateNestedManyWithoutContratoInput
    quitacoes?: QuitacaoUncheckedCreateNestedManyWithoutContratoInput
    parcelas?: ParcelaUncheckedCreateNestedManyWithoutContratoInput
  }

  export type ContratoCreateOrConnectWithoutBoletosInput = {
    where: ContratoWhereUniqueInput
    create: XOR<ContratoCreateWithoutBoletosInput, ContratoUncheckedCreateWithoutBoletosInput>
  }

  export type ParcelaCreateWithoutBoletoInput = {
    numero: number
    valor: Decimal | DecimalJsLike | number | string
    dataVencimento: Date | string
    status?: string
    dataPagamento?: Date | string | null
    valorPago?: Decimal | DecimalJsLike | number | string | null
    formaPagamento?: string | null
    observacoes?: string | null
    dataCriacao?: Date | string
    contrato: ContratoCreateNestedOneWithoutParcelasInput
  }

  export type ParcelaUncheckedCreateWithoutBoletoInput = {
    id?: number
    contratoId: number
    numero: number
    valor: Decimal | DecimalJsLike | number | string
    dataVencimento: Date | string
    status?: string
    dataPagamento?: Date | string | null
    valorPago?: Decimal | DecimalJsLike | number | string | null
    formaPagamento?: string | null
    observacoes?: string | null
    dataCriacao?: Date | string
  }

  export type ParcelaCreateOrConnectWithoutBoletoInput = {
    where: ParcelaWhereUniqueInput
    create: XOR<ParcelaCreateWithoutBoletoInput, ParcelaUncheckedCreateWithoutBoletoInput>
  }

  export type ClienteUpsertWithoutBoletosInput = {
    update: XOR<ClienteUpdateWithoutBoletosInput, ClienteUncheckedUpdateWithoutBoletosInput>
    create: XOR<ClienteCreateWithoutBoletosInput, ClienteUncheckedCreateWithoutBoletosInput>
  }

  export type ClienteUpdateWithoutBoletosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    nomeConjuge?: NullableStringFieldUpdateOperationsInput | string | null
    profissao?: NullableStringFieldUpdateOperationsInput | string | null
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    endereco?: EnderecoUpdateOneWithoutClienteNestedInput
    contatos?: ContatoUpdateOneWithoutClienteNestedInput
    documentos?: DocumentoUpdateManyWithoutClienteNestedInput
    contratos?: ContratoUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoUpdateManyWithoutClienteNestedInput
    comunicacoes?: ComunicacaoUpdateManyWithoutClienteNestedInput
    clientesInadimplentes?: ClienteInadimplenteUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutBoletosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    nomeConjuge?: NullableStringFieldUpdateOperationsInput | string | null
    profissao?: NullableStringFieldUpdateOperationsInput | string | null
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    endereco?: EnderecoUncheckedUpdateOneWithoutClienteNestedInput
    contatos?: ContatoUncheckedUpdateOneWithoutClienteNestedInput
    documentos?: DocumentoUncheckedUpdateManyWithoutClienteNestedInput
    contratos?: ContratoUncheckedUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoUncheckedUpdateManyWithoutClienteNestedInput
    comunicacoes?: ComunicacaoUncheckedUpdateManyWithoutClienteNestedInput
    clientesInadimplentes?: ClienteInadimplenteUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ContratoUpsertWithoutBoletosInput = {
    update: XOR<ContratoUpdateWithoutBoletosInput, ContratoUncheckedUpdateWithoutBoletosInput>
    create: XOR<ContratoCreateWithoutBoletosInput, ContratoUncheckedCreateWithoutBoletosInput>
  }

  export type ContratoUpdateWithoutBoletosInput = {
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    numeroContrato?: NullableStringFieldUpdateOperationsInput | string | null
    dataEmissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataPrimeiraPrestacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPrestacao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFieldUpdateOperationsInput | number
    dataVencimento?: IntFieldUpdateOperationsInput | number
    clausulas?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasPagas?: IntFieldUpdateOperationsInput | number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    cliente?: ClienteUpdateOneRequiredWithoutContratosNestedInput
    lote?: LoteUpdateOneRequiredWithoutContratosNestedInput
    reajustes?: ReajusteUpdateManyWithoutContratoNestedInput
    aditivos?: AditivoUpdateManyWithoutContratoNestedInput
    distratos?: DistratoUpdateManyWithoutContratoNestedInput
    quitacoes?: QuitacaoUpdateManyWithoutContratoNestedInput
    parcelas?: ParcelaUpdateManyWithoutContratoNestedInput
  }

  export type ContratoUncheckedUpdateWithoutBoletosInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    loteId?: IntFieldUpdateOperationsInput | number
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    numeroContrato?: NullableStringFieldUpdateOperationsInput | string | null
    dataEmissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataPrimeiraPrestacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPrestacao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFieldUpdateOperationsInput | number
    dataVencimento?: IntFieldUpdateOperationsInput | number
    clausulas?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasPagas?: IntFieldUpdateOperationsInput | number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    reajustes?: ReajusteUncheckedUpdateManyWithoutContratoNestedInput
    aditivos?: AditivoUncheckedUpdateManyWithoutContratoNestedInput
    distratos?: DistratoUncheckedUpdateManyWithoutContratoNestedInput
    quitacoes?: QuitacaoUncheckedUpdateManyWithoutContratoNestedInput
    parcelas?: ParcelaUncheckedUpdateManyWithoutContratoNestedInput
  }

  export type ParcelaUpsertWithoutBoletoInput = {
    update: XOR<ParcelaUpdateWithoutBoletoInput, ParcelaUncheckedUpdateWithoutBoletoInput>
    create: XOR<ParcelaCreateWithoutBoletoInput, ParcelaUncheckedCreateWithoutBoletoInput>
  }

  export type ParcelaUpdateWithoutBoletoInput = {
    numero?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPago?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    contrato?: ContratoUpdateOneRequiredWithoutParcelasNestedInput
  }

  export type ParcelaUncheckedUpdateWithoutBoletoInput = {
    id?: IntFieldUpdateOperationsInput | number
    contratoId?: IntFieldUpdateOperationsInput | number
    numero?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPago?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContratoCreateWithoutReajustesInput = {
    chave?: string | null
    numeroContrato?: string | null
    dataEmissao?: Date | string | null
    dataPrimeiraPrestacao?: Date | string | null
    valorPrestacao?: Decimal | DecimalJsLike | number | string | null
    dataInicio: Date | string
    dataFim: Date | string
    valorTotal: Decimal | DecimalJsLike | number | string
    valorEntrada: Decimal | DecimalJsLike | number | string
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status?: string
    dataCriacao?: Date | string
    parcelasPagas?: number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    cliente: ClienteCreateNestedOneWithoutContratosInput
    lote: LoteCreateNestedOneWithoutContratosInput
    boletos?: BoletoCreateNestedManyWithoutContratoInput
    aditivos?: AditivoCreateNestedManyWithoutContratoInput
    distratos?: DistratoCreateNestedManyWithoutContratoInput
    quitacoes?: QuitacaoCreateNestedManyWithoutContratoInput
    parcelas?: ParcelaCreateNestedManyWithoutContratoInput
  }

  export type ContratoUncheckedCreateWithoutReajustesInput = {
    id?: number
    clienteId: number
    loteId: number
    chave?: string | null
    numeroContrato?: string | null
    dataEmissao?: Date | string | null
    dataPrimeiraPrestacao?: Date | string | null
    valorPrestacao?: Decimal | DecimalJsLike | number | string | null
    dataInicio: Date | string
    dataFim: Date | string
    valorTotal: Decimal | DecimalJsLike | number | string
    valorEntrada: Decimal | DecimalJsLike | number | string
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status?: string
    dataCriacao?: Date | string
    parcelasPagas?: number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    boletos?: BoletoUncheckedCreateNestedManyWithoutContratoInput
    aditivos?: AditivoUncheckedCreateNestedManyWithoutContratoInput
    distratos?: DistratoUncheckedCreateNestedManyWithoutContratoInput
    quitacoes?: QuitacaoUncheckedCreateNestedManyWithoutContratoInput
    parcelas?: ParcelaUncheckedCreateNestedManyWithoutContratoInput
  }

  export type ContratoCreateOrConnectWithoutReajustesInput = {
    where: ContratoWhereUniqueInput
    create: XOR<ContratoCreateWithoutReajustesInput, ContratoUncheckedCreateWithoutReajustesInput>
  }

  export type ContratoUpsertWithoutReajustesInput = {
    update: XOR<ContratoUpdateWithoutReajustesInput, ContratoUncheckedUpdateWithoutReajustesInput>
    create: XOR<ContratoCreateWithoutReajustesInput, ContratoUncheckedCreateWithoutReajustesInput>
  }

  export type ContratoUpdateWithoutReajustesInput = {
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    numeroContrato?: NullableStringFieldUpdateOperationsInput | string | null
    dataEmissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataPrimeiraPrestacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPrestacao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFieldUpdateOperationsInput | number
    dataVencimento?: IntFieldUpdateOperationsInput | number
    clausulas?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasPagas?: IntFieldUpdateOperationsInput | number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    cliente?: ClienteUpdateOneRequiredWithoutContratosNestedInput
    lote?: LoteUpdateOneRequiredWithoutContratosNestedInput
    boletos?: BoletoUpdateManyWithoutContratoNestedInput
    aditivos?: AditivoUpdateManyWithoutContratoNestedInput
    distratos?: DistratoUpdateManyWithoutContratoNestedInput
    quitacoes?: QuitacaoUpdateManyWithoutContratoNestedInput
    parcelas?: ParcelaUpdateManyWithoutContratoNestedInput
  }

  export type ContratoUncheckedUpdateWithoutReajustesInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    loteId?: IntFieldUpdateOperationsInput | number
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    numeroContrato?: NullableStringFieldUpdateOperationsInput | string | null
    dataEmissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataPrimeiraPrestacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPrestacao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFieldUpdateOperationsInput | number
    dataVencimento?: IntFieldUpdateOperationsInput | number
    clausulas?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasPagas?: IntFieldUpdateOperationsInput | number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    boletos?: BoletoUncheckedUpdateManyWithoutContratoNestedInput
    aditivos?: AditivoUncheckedUpdateManyWithoutContratoNestedInput
    distratos?: DistratoUncheckedUpdateManyWithoutContratoNestedInput
    quitacoes?: QuitacaoUncheckedUpdateManyWithoutContratoNestedInput
    parcelas?: ParcelaUncheckedUpdateManyWithoutContratoNestedInput
  }

  export type ClienteCreateWithoutClientesInadimplentesInput = {
    nome: string
    nomeConjuge?: string | null
    profissao?: string | null
    cpfCnpj: string
    dataNascimento?: Date | string | null
    dataCadastro?: Date | string
    endereco?: EnderecoCreateNestedOneWithoutClienteInput
    contatos?: ContatoCreateNestedOneWithoutClienteInput
    documentos?: DocumentoCreateNestedManyWithoutClienteInput
    contratos?: ContratoCreateNestedManyWithoutClienteInput
    boletos?: BoletoCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoCreateNestedManyWithoutClienteInput
    comunicacoes?: ComunicacaoCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutClientesInadimplentesInput = {
    id?: number
    nome: string
    nomeConjuge?: string | null
    profissao?: string | null
    cpfCnpj: string
    dataNascimento?: Date | string | null
    dataCadastro?: Date | string
    endereco?: EnderecoUncheckedCreateNestedOneWithoutClienteInput
    contatos?: ContatoUncheckedCreateNestedOneWithoutClienteInput
    documentos?: DocumentoUncheckedCreateNestedManyWithoutClienteInput
    contratos?: ContratoUncheckedCreateNestedManyWithoutClienteInput
    boletos?: BoletoUncheckedCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoUncheckedCreateNestedManyWithoutClienteInput
    comunicacoes?: ComunicacaoUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutClientesInadimplentesInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutClientesInadimplentesInput, ClienteUncheckedCreateWithoutClientesInadimplentesInput>
  }

  export type ParcelaInadimplenteCreateWithoutClienteInadimplenteInput = {
    numero: number
    dataVencimento: Date | string
    valor: Decimal | DecimalJsLike | number | string
    valorAtualizado: Decimal | DecimalJsLike | number | string
    status: string
  }

  export type ParcelaInadimplenteUncheckedCreateWithoutClienteInadimplenteInput = {
    id?: number
    numero: number
    dataVencimento: Date | string
    valor: Decimal | DecimalJsLike | number | string
    valorAtualizado: Decimal | DecimalJsLike | number | string
    status: string
  }

  export type ParcelaInadimplenteCreateOrConnectWithoutClienteInadimplenteInput = {
    where: ParcelaInadimplenteWhereUniqueInput
    create: XOR<ParcelaInadimplenteCreateWithoutClienteInadimplenteInput, ParcelaInadimplenteUncheckedCreateWithoutClienteInadimplenteInput>
  }

  export type ParcelaInadimplenteCreateManyClienteInadimplenteInputEnvelope = {
    data: Enumerable<ParcelaInadimplenteCreateManyClienteInadimplenteInput>
    skipDuplicates?: boolean
  }

  export type ClienteUpsertWithoutClientesInadimplentesInput = {
    update: XOR<ClienteUpdateWithoutClientesInadimplentesInput, ClienteUncheckedUpdateWithoutClientesInadimplentesInput>
    create: XOR<ClienteCreateWithoutClientesInadimplentesInput, ClienteUncheckedCreateWithoutClientesInadimplentesInput>
  }

  export type ClienteUpdateWithoutClientesInadimplentesInput = {
    nome?: StringFieldUpdateOperationsInput | string
    nomeConjuge?: NullableStringFieldUpdateOperationsInput | string | null
    profissao?: NullableStringFieldUpdateOperationsInput | string | null
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    endereco?: EnderecoUpdateOneWithoutClienteNestedInput
    contatos?: ContatoUpdateOneWithoutClienteNestedInput
    documentos?: DocumentoUpdateManyWithoutClienteNestedInput
    contratos?: ContratoUpdateManyWithoutClienteNestedInput
    boletos?: BoletoUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoUpdateManyWithoutClienteNestedInput
    comunicacoes?: ComunicacaoUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutClientesInadimplentesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    nomeConjuge?: NullableStringFieldUpdateOperationsInput | string | null
    profissao?: NullableStringFieldUpdateOperationsInput | string | null
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    endereco?: EnderecoUncheckedUpdateOneWithoutClienteNestedInput
    contatos?: ContatoUncheckedUpdateOneWithoutClienteNestedInput
    documentos?: DocumentoUncheckedUpdateManyWithoutClienteNestedInput
    contratos?: ContratoUncheckedUpdateManyWithoutClienteNestedInput
    boletos?: BoletoUncheckedUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoUncheckedUpdateManyWithoutClienteNestedInput
    comunicacoes?: ComunicacaoUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ParcelaInadimplenteUpsertWithWhereUniqueWithoutClienteInadimplenteInput = {
    where: ParcelaInadimplenteWhereUniqueInput
    update: XOR<ParcelaInadimplenteUpdateWithoutClienteInadimplenteInput, ParcelaInadimplenteUncheckedUpdateWithoutClienteInadimplenteInput>
    create: XOR<ParcelaInadimplenteCreateWithoutClienteInadimplenteInput, ParcelaInadimplenteUncheckedCreateWithoutClienteInadimplenteInput>
  }

  export type ParcelaInadimplenteUpdateWithWhereUniqueWithoutClienteInadimplenteInput = {
    where: ParcelaInadimplenteWhereUniqueInput
    data: XOR<ParcelaInadimplenteUpdateWithoutClienteInadimplenteInput, ParcelaInadimplenteUncheckedUpdateWithoutClienteInadimplenteInput>
  }

  export type ParcelaInadimplenteUpdateManyWithWhereWithoutClienteInadimplenteInput = {
    where: ParcelaInadimplenteScalarWhereInput
    data: XOR<ParcelaInadimplenteUpdateManyMutationInput, ParcelaInadimplenteUncheckedUpdateManyWithoutParcelasInput>
  }

  export type ParcelaInadimplenteScalarWhereInput = {
    AND?: Enumerable<ParcelaInadimplenteScalarWhereInput>
    OR?: Enumerable<ParcelaInadimplenteScalarWhereInput>
    NOT?: Enumerable<ParcelaInadimplenteScalarWhereInput>
    id?: IntFilter | number
    clienteInadimplente_id?: IntFilter | number
    numero?: IntFilter | number
    dataVencimento?: DateTimeFilter | Date | string
    valor?: DecimalFilter | Decimal | DecimalJsLike | number | string
    valorAtualizado?: DecimalFilter | Decimal | DecimalJsLike | number | string
    status?: StringFilter | string
  }

  export type ClienteInadimplenteCreateWithoutParcelasInput = {
    contratoId: number
    valorEmAberto: Decimal | DecimalJsLike | number | string
    diasAtraso: number
    ultimaCobranca?: Date | string | null
    status: string
    cliente: ClienteCreateNestedOneWithoutClientesInadimplentesInput
  }

  export type ClienteInadimplenteUncheckedCreateWithoutParcelasInput = {
    id?: number
    clienteId: number
    contratoId: number
    valorEmAberto: Decimal | DecimalJsLike | number | string
    diasAtraso: number
    ultimaCobranca?: Date | string | null
    status: string
  }

  export type ClienteInadimplenteCreateOrConnectWithoutParcelasInput = {
    where: ClienteInadimplenteWhereUniqueInput
    create: XOR<ClienteInadimplenteCreateWithoutParcelasInput, ClienteInadimplenteUncheckedCreateWithoutParcelasInput>
  }

  export type ClienteInadimplenteUpsertWithoutParcelasInput = {
    update: XOR<ClienteInadimplenteUpdateWithoutParcelasInput, ClienteInadimplenteUncheckedUpdateWithoutParcelasInput>
    create: XOR<ClienteInadimplenteCreateWithoutParcelasInput, ClienteInadimplenteUncheckedCreateWithoutParcelasInput>
  }

  export type ClienteInadimplenteUpdateWithoutParcelasInput = {
    contratoId?: IntFieldUpdateOperationsInput | number
    valorEmAberto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    diasAtraso?: IntFieldUpdateOperationsInput | number
    ultimaCobranca?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    cliente?: ClienteUpdateOneRequiredWithoutClientesInadimplentesNestedInput
  }

  export type ClienteInadimplenteUncheckedUpdateWithoutParcelasInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    contratoId?: IntFieldUpdateOperationsInput | number
    valorEmAberto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    diasAtraso?: IntFieldUpdateOperationsInput | number
    ultimaCobranca?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteCreateWithoutInteracoesInput = {
    nome: string
    nomeConjuge?: string | null
    profissao?: string | null
    cpfCnpj: string
    dataNascimento?: Date | string | null
    dataCadastro?: Date | string
    endereco?: EnderecoCreateNestedOneWithoutClienteInput
    contatos?: ContatoCreateNestedOneWithoutClienteInput
    documentos?: DocumentoCreateNestedManyWithoutClienteInput
    contratos?: ContratoCreateNestedManyWithoutClienteInput
    boletos?: BoletoCreateNestedManyWithoutClienteInput
    comunicacoes?: ComunicacaoCreateNestedManyWithoutClienteInput
    clientesInadimplentes?: ClienteInadimplenteCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutInteracoesInput = {
    id?: number
    nome: string
    nomeConjuge?: string | null
    profissao?: string | null
    cpfCnpj: string
    dataNascimento?: Date | string | null
    dataCadastro?: Date | string
    endereco?: EnderecoUncheckedCreateNestedOneWithoutClienteInput
    contatos?: ContatoUncheckedCreateNestedOneWithoutClienteInput
    documentos?: DocumentoUncheckedCreateNestedManyWithoutClienteInput
    contratos?: ContratoUncheckedCreateNestedManyWithoutClienteInput
    boletos?: BoletoUncheckedCreateNestedManyWithoutClienteInput
    comunicacoes?: ComunicacaoUncheckedCreateNestedManyWithoutClienteInput
    clientesInadimplentes?: ClienteInadimplenteUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutInteracoesInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutInteracoesInput, ClienteUncheckedCreateWithoutInteracoesInput>
  }

  export type ClienteUpsertWithoutInteracoesInput = {
    update: XOR<ClienteUpdateWithoutInteracoesInput, ClienteUncheckedUpdateWithoutInteracoesInput>
    create: XOR<ClienteCreateWithoutInteracoesInput, ClienteUncheckedCreateWithoutInteracoesInput>
  }

  export type ClienteUpdateWithoutInteracoesInput = {
    nome?: StringFieldUpdateOperationsInput | string
    nomeConjuge?: NullableStringFieldUpdateOperationsInput | string | null
    profissao?: NullableStringFieldUpdateOperationsInput | string | null
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    endereco?: EnderecoUpdateOneWithoutClienteNestedInput
    contatos?: ContatoUpdateOneWithoutClienteNestedInput
    documentos?: DocumentoUpdateManyWithoutClienteNestedInput
    contratos?: ContratoUpdateManyWithoutClienteNestedInput
    boletos?: BoletoUpdateManyWithoutClienteNestedInput
    comunicacoes?: ComunicacaoUpdateManyWithoutClienteNestedInput
    clientesInadimplentes?: ClienteInadimplenteUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutInteracoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    nomeConjuge?: NullableStringFieldUpdateOperationsInput | string | null
    profissao?: NullableStringFieldUpdateOperationsInput | string | null
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    endereco?: EnderecoUncheckedUpdateOneWithoutClienteNestedInput
    contatos?: ContatoUncheckedUpdateOneWithoutClienteNestedInput
    documentos?: DocumentoUncheckedUpdateManyWithoutClienteNestedInput
    contratos?: ContratoUncheckedUpdateManyWithoutClienteNestedInput
    boletos?: BoletoUncheckedUpdateManyWithoutClienteNestedInput
    comunicacoes?: ComunicacaoUncheckedUpdateManyWithoutClienteNestedInput
    clientesInadimplentes?: ClienteInadimplenteUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteCreateWithoutComunicacoesInput = {
    nome: string
    nomeConjuge?: string | null
    profissao?: string | null
    cpfCnpj: string
    dataNascimento?: Date | string | null
    dataCadastro?: Date | string
    endereco?: EnderecoCreateNestedOneWithoutClienteInput
    contatos?: ContatoCreateNestedOneWithoutClienteInput
    documentos?: DocumentoCreateNestedManyWithoutClienteInput
    contratos?: ContratoCreateNestedManyWithoutClienteInput
    boletos?: BoletoCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoCreateNestedManyWithoutClienteInput
    clientesInadimplentes?: ClienteInadimplenteCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutComunicacoesInput = {
    id?: number
    nome: string
    nomeConjuge?: string | null
    profissao?: string | null
    cpfCnpj: string
    dataNascimento?: Date | string | null
    dataCadastro?: Date | string
    endereco?: EnderecoUncheckedCreateNestedOneWithoutClienteInput
    contatos?: ContatoUncheckedCreateNestedOneWithoutClienteInput
    documentos?: DocumentoUncheckedCreateNestedManyWithoutClienteInput
    contratos?: ContratoUncheckedCreateNestedManyWithoutClienteInput
    boletos?: BoletoUncheckedCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoUncheckedCreateNestedManyWithoutClienteInput
    clientesInadimplentes?: ClienteInadimplenteUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutComunicacoesInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutComunicacoesInput, ClienteUncheckedCreateWithoutComunicacoesInput>
  }

  export type ClienteUpsertWithoutComunicacoesInput = {
    update: XOR<ClienteUpdateWithoutComunicacoesInput, ClienteUncheckedUpdateWithoutComunicacoesInput>
    create: XOR<ClienteCreateWithoutComunicacoesInput, ClienteUncheckedCreateWithoutComunicacoesInput>
  }

  export type ClienteUpdateWithoutComunicacoesInput = {
    nome?: StringFieldUpdateOperationsInput | string
    nomeConjuge?: NullableStringFieldUpdateOperationsInput | string | null
    profissao?: NullableStringFieldUpdateOperationsInput | string | null
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    endereco?: EnderecoUpdateOneWithoutClienteNestedInput
    contatos?: ContatoUpdateOneWithoutClienteNestedInput
    documentos?: DocumentoUpdateManyWithoutClienteNestedInput
    contratos?: ContratoUpdateManyWithoutClienteNestedInput
    boletos?: BoletoUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoUpdateManyWithoutClienteNestedInput
    clientesInadimplentes?: ClienteInadimplenteUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutComunicacoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    nomeConjuge?: NullableStringFieldUpdateOperationsInput | string | null
    profissao?: NullableStringFieldUpdateOperationsInput | string | null
    cpfCnpj?: StringFieldUpdateOperationsInput | string
    dataNascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataCadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    endereco?: EnderecoUncheckedUpdateOneWithoutClienteNestedInput
    contatos?: ContatoUncheckedUpdateOneWithoutClienteNestedInput
    documentos?: DocumentoUncheckedUpdateManyWithoutClienteNestedInput
    contratos?: ContratoUncheckedUpdateManyWithoutClienteNestedInput
    boletos?: BoletoUncheckedUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoUncheckedUpdateManyWithoutClienteNestedInput
    clientesInadimplentes?: ClienteInadimplenteUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ContratoCreateWithoutAditivosInput = {
    chave?: string | null
    numeroContrato?: string | null
    dataEmissao?: Date | string | null
    dataPrimeiraPrestacao?: Date | string | null
    valorPrestacao?: Decimal | DecimalJsLike | number | string | null
    dataInicio: Date | string
    dataFim: Date | string
    valorTotal: Decimal | DecimalJsLike | number | string
    valorEntrada: Decimal | DecimalJsLike | number | string
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status?: string
    dataCriacao?: Date | string
    parcelasPagas?: number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    cliente: ClienteCreateNestedOneWithoutContratosInput
    lote: LoteCreateNestedOneWithoutContratosInput
    boletos?: BoletoCreateNestedManyWithoutContratoInput
    reajustes?: ReajusteCreateNestedManyWithoutContratoInput
    distratos?: DistratoCreateNestedManyWithoutContratoInput
    quitacoes?: QuitacaoCreateNestedManyWithoutContratoInput
    parcelas?: ParcelaCreateNestedManyWithoutContratoInput
  }

  export type ContratoUncheckedCreateWithoutAditivosInput = {
    id?: number
    clienteId: number
    loteId: number
    chave?: string | null
    numeroContrato?: string | null
    dataEmissao?: Date | string | null
    dataPrimeiraPrestacao?: Date | string | null
    valorPrestacao?: Decimal | DecimalJsLike | number | string | null
    dataInicio: Date | string
    dataFim: Date | string
    valorTotal: Decimal | DecimalJsLike | number | string
    valorEntrada: Decimal | DecimalJsLike | number | string
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status?: string
    dataCriacao?: Date | string
    parcelasPagas?: number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    boletos?: BoletoUncheckedCreateNestedManyWithoutContratoInput
    reajustes?: ReajusteUncheckedCreateNestedManyWithoutContratoInput
    distratos?: DistratoUncheckedCreateNestedManyWithoutContratoInput
    quitacoes?: QuitacaoUncheckedCreateNestedManyWithoutContratoInput
    parcelas?: ParcelaUncheckedCreateNestedManyWithoutContratoInput
  }

  export type ContratoCreateOrConnectWithoutAditivosInput = {
    where: ContratoWhereUniqueInput
    create: XOR<ContratoCreateWithoutAditivosInput, ContratoUncheckedCreateWithoutAditivosInput>
  }

  export type ContratoUpsertWithoutAditivosInput = {
    update: XOR<ContratoUpdateWithoutAditivosInput, ContratoUncheckedUpdateWithoutAditivosInput>
    create: XOR<ContratoCreateWithoutAditivosInput, ContratoUncheckedCreateWithoutAditivosInput>
  }

  export type ContratoUpdateWithoutAditivosInput = {
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    numeroContrato?: NullableStringFieldUpdateOperationsInput | string | null
    dataEmissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataPrimeiraPrestacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPrestacao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFieldUpdateOperationsInput | number
    dataVencimento?: IntFieldUpdateOperationsInput | number
    clausulas?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasPagas?: IntFieldUpdateOperationsInput | number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    cliente?: ClienteUpdateOneRequiredWithoutContratosNestedInput
    lote?: LoteUpdateOneRequiredWithoutContratosNestedInput
    boletos?: BoletoUpdateManyWithoutContratoNestedInput
    reajustes?: ReajusteUpdateManyWithoutContratoNestedInput
    distratos?: DistratoUpdateManyWithoutContratoNestedInput
    quitacoes?: QuitacaoUpdateManyWithoutContratoNestedInput
    parcelas?: ParcelaUpdateManyWithoutContratoNestedInput
  }

  export type ContratoUncheckedUpdateWithoutAditivosInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    loteId?: IntFieldUpdateOperationsInput | number
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    numeroContrato?: NullableStringFieldUpdateOperationsInput | string | null
    dataEmissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataPrimeiraPrestacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPrestacao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFieldUpdateOperationsInput | number
    dataVencimento?: IntFieldUpdateOperationsInput | number
    clausulas?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasPagas?: IntFieldUpdateOperationsInput | number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    boletos?: BoletoUncheckedUpdateManyWithoutContratoNestedInput
    reajustes?: ReajusteUncheckedUpdateManyWithoutContratoNestedInput
    distratos?: DistratoUncheckedUpdateManyWithoutContratoNestedInput
    quitacoes?: QuitacaoUncheckedUpdateManyWithoutContratoNestedInput
    parcelas?: ParcelaUncheckedUpdateManyWithoutContratoNestedInput
  }

  export type ContratoCreateWithoutDistratosInput = {
    chave?: string | null
    numeroContrato?: string | null
    dataEmissao?: Date | string | null
    dataPrimeiraPrestacao?: Date | string | null
    valorPrestacao?: Decimal | DecimalJsLike | number | string | null
    dataInicio: Date | string
    dataFim: Date | string
    valorTotal: Decimal | DecimalJsLike | number | string
    valorEntrada: Decimal | DecimalJsLike | number | string
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status?: string
    dataCriacao?: Date | string
    parcelasPagas?: number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    cliente: ClienteCreateNestedOneWithoutContratosInput
    lote: LoteCreateNestedOneWithoutContratosInput
    boletos?: BoletoCreateNestedManyWithoutContratoInput
    reajustes?: ReajusteCreateNestedManyWithoutContratoInput
    aditivos?: AditivoCreateNestedManyWithoutContratoInput
    quitacoes?: QuitacaoCreateNestedManyWithoutContratoInput
    parcelas?: ParcelaCreateNestedManyWithoutContratoInput
  }

  export type ContratoUncheckedCreateWithoutDistratosInput = {
    id?: number
    clienteId: number
    loteId: number
    chave?: string | null
    numeroContrato?: string | null
    dataEmissao?: Date | string | null
    dataPrimeiraPrestacao?: Date | string | null
    valorPrestacao?: Decimal | DecimalJsLike | number | string | null
    dataInicio: Date | string
    dataFim: Date | string
    valorTotal: Decimal | DecimalJsLike | number | string
    valorEntrada: Decimal | DecimalJsLike | number | string
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status?: string
    dataCriacao?: Date | string
    parcelasPagas?: number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    boletos?: BoletoUncheckedCreateNestedManyWithoutContratoInput
    reajustes?: ReajusteUncheckedCreateNestedManyWithoutContratoInput
    aditivos?: AditivoUncheckedCreateNestedManyWithoutContratoInput
    quitacoes?: QuitacaoUncheckedCreateNestedManyWithoutContratoInput
    parcelas?: ParcelaUncheckedCreateNestedManyWithoutContratoInput
  }

  export type ContratoCreateOrConnectWithoutDistratosInput = {
    where: ContratoWhereUniqueInput
    create: XOR<ContratoCreateWithoutDistratosInput, ContratoUncheckedCreateWithoutDistratosInput>
  }

  export type ContratoUpsertWithoutDistratosInput = {
    update: XOR<ContratoUpdateWithoutDistratosInput, ContratoUncheckedUpdateWithoutDistratosInput>
    create: XOR<ContratoCreateWithoutDistratosInput, ContratoUncheckedCreateWithoutDistratosInput>
  }

  export type ContratoUpdateWithoutDistratosInput = {
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    numeroContrato?: NullableStringFieldUpdateOperationsInput | string | null
    dataEmissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataPrimeiraPrestacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPrestacao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFieldUpdateOperationsInput | number
    dataVencimento?: IntFieldUpdateOperationsInput | number
    clausulas?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasPagas?: IntFieldUpdateOperationsInput | number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    cliente?: ClienteUpdateOneRequiredWithoutContratosNestedInput
    lote?: LoteUpdateOneRequiredWithoutContratosNestedInput
    boletos?: BoletoUpdateManyWithoutContratoNestedInput
    reajustes?: ReajusteUpdateManyWithoutContratoNestedInput
    aditivos?: AditivoUpdateManyWithoutContratoNestedInput
    quitacoes?: QuitacaoUpdateManyWithoutContratoNestedInput
    parcelas?: ParcelaUpdateManyWithoutContratoNestedInput
  }

  export type ContratoUncheckedUpdateWithoutDistratosInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    loteId?: IntFieldUpdateOperationsInput | number
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    numeroContrato?: NullableStringFieldUpdateOperationsInput | string | null
    dataEmissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataPrimeiraPrestacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPrestacao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFieldUpdateOperationsInput | number
    dataVencimento?: IntFieldUpdateOperationsInput | number
    clausulas?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasPagas?: IntFieldUpdateOperationsInput | number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    boletos?: BoletoUncheckedUpdateManyWithoutContratoNestedInput
    reajustes?: ReajusteUncheckedUpdateManyWithoutContratoNestedInput
    aditivos?: AditivoUncheckedUpdateManyWithoutContratoNestedInput
    quitacoes?: QuitacaoUncheckedUpdateManyWithoutContratoNestedInput
    parcelas?: ParcelaUncheckedUpdateManyWithoutContratoNestedInput
  }

  export type ContratoCreateWithoutQuitacoesInput = {
    chave?: string | null
    numeroContrato?: string | null
    dataEmissao?: Date | string | null
    dataPrimeiraPrestacao?: Date | string | null
    valorPrestacao?: Decimal | DecimalJsLike | number | string | null
    dataInicio: Date | string
    dataFim: Date | string
    valorTotal: Decimal | DecimalJsLike | number | string
    valorEntrada: Decimal | DecimalJsLike | number | string
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status?: string
    dataCriacao?: Date | string
    parcelasPagas?: number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    cliente: ClienteCreateNestedOneWithoutContratosInput
    lote: LoteCreateNestedOneWithoutContratosInput
    boletos?: BoletoCreateNestedManyWithoutContratoInput
    reajustes?: ReajusteCreateNestedManyWithoutContratoInput
    aditivos?: AditivoCreateNestedManyWithoutContratoInput
    distratos?: DistratoCreateNestedManyWithoutContratoInput
    parcelas?: ParcelaCreateNestedManyWithoutContratoInput
  }

  export type ContratoUncheckedCreateWithoutQuitacoesInput = {
    id?: number
    clienteId: number
    loteId: number
    chave?: string | null
    numeroContrato?: string | null
    dataEmissao?: Date | string | null
    dataPrimeiraPrestacao?: Date | string | null
    valorPrestacao?: Decimal | DecimalJsLike | number | string | null
    dataInicio: Date | string
    dataFim: Date | string
    valorTotal: Decimal | DecimalJsLike | number | string
    valorEntrada: Decimal | DecimalJsLike | number | string
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status?: string
    dataCriacao?: Date | string
    parcelasPagas?: number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    boletos?: BoletoUncheckedCreateNestedManyWithoutContratoInput
    reajustes?: ReajusteUncheckedCreateNestedManyWithoutContratoInput
    aditivos?: AditivoUncheckedCreateNestedManyWithoutContratoInput
    distratos?: DistratoUncheckedCreateNestedManyWithoutContratoInput
    parcelas?: ParcelaUncheckedCreateNestedManyWithoutContratoInput
  }

  export type ContratoCreateOrConnectWithoutQuitacoesInput = {
    where: ContratoWhereUniqueInput
    create: XOR<ContratoCreateWithoutQuitacoesInput, ContratoUncheckedCreateWithoutQuitacoesInput>
  }

  export type ContratoUpsertWithoutQuitacoesInput = {
    update: XOR<ContratoUpdateWithoutQuitacoesInput, ContratoUncheckedUpdateWithoutQuitacoesInput>
    create: XOR<ContratoCreateWithoutQuitacoesInput, ContratoUncheckedCreateWithoutQuitacoesInput>
  }

  export type ContratoUpdateWithoutQuitacoesInput = {
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    numeroContrato?: NullableStringFieldUpdateOperationsInput | string | null
    dataEmissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataPrimeiraPrestacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPrestacao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFieldUpdateOperationsInput | number
    dataVencimento?: IntFieldUpdateOperationsInput | number
    clausulas?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasPagas?: IntFieldUpdateOperationsInput | number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    cliente?: ClienteUpdateOneRequiredWithoutContratosNestedInput
    lote?: LoteUpdateOneRequiredWithoutContratosNestedInput
    boletos?: BoletoUpdateManyWithoutContratoNestedInput
    reajustes?: ReajusteUpdateManyWithoutContratoNestedInput
    aditivos?: AditivoUpdateManyWithoutContratoNestedInput
    distratos?: DistratoUpdateManyWithoutContratoNestedInput
    parcelas?: ParcelaUpdateManyWithoutContratoNestedInput
  }

  export type ContratoUncheckedUpdateWithoutQuitacoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    loteId?: IntFieldUpdateOperationsInput | number
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    numeroContrato?: NullableStringFieldUpdateOperationsInput | string | null
    dataEmissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataPrimeiraPrestacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPrestacao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFieldUpdateOperationsInput | number
    dataVencimento?: IntFieldUpdateOperationsInput | number
    clausulas?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasPagas?: IntFieldUpdateOperationsInput | number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    boletos?: BoletoUncheckedUpdateManyWithoutContratoNestedInput
    reajustes?: ReajusteUncheckedUpdateManyWithoutContratoNestedInput
    aditivos?: AditivoUncheckedUpdateManyWithoutContratoNestedInput
    distratos?: DistratoUncheckedUpdateManyWithoutContratoNestedInput
    parcelas?: ParcelaUncheckedUpdateManyWithoutContratoNestedInput
  }

  export type ContratoCreateWithoutParcelasInput = {
    chave?: string | null
    numeroContrato?: string | null
    dataEmissao?: Date | string | null
    dataPrimeiraPrestacao?: Date | string | null
    valorPrestacao?: Decimal | DecimalJsLike | number | string | null
    dataInicio: Date | string
    dataFim: Date | string
    valorTotal: Decimal | DecimalJsLike | number | string
    valorEntrada: Decimal | DecimalJsLike | number | string
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status?: string
    dataCriacao?: Date | string
    parcelasPagas?: number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    cliente: ClienteCreateNestedOneWithoutContratosInput
    lote: LoteCreateNestedOneWithoutContratosInput
    boletos?: BoletoCreateNestedManyWithoutContratoInput
    reajustes?: ReajusteCreateNestedManyWithoutContratoInput
    aditivos?: AditivoCreateNestedManyWithoutContratoInput
    distratos?: DistratoCreateNestedManyWithoutContratoInput
    quitacoes?: QuitacaoCreateNestedManyWithoutContratoInput
  }

  export type ContratoUncheckedCreateWithoutParcelasInput = {
    id?: number
    clienteId: number
    loteId: number
    chave?: string | null
    numeroContrato?: string | null
    dataEmissao?: Date | string | null
    dataPrimeiraPrestacao?: Date | string | null
    valorPrestacao?: Decimal | DecimalJsLike | number | string | null
    dataInicio: Date | string
    dataFim: Date | string
    valorTotal: Decimal | DecimalJsLike | number | string
    valorEntrada: Decimal | DecimalJsLike | number | string
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status?: string
    dataCriacao?: Date | string
    parcelasPagas?: number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    boletos?: BoletoUncheckedCreateNestedManyWithoutContratoInput
    reajustes?: ReajusteUncheckedCreateNestedManyWithoutContratoInput
    aditivos?: AditivoUncheckedCreateNestedManyWithoutContratoInput
    distratos?: DistratoUncheckedCreateNestedManyWithoutContratoInput
    quitacoes?: QuitacaoUncheckedCreateNestedManyWithoutContratoInput
  }

  export type ContratoCreateOrConnectWithoutParcelasInput = {
    where: ContratoWhereUniqueInput
    create: XOR<ContratoCreateWithoutParcelasInput, ContratoUncheckedCreateWithoutParcelasInput>
  }

  export type BoletoCreateWithoutParcelaInput = {
    clienteNome: string
    valor: Decimal | DecimalJsLike | number | string
    dataVencimento: Date | string
    numeroParcela: number
    descricao: string
    nossoNumero: string
    linhaDigitavel: string
    codigoBarras: string
    pdfUrl: string
    dataGeracao?: Date | string
    status?: string
    dataPagamento?: Date | string | null
    valorPago?: Decimal | DecimalJsLike | number | string | null
    formaPagamento?: string | null
    dataCancelamento?: Date | string | null
    comprovante?: string | null
    parcelaId?: number | null
    cliente: ClienteCreateNestedOneWithoutBoletosInput
    contrato: ContratoCreateNestedOneWithoutBoletosInput
  }

  export type BoletoUncheckedCreateWithoutParcelaInput = {
    id?: number
    clienteId: number
    clienteNome: string
    contratoId: number
    valor: Decimal | DecimalJsLike | number | string
    dataVencimento: Date | string
    numeroParcela: number
    descricao: string
    nossoNumero: string
    linhaDigitavel: string
    codigoBarras: string
    pdfUrl: string
    dataGeracao?: Date | string
    status?: string
    dataPagamento?: Date | string | null
    valorPago?: Decimal | DecimalJsLike | number | string | null
    formaPagamento?: string | null
    dataCancelamento?: Date | string | null
    comprovante?: string | null
    parcelaId?: number | null
  }

  export type BoletoCreateOrConnectWithoutParcelaInput = {
    where: BoletoWhereUniqueInput
    create: XOR<BoletoCreateWithoutParcelaInput, BoletoUncheckedCreateWithoutParcelaInput>
  }

  export type ContratoUpsertWithoutParcelasInput = {
    update: XOR<ContratoUpdateWithoutParcelasInput, ContratoUncheckedUpdateWithoutParcelasInput>
    create: XOR<ContratoCreateWithoutParcelasInput, ContratoUncheckedCreateWithoutParcelasInput>
  }

  export type ContratoUpdateWithoutParcelasInput = {
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    numeroContrato?: NullableStringFieldUpdateOperationsInput | string | null
    dataEmissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataPrimeiraPrestacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPrestacao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFieldUpdateOperationsInput | number
    dataVencimento?: IntFieldUpdateOperationsInput | number
    clausulas?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasPagas?: IntFieldUpdateOperationsInput | number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    cliente?: ClienteUpdateOneRequiredWithoutContratosNestedInput
    lote?: LoteUpdateOneRequiredWithoutContratosNestedInput
    boletos?: BoletoUpdateManyWithoutContratoNestedInput
    reajustes?: ReajusteUpdateManyWithoutContratoNestedInput
    aditivos?: AditivoUpdateManyWithoutContratoNestedInput
    distratos?: DistratoUpdateManyWithoutContratoNestedInput
    quitacoes?: QuitacaoUpdateManyWithoutContratoNestedInput
  }

  export type ContratoUncheckedUpdateWithoutParcelasInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    loteId?: IntFieldUpdateOperationsInput | number
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    numeroContrato?: NullableStringFieldUpdateOperationsInput | string | null
    dataEmissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataPrimeiraPrestacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPrestacao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFieldUpdateOperationsInput | number
    dataVencimento?: IntFieldUpdateOperationsInput | number
    clausulas?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasPagas?: IntFieldUpdateOperationsInput | number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    boletos?: BoletoUncheckedUpdateManyWithoutContratoNestedInput
    reajustes?: ReajusteUncheckedUpdateManyWithoutContratoNestedInput
    aditivos?: AditivoUncheckedUpdateManyWithoutContratoNestedInput
    distratos?: DistratoUncheckedUpdateManyWithoutContratoNestedInput
    quitacoes?: QuitacaoUncheckedUpdateManyWithoutContratoNestedInput
  }

  export type BoletoUpsertWithoutParcelaInput = {
    update: XOR<BoletoUpdateWithoutParcelaInput, BoletoUncheckedUpdateWithoutParcelaInput>
    create: XOR<BoletoCreateWithoutParcelaInput, BoletoUncheckedCreateWithoutParcelaInput>
  }

  export type BoletoUpdateWithoutParcelaInput = {
    clienteNome?: StringFieldUpdateOperationsInput | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    numeroParcela?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    nossoNumero?: StringFieldUpdateOperationsInput | string
    linhaDigitavel?: StringFieldUpdateOperationsInput | string
    codigoBarras?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    dataGeracao?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPago?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    dataCancelamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comprovante?: NullableStringFieldUpdateOperationsInput | string | null
    parcelaId?: NullableIntFieldUpdateOperationsInput | number | null
    cliente?: ClienteUpdateOneRequiredWithoutBoletosNestedInput
    contrato?: ContratoUpdateOneRequiredWithoutBoletosNestedInput
  }

  export type BoletoUncheckedUpdateWithoutParcelaInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    clienteNome?: StringFieldUpdateOperationsInput | string
    contratoId?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    numeroParcela?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    nossoNumero?: StringFieldUpdateOperationsInput | string
    linhaDigitavel?: StringFieldUpdateOperationsInput | string
    codigoBarras?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    dataGeracao?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPago?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    dataCancelamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comprovante?: NullableStringFieldUpdateOperationsInput | string | null
    parcelaId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DocumentoCreateManyClienteInput = {
    id?: number
    tipo: string
    nome: string
    arquivo: string
    dataUpload?: Date | string
    s3Key?: string | null
  }

  export type ContratoCreateManyClienteInput = {
    id?: number
    loteId: number
    chave?: string | null
    numeroContrato?: string | null
    dataEmissao?: Date | string | null
    dataPrimeiraPrestacao?: Date | string | null
    valorPrestacao?: Decimal | DecimalJsLike | number | string | null
    dataInicio: Date | string
    dataFim: Date | string
    valorTotal: Decimal | DecimalJsLike | number | string
    valorEntrada: Decimal | DecimalJsLike | number | string
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status?: string
    dataCriacao?: Date | string
    parcelasPagas?: number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
  }

  export type BoletoCreateManyClienteInput = {
    id?: number
    clienteNome: string
    contratoId: number
    valor: Decimal | DecimalJsLike | number | string
    dataVencimento: Date | string
    numeroParcela: number
    descricao: string
    nossoNumero: string
    linhaDigitavel: string
    codigoBarras: string
    pdfUrl: string
    dataGeracao?: Date | string
    status?: string
    dataPagamento?: Date | string | null
    valorPago?: Decimal | DecimalJsLike | number | string | null
    formaPagamento?: string | null
    dataCancelamento?: Date | string | null
    comprovante?: string | null
    parcelaId?: number | null
  }

  export type InteracaoCreateManyClienteInput = {
    id?: string
    tipo: string
    data: Date | string
    observacao: string
    usuario: string
    parcelaId?: string | null
  }

  export type ComunicacaoCreateManyClienteInput = {
    id?: string
    tipo: string
    data: Date | string
    mensagem: string
    status: string
    parcelaInfo?: NullableJsonNullValueInput | InputJsonValue
    anexos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ClienteInadimplenteCreateManyClienteInput = {
    id?: number
    contratoId: number
    valorEmAberto: Decimal | DecimalJsLike | number | string
    diasAtraso: number
    ultimaCobranca?: Date | string | null
    status: string
  }

  export type DocumentoUpdateWithoutClienteInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    arquivo?: StringFieldUpdateOperationsInput | string
    dataUpload?: DateTimeFieldUpdateOperationsInput | Date | string
    s3Key?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentoUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    arquivo?: StringFieldUpdateOperationsInput | string
    dataUpload?: DateTimeFieldUpdateOperationsInput | Date | string
    s3Key?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentoUncheckedUpdateManyWithoutDocumentosInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    arquivo?: StringFieldUpdateOperationsInput | string
    dataUpload?: DateTimeFieldUpdateOperationsInput | Date | string
    s3Key?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContratoUpdateWithoutClienteInput = {
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    numeroContrato?: NullableStringFieldUpdateOperationsInput | string | null
    dataEmissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataPrimeiraPrestacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPrestacao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFieldUpdateOperationsInput | number
    dataVencimento?: IntFieldUpdateOperationsInput | number
    clausulas?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasPagas?: IntFieldUpdateOperationsInput | number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    lote?: LoteUpdateOneRequiredWithoutContratosNestedInput
    boletos?: BoletoUpdateManyWithoutContratoNestedInput
    reajustes?: ReajusteUpdateManyWithoutContratoNestedInput
    aditivos?: AditivoUpdateManyWithoutContratoNestedInput
    distratos?: DistratoUpdateManyWithoutContratoNestedInput
    quitacoes?: QuitacaoUpdateManyWithoutContratoNestedInput
    parcelas?: ParcelaUpdateManyWithoutContratoNestedInput
  }

  export type ContratoUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    loteId?: IntFieldUpdateOperationsInput | number
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    numeroContrato?: NullableStringFieldUpdateOperationsInput | string | null
    dataEmissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataPrimeiraPrestacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPrestacao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFieldUpdateOperationsInput | number
    dataVencimento?: IntFieldUpdateOperationsInput | number
    clausulas?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasPagas?: IntFieldUpdateOperationsInput | number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    boletos?: BoletoUncheckedUpdateManyWithoutContratoNestedInput
    reajustes?: ReajusteUncheckedUpdateManyWithoutContratoNestedInput
    aditivos?: AditivoUncheckedUpdateManyWithoutContratoNestedInput
    distratos?: DistratoUncheckedUpdateManyWithoutContratoNestedInput
    quitacoes?: QuitacaoUncheckedUpdateManyWithoutContratoNestedInput
    parcelas?: ParcelaUncheckedUpdateManyWithoutContratoNestedInput
  }

  export type ContratoUncheckedUpdateManyWithoutContratosInput = {
    id?: IntFieldUpdateOperationsInput | number
    loteId?: IntFieldUpdateOperationsInput | number
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    numeroContrato?: NullableStringFieldUpdateOperationsInput | string | null
    dataEmissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataPrimeiraPrestacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPrestacao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFieldUpdateOperationsInput | number
    dataVencimento?: IntFieldUpdateOperationsInput | number
    clausulas?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasPagas?: IntFieldUpdateOperationsInput | number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
  }

  export type BoletoUpdateWithoutClienteInput = {
    clienteNome?: StringFieldUpdateOperationsInput | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    numeroParcela?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    nossoNumero?: StringFieldUpdateOperationsInput | string
    linhaDigitavel?: StringFieldUpdateOperationsInput | string
    codigoBarras?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    dataGeracao?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPago?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    dataCancelamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comprovante?: NullableStringFieldUpdateOperationsInput | string | null
    parcelaId?: NullableIntFieldUpdateOperationsInput | number | null
    contrato?: ContratoUpdateOneRequiredWithoutBoletosNestedInput
    parcela?: ParcelaUpdateOneWithoutBoletoNestedInput
  }

  export type BoletoUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteNome?: StringFieldUpdateOperationsInput | string
    contratoId?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    numeroParcela?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    nossoNumero?: StringFieldUpdateOperationsInput | string
    linhaDigitavel?: StringFieldUpdateOperationsInput | string
    codigoBarras?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    dataGeracao?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPago?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    dataCancelamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comprovante?: NullableStringFieldUpdateOperationsInput | string | null
    parcelaId?: NullableIntFieldUpdateOperationsInput | number | null
    parcela?: ParcelaUncheckedUpdateOneWithoutBoletoNestedInput
  }

  export type BoletoUncheckedUpdateManyWithoutBoletosInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteNome?: StringFieldUpdateOperationsInput | string
    contratoId?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    numeroParcela?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    nossoNumero?: StringFieldUpdateOperationsInput | string
    linhaDigitavel?: StringFieldUpdateOperationsInput | string
    codigoBarras?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    dataGeracao?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPago?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    dataCancelamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comprovante?: NullableStringFieldUpdateOperationsInput | string | null
    parcelaId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type InteracaoUpdateWithoutClienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    observacao?: StringFieldUpdateOperationsInput | string
    usuario?: StringFieldUpdateOperationsInput | string
    parcelaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InteracaoUncheckedUpdateWithoutClienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    observacao?: StringFieldUpdateOperationsInput | string
    usuario?: StringFieldUpdateOperationsInput | string
    parcelaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InteracaoUncheckedUpdateManyWithoutInteracoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    observacao?: StringFieldUpdateOperationsInput | string
    usuario?: StringFieldUpdateOperationsInput | string
    parcelaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComunicacaoUpdateWithoutClienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    mensagem?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    parcelaInfo?: NullableJsonNullValueInput | InputJsonValue
    anexos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ComunicacaoUncheckedUpdateWithoutClienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    mensagem?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    parcelaInfo?: NullableJsonNullValueInput | InputJsonValue
    anexos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ComunicacaoUncheckedUpdateManyWithoutComunicacoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    mensagem?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    parcelaInfo?: NullableJsonNullValueInput | InputJsonValue
    anexos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ClienteInadimplenteUpdateWithoutClienteInput = {
    contratoId?: IntFieldUpdateOperationsInput | number
    valorEmAberto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    diasAtraso?: IntFieldUpdateOperationsInput | number
    ultimaCobranca?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    parcelas?: ParcelaInadimplenteUpdateManyWithoutClienteInadimplenteNestedInput
  }

  export type ClienteInadimplenteUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    contratoId?: IntFieldUpdateOperationsInput | number
    valorEmAberto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    diasAtraso?: IntFieldUpdateOperationsInput | number
    ultimaCobranca?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    parcelas?: ParcelaInadimplenteUncheckedUpdateManyWithoutClienteInadimplenteNestedInput
  }

  export type ClienteInadimplenteUncheckedUpdateManyWithoutClientesInadimplentesInput = {
    id?: IntFieldUpdateOperationsInput | number
    contratoId?: IntFieldUpdateOperationsInput | number
    valorEmAberto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    diasAtraso?: IntFieldUpdateOperationsInput | number
    ultimaCobranca?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ContratoCreateManyLoteInput = {
    id?: number
    clienteId: number
    chave?: string | null
    numeroContrato?: string | null
    dataEmissao?: Date | string | null
    dataPrimeiraPrestacao?: Date | string | null
    valorPrestacao?: Decimal | DecimalJsLike | number | string | null
    dataInicio: Date | string
    dataFim: Date | string
    valorTotal: Decimal | DecimalJsLike | number | string
    valorEntrada: Decimal | DecimalJsLike | number | string
    numeroParcelas: number
    dataVencimento: number
    clausulas: string
    status?: string
    dataCriacao?: Date | string
    parcelasPagas?: number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ContratoUpdateWithoutLoteInput = {
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    numeroContrato?: NullableStringFieldUpdateOperationsInput | string | null
    dataEmissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataPrimeiraPrestacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPrestacao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFieldUpdateOperationsInput | number
    dataVencimento?: IntFieldUpdateOperationsInput | number
    clausulas?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasPagas?: IntFieldUpdateOperationsInput | number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    cliente?: ClienteUpdateOneRequiredWithoutContratosNestedInput
    boletos?: BoletoUpdateManyWithoutContratoNestedInput
    reajustes?: ReajusteUpdateManyWithoutContratoNestedInput
    aditivos?: AditivoUpdateManyWithoutContratoNestedInput
    distratos?: DistratoUpdateManyWithoutContratoNestedInput
    quitacoes?: QuitacaoUpdateManyWithoutContratoNestedInput
    parcelas?: ParcelaUpdateManyWithoutContratoNestedInput
  }

  export type ContratoUncheckedUpdateWithoutLoteInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    chave?: NullableStringFieldUpdateOperationsInput | string | null
    numeroContrato?: NullableStringFieldUpdateOperationsInput | string | null
    dataEmissao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dataPrimeiraPrestacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPrestacao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    valorTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorEntrada?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    numeroParcelas?: IntFieldUpdateOperationsInput | number
    dataVencimento?: IntFieldUpdateOperationsInput | number
    clausulas?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasPagas?: IntFieldUpdateOperationsInput | number
    ultimoReajuste?: NullableJsonNullValueInput | InputJsonValue
    boletos?: BoletoUncheckedUpdateManyWithoutContratoNestedInput
    reajustes?: ReajusteUncheckedUpdateManyWithoutContratoNestedInput
    aditivos?: AditivoUncheckedUpdateManyWithoutContratoNestedInput
    distratos?: DistratoUncheckedUpdateManyWithoutContratoNestedInput
    quitacoes?: QuitacaoUncheckedUpdateManyWithoutContratoNestedInput
    parcelas?: ParcelaUncheckedUpdateManyWithoutContratoNestedInput
  }

  export type BoletoCreateManyContratoInput = {
    id?: number
    clienteId: number
    clienteNome: string
    valor: Decimal | DecimalJsLike | number | string
    dataVencimento: Date | string
    numeroParcela: number
    descricao: string
    nossoNumero: string
    linhaDigitavel: string
    codigoBarras: string
    pdfUrl: string
    dataGeracao?: Date | string
    status?: string
    dataPagamento?: Date | string | null
    valorPago?: Decimal | DecimalJsLike | number | string | null
    formaPagamento?: string | null
    dataCancelamento?: Date | string | null
    comprovante?: string | null
    parcelaId?: number | null
  }

  export type ReajusteCreateManyContratoInput = {
    id?: number
    parcelaReferencia: number
    valorOriginal: Decimal | DecimalJsLike | number | string
    valorReajustado: Decimal | DecimalJsLike | number | string
    indiceAplicado: Decimal | DecimalJsLike | number | string
    indiceBase: string
    percentualAdicional: Decimal | DecimalJsLike | number | string
    reajusteTotal: Decimal | DecimalJsLike | number | string
    dataReferencia: Date | string
    dataAplicacao?: Date | string | null
    status?: string
    aplicado?: boolean
  }

  export type AditivoCreateManyContratoInput = {
    id?: number
    tipo: string
    dataAssinatura: Date | string
    motivoAditivo: string
    novoValor?: Decimal | DecimalJsLike | number | string | null
    novaDataFim?: Date | string | null
    documentoUrl?: string | null
    status?: string
  }

  export type DistratoCreateManyContratoInput = {
    id?: number
    dataDistrato: Date | string
    motivoDistrato: string
    valorDevolucao?: Decimal | DecimalJsLike | number | string | null
    documentoUrl?: string | null
  }

  export type QuitacaoCreateManyContratoInput = {
    id?: number
    dataQuitacao: Date | string
    valorQuitacao: Decimal | DecimalJsLike | number | string
    documentoUrl?: string | null
  }

  export type ParcelaCreateManyContratoInput = {
    id?: number
    numero: number
    valor: Decimal | DecimalJsLike | number | string
    dataVencimento: Date | string
    status?: string
    dataPagamento?: Date | string | null
    valorPago?: Decimal | DecimalJsLike | number | string | null
    formaPagamento?: string | null
    observacoes?: string | null
    dataCriacao?: Date | string
    boletoId?: number | null
  }

  export type BoletoUpdateWithoutContratoInput = {
    clienteNome?: StringFieldUpdateOperationsInput | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    numeroParcela?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    nossoNumero?: StringFieldUpdateOperationsInput | string
    linhaDigitavel?: StringFieldUpdateOperationsInput | string
    codigoBarras?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    dataGeracao?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPago?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    dataCancelamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comprovante?: NullableStringFieldUpdateOperationsInput | string | null
    parcelaId?: NullableIntFieldUpdateOperationsInput | number | null
    cliente?: ClienteUpdateOneRequiredWithoutBoletosNestedInput
    parcela?: ParcelaUpdateOneWithoutBoletoNestedInput
  }

  export type BoletoUncheckedUpdateWithoutContratoInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    clienteNome?: StringFieldUpdateOperationsInput | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    numeroParcela?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    nossoNumero?: StringFieldUpdateOperationsInput | string
    linhaDigitavel?: StringFieldUpdateOperationsInput | string
    codigoBarras?: StringFieldUpdateOperationsInput | string
    pdfUrl?: StringFieldUpdateOperationsInput | string
    dataGeracao?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPago?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    dataCancelamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comprovante?: NullableStringFieldUpdateOperationsInput | string | null
    parcelaId?: NullableIntFieldUpdateOperationsInput | number | null
    parcela?: ParcelaUncheckedUpdateOneWithoutBoletoNestedInput
  }

  export type ReajusteUpdateWithoutContratoInput = {
    parcelaReferencia?: IntFieldUpdateOperationsInput | number
    valorOriginal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorReajustado?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    indiceAplicado?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    indiceBase?: StringFieldUpdateOperationsInput | string
    percentualAdicional?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    reajusteTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataReferencia?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAplicacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    aplicado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReajusteUncheckedUpdateWithoutContratoInput = {
    id?: IntFieldUpdateOperationsInput | number
    parcelaReferencia?: IntFieldUpdateOperationsInput | number
    valorOriginal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorReajustado?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    indiceAplicado?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    indiceBase?: StringFieldUpdateOperationsInput | string
    percentualAdicional?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    reajusteTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataReferencia?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAplicacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    aplicado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReajusteUncheckedUpdateManyWithoutReajustesInput = {
    id?: IntFieldUpdateOperationsInput | number
    parcelaReferencia?: IntFieldUpdateOperationsInput | number
    valorOriginal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorReajustado?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    indiceAplicado?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    indiceBase?: StringFieldUpdateOperationsInput | string
    percentualAdicional?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    reajusteTotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataReferencia?: DateTimeFieldUpdateOperationsInput | Date | string
    dataAplicacao?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    aplicado?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AditivoUpdateWithoutContratoInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    dataAssinatura?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoAditivo?: StringFieldUpdateOperationsInput | string
    novoValor?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    novaDataFim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type AditivoUncheckedUpdateWithoutContratoInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    dataAssinatura?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoAditivo?: StringFieldUpdateOperationsInput | string
    novoValor?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    novaDataFim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type AditivoUncheckedUpdateManyWithoutAditivosInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    dataAssinatura?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoAditivo?: StringFieldUpdateOperationsInput | string
    novoValor?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    novaDataFim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type DistratoUpdateWithoutContratoInput = {
    dataDistrato?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoDistrato?: StringFieldUpdateOperationsInput | string
    valorDevolucao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    documentoUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DistratoUncheckedUpdateWithoutContratoInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataDistrato?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoDistrato?: StringFieldUpdateOperationsInput | string
    valorDevolucao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    documentoUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DistratoUncheckedUpdateManyWithoutDistratosInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataDistrato?: DateTimeFieldUpdateOperationsInput | Date | string
    motivoDistrato?: StringFieldUpdateOperationsInput | string
    valorDevolucao?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    documentoUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuitacaoUpdateWithoutContratoInput = {
    dataQuitacao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorQuitacao?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    documentoUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuitacaoUncheckedUpdateWithoutContratoInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataQuitacao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorQuitacao?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    documentoUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuitacaoUncheckedUpdateManyWithoutQuitacoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataQuitacao?: DateTimeFieldUpdateOperationsInput | Date | string
    valorQuitacao?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    documentoUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ParcelaUpdateWithoutContratoInput = {
    numero?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPago?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    boleto?: BoletoUpdateOneWithoutParcelaNestedInput
  }

  export type ParcelaUncheckedUpdateWithoutContratoInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPago?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    boletoId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ParcelaUncheckedUpdateManyWithoutParcelasInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: IntFieldUpdateOperationsInput | number
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    dataPagamento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    valorPago?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    formaPagamento?: NullableStringFieldUpdateOperationsInput | string | null
    observacoes?: NullableStringFieldUpdateOperationsInput | string | null
    dataCriacao?: DateTimeFieldUpdateOperationsInput | Date | string
    boletoId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ParcelaInadimplenteCreateManyClienteInadimplenteInput = {
    id?: number
    numero: number
    dataVencimento: Date | string
    valor: Decimal | DecimalJsLike | number | string
    valorAtualizado: Decimal | DecimalJsLike | number | string
    status: string
  }

  export type ParcelaInadimplenteUpdateWithoutClienteInadimplenteInput = {
    numero?: IntFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorAtualizado?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ParcelaInadimplenteUncheckedUpdateWithoutClienteInadimplenteInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: IntFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorAtualizado?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ParcelaInadimplenteUncheckedUpdateManyWithoutParcelasInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: IntFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    valor?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valorAtualizado?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}